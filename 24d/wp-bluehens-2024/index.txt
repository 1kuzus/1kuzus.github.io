2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
3:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","842","static/chunks/842-812b9489b5c7f4d9.js","931","static/chunks/app/page-8a7b32c8a4befa3e.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","842","static/chunks/842-812b9489b5c7f4d9.js","931","static/chunks/app/page-8a7b32c8a4befa3e.js"],"LikeButton"]
7:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
8:I[5613,[],""]
a:I[31778,[],""]
b:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-9af8316721e2155d.js"],"GlobalProvider"]
c:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-9af8316721e2155d.js"],""]
9:["slug","24d/wp-bluehens-2024","c"]
0:["TQbl9DWDgb-w7WxOOip5t",[[["",{"children":[["slug","24d/wp-bluehens-2024","c"],{"children":["__PAGE__?{\"slug\":[\"24d\",\"wp-bluehens-2024\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24d/wp-bluehens-2024","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"BlueHens CTF 2024 Writeup"}],["$","$L3",null,{"path":"/24d/wp-bluehens-2024/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}],["$","$L6",null,{"path":"/24d/wp-bluehens-2024/"}]]}],["$","$L7",null,{}]]}]],null]]},["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f0e9ea0d1087a412.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/17b3c4485edf7c41.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
e:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
f:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
10:Tf2b,<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cardsElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"cards"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cardsElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  firebase
    <span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">limitToFirst</span><span class="token punctuation">(</span><span class="token number">12000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ss</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> results <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      results<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cObj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#cards"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>CHR: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cObj<span class="token punctuation">.</span>chr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> NEXTCHR: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cObj<span class="token punctuation">.</span>next<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
11:Te8d,hints <span class="token operator">=</span> <span class="token triple-quoted-string string">"""CHR: ? NEXTCHR: 1627 - 1151
CHR: 3 NEXTCHR: 275 + 896
CHR: O NEXTCHR: 912660 / 2173
CHR: } NEXTCHR: 5918500 / 3115
CHR: \ NEXTCHR: -1963 + 3668
...
CHR: ! NEXTCHR: (191 * 1) + 46
CHR: E NEXTCHR: (2074 * 0) + 415
CHR: | NEXTCHR: (3310 * 0) + 1422
CHR: \ NEXTCHR: -1963 + 3668
CHR: o NEXTCHR: 3775 - 3429
CHR: END NEXTCHR: You got the flag"""</span>

lines <span class="token operator">=</span> hints<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
    s1<span class="token punctuation">,</span> s2 <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" NEXTCHR: "</span><span class="token punctuation">)</span>
    <span class="token builtin">chr</span> <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> s2 <span class="token operator">==</span> <span class="token string">"exit()"</span> <span class="token keyword">or</span> s2 <span class="token operator">==</span> <span class="token string">"You got the flag"</span><span class="token punctuation">:</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
    nextpos <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>
    data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">,</span> nextpos<span class="token punctuation">)</span><span class="token punctuation">)</span>

pos <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token builtin">chr</span><span class="token punctuation">,</span> nextpos <span class="token operator">=</span> data<span class="token punctuation">[</span>pos<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">chr</span> <span class="token operator">==</span> <span class="token string">"END"</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
    pos <span class="token operator">=</span> nextpos
12:T1696,<span class="token keyword">const</span> <span class="token function-variable function">tryDecode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">boardData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> encBytes <span class="token operator">=</span> aesjs<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>hex<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>
        <span class="token string">"ebab19591082e96b3db6d083e73b70350b008c5c33950b3b0cbb3bcb0001b643ef875cbecf0622"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> keyHex <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>boardData<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> keyBytes <span class="token operator">=</span> aesjs<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>hex<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>keyHex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> aesCtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">aesjs<span class="token punctuation">.</span>ModeOfOperation<span class="token punctuation">.</span>ctr</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> message <span class="token operator">=</span> aesCtr<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> aesjs<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>utf8<span class="token punctuation">.</span><span class="token function">fromBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"ctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> boardDataStr <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 例如："1100110000110011"</span>
    <span class="token keyword">const</span> boardData <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>boardDataStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">bit</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">parseInt</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 例如：[1, 1, 0, 0, ...]</span>
    <span class="token function">tryDecode</span><span class="token punctuation">(</span>boardData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
13:T30e3,flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">" "</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">51</span>

flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'u'</span>
flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span>
flag<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span>
flag<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'t'</span>
flag<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'f'</span>
flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'{'</span>

flag<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x5f</span><span class="token punctuation">)</span>  <span class="token comment"># _</span>

flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x7d</span><span class="token punctuation">)</span>  <span class="token comment"># }</span>

l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">]</span>
s1 <span class="token operator">=</span> <span class="token string">"r!zz13r"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag<span class="token punctuation">[</span><span class="token number">29</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token string">"5ki8idi"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag<span class="token punctuation">[</span><span class="token number">43</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag<span class="token punctuation">[</span><span class="token number">15</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>l2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

l3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>l3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

l4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag<span class="token punctuation">[</span><span class="token number">37</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>l3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> l4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

flag<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span>
flag<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span>

flag<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>
flag<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>

flag<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>
flag<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>
flag<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span>
flag<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span>
flag<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span>
flag<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span>

flag<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"h"</span>  <span class="token comment"># guess from "ohio"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>
14:T634,<span class="token comment"># In [15]: (flag*32)[::17][:32]</span>
<span class="token comment"># Out[15]: 'u_cnfrj_sr_b_34}yd1tt{0upt04lbmb'</span>

out <span class="token operator">=</span> <span class="token string">"u_cnfrj_sr_b_34}yd1tt{0upt04lbmb"</span>
flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">" "</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> out<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>
15:T78e,ciphers = [
    '43794c9c8faa2cff24edc8afe507a13f62837c7e166f428cab5aff893225ff19104bc8754c1c09',
    '5d315e8786e62cf763e9d4afe80ca13b649a717e11615986b642f3952f76b71b0342c4',
    '46785a8bcae62aeb60a5deeef107a1256ed7792752695886ff50f5886171ff1717',
    '5d315e819fe621b966e08dfae906e43a78837b31162e5e8cff46e8953275f20a0d5ad23d4712144c',
    '557f4dce9ee220b967e4dfffe616e9216a9934291b7d5690bb45ba922e6afc',
    '55315a868fef35f16beac6afe810a1206a81717e1e6b5690b152ba953462ff0c424acd6e0307055a81b93590c1fe',
    '557d489dcafd2df870a5cfe0e816f268628334291b7a5fc2aa58f99f3276f616160fc27c5116',
    '557f4dce8bee21fc24f1c5eaa712ee3f6e853431142e448db216fb9e2b70e5110c48816b46011e5a',
    '407e099783ef29fd24edc4fca704f33d6283343f1c6a178ab645ba962464f1581147c0714f530350d5f53690dee6',
    '40785ace93e530b970edccfba711e0312b9e607e1c6143c2b616e3953425f317425bc9780317085ac5a6',
]

# target:
target = "41754a9a8cf13da976dac4e1d810b1253f994b6f47514387b106e8a57175a40a0370d22c4d14084d9ea8"


def cipher_to_byte_list(cipher):
    return [int(cipher[i:i + 2], 16) for i in range(0, len(cipher), 2)]


ciphers = [cipher_to_byte_list(c) for c in ciphers]
target = cipher_to_byte_list(target)

stats = [[] for _ in range(len(target))]


def leak(cipher):
    for i in range(min(len(target), len(cipher))):
        if target[i] ^ cipher[i] >= 64:
            stats[i].append(cipher[i] ^ target[i] ^ ord(' '))


for cipher in ciphers:
    leak(cipher)


def mode(ls):
    if ls:
        return max(set(ls), key=ls.count)
    else:
        return 0


message = ""
for stats_ch in stats:
    if len(stats_ch) > 4:
        message += "."
    else:
        m = mode(stats_ch)
        if len(stats_ch) == 1 or stats_ch.count(m) > 1:
            message += chr(m)
        else:
            ch = "."
            for c in stats_ch:
                if 65 <= c <= 90 or 97 <= c <= 122:
                    ch = chr(c)
            message += ch

print(message)
16:T2646,ciphers <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'43794c9c8faa2cff24edc8afe507a13f62837c7e166f428cab5aff893225ff19104bc8754c1c09'</span><span class="token punctuation">,</span>
    <span class="token string">'5d315e8786e62cf763e9d4afe80ca13b649a717e11615986b642f3952f76b71b0342c4'</span><span class="token punctuation">,</span>
    <span class="token string">'46785a8bcae62aeb60a5deeef107a1256ed7792752695886ff50f5886171ff1717'</span><span class="token punctuation">,</span>
    <span class="token string">'5d315e819fe621b966e08dfae906e43a78837b31162e5e8cff46e8953275f20a0d5ad23d4712144c'</span><span class="token punctuation">,</span>
    <span class="token string">'557f4dce9ee220b967e4dfffe616e9216a9934291b7d5690bb45ba922e6afc'</span><span class="token punctuation">,</span>
    <span class="token string">'55315a868fef35f16beac6afe810a1206a81717e1e6b5690b152ba953462ff0c424acd6e0307055a81b93590c1fe'</span><span class="token punctuation">,</span>
    <span class="token string">'557d489dcafd2df870a5cfe0e816f268628334291b7a5fc2aa58f99f3276f616160fc27c5116'</span><span class="token punctuation">,</span>
    <span class="token string">'557f4dce8bee21fc24f1c5eaa712ee3f6e853431142e448db216fb9e2b70e5110c48816b46011e5a'</span><span class="token punctuation">,</span>
    <span class="token string">'407e099783ef29fd24edc4fca704f33d6283343f1c6a178ab645ba962464f1581147c0714f530350d5f53690dee6'</span><span class="token punctuation">,</span>
    <span class="token string">'40785ace93e530b970edccfba711e0312b9e607e1c6143c2b616e3953425f317425bc9780317085ac5a6'</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment"># target:</span>
target <span class="token operator">=</span> <span class="token string">"41754a9a8cf13da976dac4e1d810b1253f994b6f47514387b106e8a57175a40a0370d22c4d14084d9ea8"</span>


<span class="token keyword">def</span> <span class="token function">cipher_to_byte_list</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>


ciphers <span class="token operator">=</span> <span class="token punctuation">[</span>cipher_to_byte_list<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> ciphers<span class="token punctuation">]</span>
target <span class="token operator">=</span> cipher_to_byte_list<span class="token punctuation">(</span>target<span class="token punctuation">)</span>

stats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">64</span><span class="token punctuation">:</span>
            stats<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">for</span> cipher <span class="token keyword">in</span> ciphers<span class="token punctuation">:</span>
    leak<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">mode</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> ls<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>ls<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>


message <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> stats_ch <span class="token keyword">in</span> stats<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stats_ch<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">:</span>
        message <span class="token operator">+=</span> <span class="token string">"."</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> mode<span class="token punctuation">(</span>stats_ch<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stats_ch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> stats_ch<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
            message <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ch <span class="token operator">=</span> <span class="token string">"."</span>
            <span class="token keyword">for</span> c <span class="token keyword">in</span> stats_ch<span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token number">65</span> <span class="token operator">&lt;=</span> c <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token keyword">or</span> <span class="token number">97</span> <span class="token operator">&lt;=</span> c <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">:</span>
                    ch <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            message <span class="token operator">+=</span> ch

<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
17:T16f9,<span class="token comment"># ----- guess the rest -----</span>

ciphers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cipher_to_byte_list<span class="token punctuation">(</span>
    <span class="token string">"41754a9a8cf13da976dac4e1d810b1253f994b6f47514387b106e8a57175a40a0370d22c4d14084d9ea8"</span>  <span class="token comment"># target</span>
    <span class="token comment"># "d c t f { x 0 r _ i n _ r 0 m 4 n _ 1 5 _ t e n 0 r _ 0 p 3 r a _ s 1 n g e r ? } "</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
key <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">153</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">173</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">247</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span>
    <span class="token number">226</span><span class="token punctuation">,</span> <span class="token number">223</span>
<span class="token punctuation">]</span>  <span class="token comment"># try byte by byte</span>

<span class="token comment"># enough info to find the poem:</span>
<span class="token comment"># https://milton.host.dartmouth.edu/reading_room/comus/text.shtml</span>

c7 <span class="token operator">=</span> <span class="token string">"and adde the power of som adjuring verse"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    key<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c7<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> ciphers<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

key<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">161</span><span class="token punctuation">)</span>
key<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">213</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> cipher <span class="token keyword">in</span> ciphers<span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
18:T8e7,code = ("""5308174f590b0103555810
13110d171212061d7f
0d0b112b03150a01260844
5d
5100020007
5944
510f060d
5c44187e465b4953
5116060713171d53
4844
5243
4e6e4354465b0f1c2d5818
510d43
4844
45
4e44
510d43
5308174f46
061011180315
5d
5100020007
5c5f43
510d
5e4f4a541d7149537f5810527f47
5116060713171d53
5b5943
5100020007
2e
510d
28443d54
510f060d
2e
510d43
5044
061011180315
5d
510f060d
5c39587e465b4953227210527f47075607060b3110
000a13150510
5d
572c4956
59
5116060713171d
5c3f
44
285f6954460663797f58
510f060d46
4844
52110717121d121a2c2748422d38124640000a266f422d315e444b420843
4e6e695446
51070c10035b
4844
1d0d041c0a120e1b2b27561b3302
5d
2a3b253d2a3e362c
5944
01161611
5c5f695446
510b011213080a122b1d542d3c08115653
4844
0516061339090c03331953170004145f1f11183c5b
5d6e4354465b
524b451812401a033e16182901411247482e537616152b55185a15425c420f005d2746002f195e5438134e1c0054
596e4354465b0f06311b441b3009551b
5109020005130c00
5c441607035b41
510f060d
5c44187e465b49537f581052
51070c1a121e07077f
4844
5109020005130c00
2e
47
285f6954465b49537f5810
510b011213080a122b1d542d3c081b47161d0d7f
4844
0d0b112b03150a01260844
5d
51070c1a121e0707
5944
510f060d
5c5f6954465b49537f5810003a1300411d53
52420f005d081912315f
5b
5109020005130c00
2e
44
284a
524204005d5c49
5b44
1d100e18150b0c1036195c1137060740
5d
510b011213080a122b1d542d3c081b47161d0d
5c444d54
52420f005d541a033e1616152b5c535f07481b2d16152b5517
4e6e4354465b145f555810527f
51070c1003714953
5c5f695446
5a4b4710091801073214104f7f09104453373612741d3c1b5d1151095d4d587e465b465c7b1c5f113713185f5e551e2b0b1e300f545c1b1e1a00065d5d714953
10070b1b46
510b011213080a122b1d542d3c081156
4e6e4354
5a4b13060f151d2c2d50451c2f0616585b513175125e7b0d5f105a542e553e5d5d71
4a4204005d71""")


def cipher_to_byte_list(cipher):
    return [int(cipher[i:i + 2], 16) for i in range(0, len(cipher), 2)]


code = code.split("\n")
code = [cipher_to_byte_list(line) for line in code]

key = [117, 100, 99, 116, 102, 123, 105, 115, 95, 120, 48, 114, 95, 103, 117, 51, 115, 115, 121, 95, 48, 114, 95, 110,
    48, 116, 63, 125, 117, 100]

for line in code:
    if not len(line) >= len(key):
        continue
    for i in range(min(len(key), len(line))):
        print(chr(line[i] ^ key[i]), end="")
    if len(line) > len(key):
        print(line[len(key):], end="")
    print()
19:T2275,code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token triple-quoted-string string">"""5308174f590b0103555810
13110d171212061d7f
0d0b112b03150a01260844
5d
5100020007
5944
510f060d
5c44187e465b4953
5116060713171d53
4844
5243
4e6e4354465b0f1c2d5818
510d43
4844
45
4e44
510d43
5308174f46
061011180315
5d
5100020007
5c5f43
510d
5e4f4a541d7149537f5810527f47
5116060713171d53
5b5943
5100020007
2e
510d
28443d54
510f060d
2e
510d43
5044
061011180315
5d
510f060d
5c39587e465b4953227210527f47075607060b3110
000a13150510
5d
572c4956
59
5116060713171d
5c3f
44
285f6954460663797f58
510f060d46
4844
52110717121d121a2c2748422d38124640000a266f422d315e444b420843
4e6e695446
51070c10035b
4844
1d0d041c0a120e1b2b27561b3302
5d
2a3b253d2a3e362c
5944
01161611
5c5f695446
510b011213080a122b1d542d3c08115653
4844
0516061339090c03331953170004145f1f11183c5b
5d6e4354465b
524b451812401a033e16182901411247482e537616152b55185a15425c420f005d2746002f195e5438134e1c0054
596e4354465b0f06311b441b3009551b
5109020005130c00
5c441607035b41
510f060d
5c44187e465b49537f581052
51070c1a121e07077f
4844
5109020005130c00
2e
47
285f6954465b49537f5810
510b011213080a122b1d542d3c081b47161d0d7f
4844
0d0b112b03150a01260844
5d
51070c1a121e0707
5944
510f060d
5c5f6954465b49537f5810003a1300411d53
52420f005d081912315f
5b
5109020005130c00
2e
44
284a
524204005d5c49
5b44
1d100e18150b0c1036195c1137060740
5d
510b011213080a122b1d542d3c081b47161d0d
5c444d54
52420f005d541a033e1616152b5c535f07481b2d16152b5517
4e6e4354465b145f555810527f
51070c1003714953
5c5f695446
5a4b4710091801073214104f7f09104453373612741d3c1b5d1151095d4d587e465b465c7b1c5f113713185f5e551e2b0b1e300f545c1b1e1a00065d5d714953
10070b1b46
510b011213080a122b1d542d3c081156
4e6e4354
5a4b13060f151d2c2d50451c2f0616585b513175125e7b0d5f105a542e553e5d5d71
4a4204005d71"""</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">cipher_to_byte_list</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>


code <span class="token operator">=</span> code<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
code <span class="token operator">=</span> <span class="token punctuation">[</span>cipher_to_byte_list<span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> code<span class="token punctuation">]</span>

key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span>
    <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> line <span class="token keyword">in</span> code<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
5:[["$","$Le",null,{"src":"overview.png","width":"100%"}],["$","h2",null,{"className":"x-h1","children":"Web"}],["$","h3",null,{"className":"x-h2","children":"lists of JSONs"}],["$","$Le",null,{"src":"fig1.jpg","width":"800px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">limitToFirst(5)</code>不够，在控制台贴上："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"JavaScript"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"(function () {\n  let cardsElement = document.getElementById(\"cards\");\n  cardsElement.innerHTML = \"\";\n  firebase\n    .database()\n    .ref(\"/flag\")\n    .limitToFirst(12000)\n    .once(\"value\", (ss) => {\n      let results = ss.val();\n      results.forEach((cObj) => {\n        $(\"#cards\").append(`<div>CHR: ${cObj.chr} NEXTCHR: ${cObj.next}`);\n      });\n    });\n})();\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"实际数据的条数只有<code class=\"x-inline-highlight\">1900</code>多一点；大概就是一个类似链表的结构，然后用Python去遍历输出："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"hints = \"\"\"CHR: ? NEXTCHR: 1627 - 1151\nCHR: 3 NEXTCHR: 275 + 896\nCHR: O NEXTCHR: 912660 / 2173\nCHR: } NEXTCHR: 5918500 / 3115\nCHR: \\ NEXTCHR: -1963 + 3668\n...\nCHR: ! NEXTCHR: (191 * 1) + 46\nCHR: E NEXTCHR: (2074 * 0) + 415\nCHR: | NEXTCHR: (3310 * 0) + 1422\nCHR: \\ NEXTCHR: -1963 + 3668\nCHR: o NEXTCHR: 3775 - 3429\nCHR: END NEXTCHR: You got the flag\"\"\"\n\nlines = hints.split(\"\\n\")\ndata = []\nfor line in lines:\n    s1, s2 = line.split(\" NEXTCHR: \")\n    chr = s1[5:]\n    if s2 == \"exit()\" or s2 == \"You got the flag\":\n        data.append((chr, -1))\n        continue\n    nextpos = int(eval(s2))\n    data.append((chr, nextpos))\n\npos = 0\nwhile True:\n    chr, nextpos = data[pos]\n    if chr == \"END\":\n        break\n    print(chr, end=\"\")\n    pos = nextpos\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"表达式用<code class=\"x-inline-highlight\">eval</code>处理很方便，但是题目中混入了<code class=\"x-inline-highlight\">exit()</code>，要单独筛一下。输出为："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"?tCUzc-Hj,xMUjas&TF{JS0N_1n_tr33}o`JM0FYN"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"?tCUzc-Hj,xMUjas&amp;TF{JS0N_1n_tr33}o`JM0FYN"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"Nonogram Pt. 2: Disgraced"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"正常玩一遍Nonogram，通过后显示的是乱码："}}],["$","$Le",null,{"src":"fig2.jpg","width":"600px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"全局搜索找一下设置这个<code class=\"x-inline-highlight\">div</code>内容的函数："}}],["$","$Le",null,{"src":"fig3.jpg","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"打断点调试一下，看到解密用的<code class=\"x-inline-highlight\">key</code>就是当前Nonogram面板上的状态；而密文来自于URL参数，是一个定值。"}}],["$","$Le",null,{"src":"fig4.jpg","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"尝试了两种满足条件的解法发现解码的消息都是乱码，因此直接想爆破了；理论上每一个小块可以是<code class=\"x-inline-highlight\">0</code>/<code class=\"x-inline-highlight\">1</code>/<code class=\"x-inline-highlight\">2</code>（不填/黑/红），但是刚试二进制的组合时就成功了。代码如下，直接贴到控制台运行即可。注意要在调试没结束的状态下运行，不然有一些局部变量未定义。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"JavaScript"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"const tryDecode = (boardData) => {\n    let encBytes = aesjs.utils.hex.toBytes(\n        \"ebab19591082e96b3db6d083e73b70350b008c5c33950b3b0cbb3bcb0001b643ef875cbecf0622\"\n    );\n    let keyHex = md5(boardData.join(\",\"));\n    let keyBytes = aesjs.utils.hex.toBytes(keyHex);\n    let aesCtr = new aesjs.ModeOfOperation.ctr(keyBytes);\n    let message = aesCtr.decrypt(encBytes);\n    let text = aesjs.utils.utf8.fromBytes(message);\n    if (text.includes(\"ctf\")) console.log(text);\n};\n\nfor (let i = 0; i < 2 ** 16; i++) {\n    const boardDataStr = i.toString(2).padStart(16, \"0\"); // 例如：\"1100110000110011\"\n    const boardData = Array.from(boardDataStr).map((bit) => parseInt(bit, 10)); // 例如：[1, 1, 0, 0, ...]\n    tryDecode(boardData);\n}\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]]}],["$","$Le",null,{"src":"fig5.jpg","width":"800px","filterDarkTheme":true}],["$","h2",null,{"className":"x-h1","children":"Reversing"}],["$","h3",null,{"className":"x-h2","children":"Bainrot.c"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"肉眼反混淆，纯粹的精神污染，感受下源码："}}],["$","$Le",null,{"src":"fig6.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"用很多俚语/梗代替了正常的C关键字，但是语法结构没有破坏，可以一点一点猜出来，边猜边全局替换，就越看越懂了。题目的大意就是给<code class=\"x-inline-highlight\">flag</code>设置了一系列的验证规则，需要全部通过。解题的过程就是根据规则确定<code class=\"x-inline-highlight\">flag</code>的中间位。第<code class=\"x-inline-highlight\">25</code>位没有线索，是根据源码中的<code class=\"x-inline-highlight\">ohio</code>推测出来的。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"flag = [\" \"] * 51\n\nflag[0] = 'u'\nflag[1] = 'd'\nflag[2] = 'c'\nflag[3] = 't'\nflag[4] = 'f'\nflag[5] = '{'\n\nflag[10] = chr(0x5f)  # _\n\nflag[-1] = chr(0x7d)  # }\n\nl1 = [0x47, 0x4a, 0x13, 0x42, 0x58, 0x57, 0x1b]\ns1 = \"r!zz13r\"\nfor i in range(7):\n    flag[29 + i] = chr(l1[i] ^ ord(s1[i]))\ns2 = \"5ki8idi\"\nfor i in range(7):\n    flag[43 + i] = chr(l1[i] ^ ord(s2[i]))\n\nl2 = [0x40, 0x05, 0x5c, 0x48, 0x59, 0x0f, 0x5a, 0x5b, 0x00]\nfor i in range(8):\n    flag[15 + i] = chr(l2[i] ^ ord(s2[i % 7]))\n\nl3 = [0x62, 0x6e, 0x60, 0x75, 0x69, 0x34, 0x00]\nfor i in range(6):\n    flag[8 + i] = chr(l3[i] - 1)\n\nl4 = [0x05, 0x17, 0x01, 0x01, 0x1d, 0x00]\nfor i in range(5):\n    flag[37 + i] = chr(l3[i] ^ l4[i])\n\nflag[6] = flag[31]\nflag[26] = flag[44]\n\nflag[24] = \"0\"\nflag[27] = \"0\"\n\nflag[7] = flag[10]\nflag[42] = flag[10]\nflag[28] = flag[42]\nflag[36] = flag[28]\nflag[23] = flag[36]\nflag[14] = flag[23]\n\nflag[25] = \"h\"  # guess from \"ohio\"\nprint(\"\".join(flag))\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"udctf{i_am_th3_un5p0k3n_0h!0_5ki8idi_gyatt_r!zz13r}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"udctf{i_am_th3_un5p0k3n_0h!0_5ki8idi_gyatt_r!zz13r}"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"XOR School系列"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"应该是这次比赛的特色吧，感觉偏向密码学一点。一共解了三题，后两题思路都非常相似（靠猜）。"}}],["$","h3",null,{"className":"x-h2","children":"XS1"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"# In [15]: (flag*32)[::17][:32]\n# Out[15]: 'u_cnfrj_sr_b_34}yd1tt{0upt04lbmb'\n\nout = \"u_cnfrj_sr_b_34}yd1tt{0upt04lbmb\"\nflag = [\" \"] * 100\n\nfor i in range(len(out)):\n    flag[i] = out[(i * 17) % 32]\n\nprint(\"\".join(flag))\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"udctf{just_4_b4by_1ntr0_pr0bl3m}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"udctf{just_4_b4by_1ntr0_pr0bl3m}"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"XS3"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"我做的时候大致的历程是三步：首先，本题是同一个<code class=\"x-inline-highlight\">key</code>加密多个明文，可以利用ASCII字符之间异或小于<code class=\"x-inline-highlight\">64</code>，而ASCII字符异或空格大于<code class=\"x-inline-highlight\">64</code>这个特性，第一阶段先过出可能被泄露的位："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"$15"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":".dctf{..r_in_..m.n_.._ten.r..p.ra_s.ng..k}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":".dctf{..r_in_..m.n_.._ten.r..p.ra_s.ng..k}"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"剩下的部分中<code class=\"x-inline-highlight\">.</code>可能是这一位上刚好没有任何密文的对应位置是空格，或者这一位是ASCII码值小于<code class=\"x-inline-highlight\">64</code>的字符（比如数字）等等。但是先验知识一眼看出<code class=\"x-inline-highlight\">flag</code>前几位是<code class=\"x-inline-highlight\">udctf</code>，就可以进入第二阶段的猜测，因为题目说了密文是诗歌中的句子，总可以根据某句话的语义推测出一个没拼写完的单词，只要恢复任意一条密文的下一个位置，就可以恢复<code class=\"x-inline-highlight\">key</code>的一位。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"理论上可以一直重复下去，但其实猜到一定数量就可以Google一下了，找到原文：<a href=\"https://milton.host.dartmouth.edu/reading_room/comus/text.shtml\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">https://milton.host.dartmouth.edu/reading_room/comus/text.shtml</a>"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"第三阶段，找到其中一句（长度够的话）就可以恢复全部到密钥。最后的代码如下，但这并不是一次就写完的，是边猜边补充的。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"# ----- guess the rest -----\n\nciphers.append(cipher_to_byte_list(\n    \"41754a9a8cf13da976dac4e1d810b1253f994b6f47514387b106e8a57175a40a0370d22c4d14084d9ea8\"  # target\n    # \"d c t f { x 0 r _ i n _ r 0 m 4 n _ 1 5 _ t e n 0 r _ 0 p 3 r a _ s 1 n g e r ? } \"\n))\nkey = [\n    52, 17, 41, 238, 234, 138, 69, 153, 4, 133, 173, 143, 135, 98, 129, 72, 11, 247, 20, 94, 114, 14, 55,\n    226, 223\n]  # try byte by byte\n\n# enough info to find the poem:\n# https://milton.host.dartmouth.edu/reading_room/comus/text.shtml\n\nc7 = \"and adde the power of som adjuring verse\"\nfor i in range(len(key), len(c7)):\n    key.append(ord(c7[i]) ^ ciphers[7][i])\n\nkey.append(161)\nkey.append(213)\n\nfor cipher in ciphers:\n    for i in range(min(len(key), len(cipher))):\n        print(chr(cipher[i] ^ key[i]), end=\"\")\n    print()\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$17"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"udctf{x0r_in_r0m4n_15_ten0r_0p3ra_s1nger?}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"udctf{x0r_in_r0m4n_15_ten0r_0p3ra_s1nger?}"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"XS10"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"看到加密后的代码，推测还是用了相同的密钥对每一行对应位置做异或加密，因为观察前几列能发现有很多重复出现的组合。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这题我找到的突破口是高亮颜色："}}],["$","$Le",null,{"src":"fig7.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"PHP代码中注释的颜色是亮橙色，因此推测<code class=\"x-inline-highlight\">5a4b</code>是<code class=\"x-inline-highlight\">//</code>的加密，然后恢复出密钥的前两位；后面的猜测就跟XS3非常相似，例如看到<code class=\"x-inline-highlight\">ec</code>出现了几次自然就会猜测后两位是<code class=\"x-inline-highlight\">ho</code>，从而继续恢复密钥。编程语言猜起来比诗歌简单很多。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"$18"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$19"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Lf",null,{"className":"x-codeblock-header-copy","text":"udctf{is_x0r_gu3ssy_0r_n0t?}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"udctf{is_x0r_gu3ssy_0r_n0t?}"}}]}]]}]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"BlueHens CTF 2024 Writeup - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24d/wp-bluehens-2024/"}]]
1:null
