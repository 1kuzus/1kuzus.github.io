2:I[55329,["481","static/chunks/457b8330-69f8bab043e7caf2.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-a4bb96eb02e32330.js"],""]
3:I[93334,["481","static/chunks/457b8330-69f8bab043e7caf2.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","931","static/chunks/app/page-7521ec2b6462aa90.js"],""]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-69f8bab043e7caf2.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-a4bb96eb02e32330.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-59eabbb1c88a86d9.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-59eabbb1c88a86d9.js"],""]
8:["slug","24b/leetcode-4","c"]
0:["DX4FgV21rBh14Fel6n1Kn",[[["",{"children":[["slug","24b/leetcode-4","c"],{"children":["__PAGE__?{\"slug\":[\"24b\",\"leetcode-4\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24b/leetcode-4","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"x-title","children":"LeetCode 4.寻找两个正序数组的中位数"}],["$","$L3",null,{"path":"/24b/leetcode-4/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading..."}],"children":["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8d68c128e728a729.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/610dd52255c3b2a8.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
e:I[62029,["481","static/chunks/457b8330-69f8bab043e7caf2.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-a4bb96eb02e32330.js"],""]
d:T4c9,第二点是显然的。对于第一点，如果合并序列的中位数<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>同时大于<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>和<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>，那么原来两个序列中一定分别有多于半数的元素小于<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>，此时合并序列中小于<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>的元素个数也一定多于半数，与中位数定义矛盾。f:T53d,class Solution {
public:
    double mid(vector<int>& arr)//返回数组中位数
    {
        return (arr[arr.size()/2]+arr[(arr.size()-1)/2])/2.0;
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size(),n=nums2.size();
        if(m==0) return mid(nums2);
        if(n==0) return mid(nums1);
        if(n<m) return findMedianSortedArrays(nums2,nums1);
        int l1=0,r1=m-1,l2=0,r2=n-1,m1,m2;
        while(l1+1<r1)
        {
            m1=l1+(r1-l1)/2,m2=l2+(r2-l2)/2;
            if(nums1[m1]+nums1[m1+(r1-l1)%2]<nums2[m2]+nums2[m2+(r2-l2)%2])
            {
                r2-=(m1-l1),l1=m1;
            }
            else
            {
                if((r1-l1+1)%2==0) m1++;
                l2+=(r1-m1),r1=m1;
            }
        }
        m2=l2+(r2-l2)/2;
        bool flag=(r2-l2)%2;//长数组剩余部分是否为偶数个
        vector<int> ans={nums1[l1],nums2[m2]};
        if(r1!=l1) ans.emplace_back(nums1[r1]);//短数组长度为2
        if(flag) ans.emplace_back(nums2[m2+1]);//长数组长度为偶数
        if(0<=m2-1&&m2+1+flag<n)//中位数左、右一个元素均不越界
        {
            ans.emplace_back(nums2[m2-1]);
            ans.emplace_back(nums2[m2+1+flag]);
        }
        sort(ans.begin(),ans.end());
        return mid(ans);
    }
};
10:T3266,<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">double</span> <span class="token function">mid</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token comment">//返回数组中位数</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m<span class="token operator">=</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">mid</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">mid</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r1<span class="token operator">=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>l2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r2<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m1<span class="token punctuation">,</span>m2<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>r1<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m1<span class="token operator">=</span>l1<span class="token operator">+</span><span class="token punctuation">(</span>r1<span class="token operator">-</span>l1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>m2<span class="token operator">=</span>l2<span class="token operator">+</span><span class="token punctuation">(</span>r2<span class="token operator">-</span>l2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m1<span class="token punctuation">]</span><span class="token operator">+</span>nums1<span class="token punctuation">[</span>m1<span class="token operator">+</span><span class="token punctuation">(</span>r1<span class="token operator">-</span>l1<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>m2<span class="token punctuation">]</span><span class="token operator">+</span>nums2<span class="token punctuation">[</span>m2<span class="token operator">+</span><span class="token punctuation">(</span>r2<span class="token operator">-</span>l2<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                r2<span class="token operator">-=</span><span class="token punctuation">(</span>m1<span class="token operator">-</span>l1<span class="token punctuation">)</span><span class="token punctuation">,</span>l1<span class="token operator">=</span>m1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r1<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> m1<span class="token operator">++</span><span class="token punctuation">;</span>
                l2<span class="token operator">+=</span><span class="token punctuation">(</span>r1<span class="token operator">-</span>m1<span class="token punctuation">)</span><span class="token punctuation">,</span>r1<span class="token operator">=</span>m1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        m2<span class="token operator">=</span>l2<span class="token operator">+</span><span class="token punctuation">(</span>r2<span class="token operator">-</span>l2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token punctuation">(</span>r2<span class="token operator">-</span>l2<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//长数组剩余部分是否为偶数个</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token operator">=</span><span class="token punctuation">{</span>nums1<span class="token punctuation">[</span>l1<span class="token punctuation">]</span><span class="token punctuation">,</span>nums2<span class="token punctuation">[</span>m2<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r1<span class="token operator">!=</span>l1<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//短数组长度为2</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>m2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//长数组长度为偶数</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;=</span>m2<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>m2<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>flag<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token comment">//中位数左、右一个元素均不越界</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>m2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>m2<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">mid</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
5:[["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"原题链接：<a href=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/description/\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">寻找两个正序数组的中位数</a>"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"题目要求<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span></span></span></span>级别的算法，下面给出<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">min</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>的解法，和官方题解的思路不太相同。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"我的思路基于两个观察："}}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"如果两个有序序列的中位数分别为<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>和<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，那么合并后的序列的中位数一定在<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>和<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>（闭区间）之间。"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"对于合并后的序列，同时删掉最小和最大的<span class=\"x-inline-strong\">相同数量</span>的元素，中位数不变。"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"$d"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"基于上面两个观察，对短数组进行二分区间，同时也在长数组上维护一个区间，每次比较两个区间的中位数大小。<span class=\"x-inline-strong\">假如短数组的中位数更大</span>，那么短数组取区间的左半部分，相当于<span class=\"x-inline-strong\">删掉了短数组右区间的<code class=\"x-inline-highlight\">k</code>个元素</span>；此时要相应地<span class=\"x-inline-strong\">删掉长数组左区间的<code class=\"x-inline-highlight\">k</code>个元素</span>，以保证合并后的序列的中位数不变。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"此解法的边界条件需要格外注意："}}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"如果一方数组为空，则直接返回另一方的中位数。"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"如果区间包含了偶数个元素，则中间两个元素都要保留，以保证正确性。对于部分情况相当于区间要额外包含一个元素进来。（高亮行）"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"算法终止时，短数组区间长度可能是<code class=\"x-inline-highlight\">1</code>或<code class=\"x-inline-highlight\">2</code>个元素，最终的结果就是把这两个元素插入到长数组区间中，再取中位数。为了保证效率，不去做插入，而是讨论长数组区间中位数附近的元素。"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注意上述第三点，假设长数组区间中位数情况为：<code class=\"x-inline-highlight\">[... a m b ...]</code>或<code class=\"x-inline-highlight\">[... a m1 m2 b ...]</code>，那么如果<code class=\"x-inline-highlight\">a</code>和<code class=\"x-inline-highlight\">b</code>存在（没越界）也要纳入考虑。这是因为如果短数组剩余的元素均小于<code class=\"x-inline-highlight\">a</code>，则有可能中位数需要通过<code class=\"x-inline-highlight\">a</code>和<code class=\"x-inline-highlight\">m</code>（或<code class=\"x-inline-highlight\">m1</code>）计算得到。反之亦然。体现在代码中，短数组可能向<code class=\"x-inline-highlight\">ans</code>贡献<code class=\"x-inline-highlight\">1</code>或<code class=\"x-inline-highlight\">2</code>个元素，长数组可能向<code class=\"x-inline-highlight\">ans</code>贡献<code class=\"x-inline-highlight\">1</code>~<code class=\"x-inline-highlight\">4</code>个元素。最后对至多含有<code class=\"x-inline-highlight\">6</code>个元素的<code class=\"x-inline-highlight\">ans</code>排序取中位数即可。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$f"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 528px, var(--bg-transparent-golden) 528px 552px, transparent 552px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"LeetCode 4.寻找两个正序数组的中位数 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24b/leetcode-4/"}]]
1:null
