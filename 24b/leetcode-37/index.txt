2:I[10579,["2202","static/chunks/2202-c94dd0688c9a9cf1.js","7197","static/chunks/7197-fbfe003e0dc31b13.js","1267","static/chunks/app/(posts)/24b/leetcode-37/page-38266095b28d079c.js"],""]
3:I[62029,["2202","static/chunks/2202-c94dd0688c9a9cf1.js","7197","static/chunks/7197-fbfe003e0dc31b13.js","1267","static/chunks/app/(posts)/24b/leetcode-37/page-38266095b28d079c.js"],""]
6:I[5613,[],""]
7:I[31778,[],""]
8:I[30389,["2202","static/chunks/2202-c94dd0688c9a9cf1.js","5250","static/chunks/5250-9192d080d30d8ff7.js","7197","static/chunks/7197-fbfe003e0dc31b13.js","1993","static/chunks/app/(posts)/layout-64a2d12ca4e5a8ea.js"],""]
9:I[25694,["5250","static/chunks/5250-9192d080d30d8ff7.js","3185","static/chunks/app/layout-3bcdb418b19b279c.js"],"GlobalProvider"]
a:I[30397,["5250","static/chunks/5250-9192d080d30d8ff7.js","3185","static/chunks/app/layout-3bcdb418b19b279c.js"],""]
4:T5f6,class Solution {
public:
    int visr[9],visc[9],viss[9];
    int rc2s(int r,int c){return r/3*3+c/3;}//行列号转宫号
    int nxtr(int r,int c){return c!=8?r:r+1;}
    int nxtc(int r,int c){return c!=8?c+1:0;}
    void vis(int r,int c,int x)
    {
        visr[r]|=(1<<x);
        visc[c]|=(1<<x);
        viss[rc2s(r,c)]|=(1<<x);
        return;
    }
    void erase(int r,int c,int x)
    {
        visr[r]&=511^(1<<x);
        visc[c]&=511^(1<<x);
        viss[rc2s(r,c)]&=511^(1<<x);
        return;
    }
    bool halt=false;
    void dfs(vector<vector<char>>& board,int r,int c)
    {
        if(r>8) halt=true;
        if(halt) return;
        if(board[r][c]!='.')
        {
            dfs(board,nxtr(r,c),nxtc(r,c));
            return;
        }
        int valid=511^(visr[r]|visc[c]|viss[rc2s(r,c)]);
        for(int x=0;valid;x++,valid>>=1)
        {
            if(valid&1)
            {
                board[r][c]=x+'0'+1;
                vis(r,c,x);
                dfs(board,nxtr(r,c),nxtc(r,c));
                if(halt) return;//如果回溯时算法已经停止，则退出程序
                board[r][c]='.';
                erase(r,c,x);
            }
        }
    }
    void solveSudoku(vector<vector<char>>& board) {
        for(int r=0;r<9;r++)
        {
            for(int c=0;c<9;c++)
            {
                if(board[r][c]=='.') continue;
                int x=board[r][c]-'0'-1;
                vis(r,c,x);
            }
        }
        dfs(board,0,0);
        return;
    }
};
5:T3e50,<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> visr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>visc<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>viss<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">rc2s</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> r<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>c<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//行列号转宫号</span>
    <span class="token keyword">int</span> <span class="token function">nxtr</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token operator">!=</span><span class="token number">8</span><span class="token operator">?</span>r<span class="token operator">:</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">nxtc</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token operator">!=</span><span class="token number">8</span><span class="token operator">?</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        visr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visc<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        viss<span class="token punctuation">[</span><span class="token function">rc2s</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        visr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&amp;=</span><span class="token number">511</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visc<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">&amp;=</span><span class="token number">511</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        viss<span class="token punctuation">[</span><span class="token function">rc2s</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&amp;=</span><span class="token number">511</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> halt<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">></span><span class="token number">8</span><span class="token punctuation">)</span> halt<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>halt<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'.'</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span><span class="token function">nxtr</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">nxtc</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> valid<span class="token operator">=</span><span class="token number">511</span><span class="token operator">^</span><span class="token punctuation">(</span>visr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">|</span>visc<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">|</span>viss<span class="token punctuation">[</span><span class="token function">rc2s</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>valid<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">,</span>valid<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>valid<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">+</span><span class="token char">'0'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token function">vis</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span><span class="token function">nxtr</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">nxtc</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>halt<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果回溯时算法已经停止，则退出程序</span>
                board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>
                <span class="token function">erase</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> x<span class="token operator">=</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token function">vis</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
0:["mOSxNIhZz6aihDpxyXnIa",[[["",{"children":["(posts)",{"children":["24b",{"children":["leetcode-37",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(posts)",{"children":["24b",{"children":["leetcode-37",{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","h1",null,{"className":"x-title","children":"LeetCode 37.解数独"}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"原题链接：<a href=\"https://leetcode.cn/problems/sudoku-solver/description/\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">解数独</a>"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"练习一下位运算和DFS。注意这个题目找到唯一解之后，就要通过<code class=\"x-inline-highlight\">halt</code>判断终止，在回溯时直接返回，否则会把填好的数值改回成<code class=\"x-inline-highlight\">.</code>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"$4"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}]]}]],null]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","24b","children","leetcode-37","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/55722f4e6a890f7d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","24b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"y-center-wrapper","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$L8",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$L9",null,{"children":[["$","$La",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0f7cce8b0dae9908.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/421d0808425e209e.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/dac94f68c1ae2954.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"LeetCode 37.解数独 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24b/leetcode-37/"}]]
1:null
