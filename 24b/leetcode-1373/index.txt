2:I[55329,["954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","358","static/chunks/bc9e92e6-f77e57ee1a28b8d8.js","250","static/chunks/250-0ef8476c0fa8ee24.js","238","static/chunks/238-7a142b7f4afb0ef1.js","877","static/chunks/app/%5B...slug%5D/page-5c66bddbd33ba5c7.js"],""]
3:"$Sreact.suspense"
5:I[30389,["954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","358","static/chunks/bc9e92e6-f77e57ee1a28b8d8.js","250","static/chunks/250-0ef8476c0fa8ee24.js","238","static/chunks/238-7a142b7f4afb0ef1.js","877","static/chunks/app/%5B...slug%5D/page-5c66bddbd33ba5c7.js"],""]
6:I[5613,[],""]
8:I[31778,[],""]
9:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-440e3a3c1ed38f78.js"],"GlobalProvider"]
a:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-440e3a3c1ed38f78.js"],""]
7:["slug","24b/leetcode-1373","c"]
0:["f6OK2Q40_HFwkD7yUMLOu",[[["",{"children":[["slug","24b/leetcode-1373","c"],{"children":["__PAGE__?{\"slug\":[\"24b\",\"leetcode-1373\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24b/leetcode-1373","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"y-center-wrapper","children":[["$","h1",null,{"className":"x-title","children":"LeetCode 1373.二叉搜索子树的最大键值和"}],["$","$3",null,{"fallback":["$","p",null,{"children":"Loading..."}],"children":["$","$3",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L4"}]}]]}],["$","$L5",null,{}]]}]],null]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/1661b6715a34de92.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$L9",null,{"children":[["$","$La",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0f7cce8b0dae9908.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/dac94f68c1ae2954.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[62029,["954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","358","static/chunks/bc9e92e6-f77e57ee1a28b8d8.js","250","static/chunks/250-0ef8476c0fa8ee24.js","238","static/chunks/238-7a142b7f4afb0ef1.js","877","static/chunks/app/%5B...slug%5D/page-5c66bddbd33ba5c7.js"],""]
d:T5df,/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans;
    struct INFO{
        int sum;
        int mx,mi;
        bool valid;
    };
    INFO dfs(TreeNode *p)
    {
        TreeNode *l=p->left;
        TreeNode *r=p->right;
        int sum,mx,mi;
        bool valid;
        if(l==nullptr&&r==nullptr)
        {
            sum=mx=mi=p->val;
            valid=true;
        }
        else if(l==nullptr)
        {
            INFO info=dfs(r);
            sum=p->val+info.sum;
            mx=info.mx;
            mi=p->val;
            valid=p->val<info.mi&&info.valid;
        }
        else if(r==nullptr)
        {
            INFO info=dfs(l);
            sum=p->val+info.sum;
            mx=p->val;
            mi=info.mi;
            valid=p->val>info.mx&&info.valid;
        }
        else
        {
            INFO il=dfs(l),ir=dfs(r);
            sum=p->val+il.sum+ir.sum;
            mx=ir.mx;
            mi=il.mi;
            valid=il.mx<p->val&&p->val<ir.mi&&il.valid&&ir.valid;
        }
        if(valid) ans=max(ans,sum);
        return (INFO){sum,mx,mi,valid};
    }
    int maxSumBST(TreeNode* root) {
    dfs(root);
    return ans;
    }
};
e:T222c,<span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">INFO</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
        <span class="token keyword">int</span> mx<span class="token punctuation">,</span>mi<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    INFO <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        TreeNode <span class="token operator">*</span>l<span class="token operator">=</span>p<span class="token operator">-></span>left<span class="token punctuation">;</span>
        TreeNode <span class="token operator">*</span>r<span class="token operator">=</span>p<span class="token operator">-></span>right<span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>mi<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum<span class="token operator">=</span>mx<span class="token operator">=</span>mi<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token punctuation">;</span>
            valid<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            INFO info<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>info<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
            mx<span class="token operator">=</span>info<span class="token punctuation">.</span>mx<span class="token punctuation">;</span>
            mi<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token punctuation">;</span>
            valid<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">&lt;</span>info<span class="token punctuation">.</span>mi<span class="token operator">&amp;&amp;</span>info<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            INFO info<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>info<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
            mx<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token punctuation">;</span>
            mi<span class="token operator">=</span>info<span class="token punctuation">.</span>mi<span class="token punctuation">;</span>
            valid<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">></span>info<span class="token punctuation">.</span>mx<span class="token operator">&amp;&amp;</span>info<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            INFO il<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>ir<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>il<span class="token punctuation">.</span>sum<span class="token operator">+</span>ir<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
            mx<span class="token operator">=</span>ir<span class="token punctuation">.</span>mx<span class="token punctuation">;</span>
            mi<span class="token operator">=</span>il<span class="token punctuation">.</span>mi<span class="token punctuation">;</span>
            valid<span class="token operator">=</span>il<span class="token punctuation">.</span>mx<span class="token operator">&lt;</span>p<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>val<span class="token operator">&lt;</span>ir<span class="token punctuation">.</span>mi<span class="token operator">&amp;&amp;</span>il<span class="token punctuation">.</span>valid<span class="token operator">&amp;&amp;</span>ir<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>INFO<span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>mi<span class="token punctuation">,</span>valid<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">maxSumBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
f:T179d,<span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">2147483647</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">INFO</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
        <span class="token keyword">int</span> mx<span class="token punctuation">,</span>mi<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    INFO <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>INFO<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        INFO il<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>ir<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">,</span>ir<span class="token punctuation">.</span>mx<span class="token punctuation">)</span><span class="token punctuation">,</span>mi<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">,</span>il<span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>il<span class="token punctuation">.</span>sum<span class="token operator">+</span>ir<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token operator">=</span>
            il<span class="token punctuation">.</span>mx<span class="token operator">&lt;</span>p<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>
            p<span class="token operator">-></span>val<span class="token operator">&lt;</span>ir<span class="token punctuation">.</span>mi<span class="token operator">&amp;&amp;</span>
            il<span class="token punctuation">.</span>valid<span class="token operator">&amp;&amp;</span>
            ir<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>INFO<span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>mi<span class="token punctuation">,</span>valid<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">maxSumBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
4:[["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"原题链接：<a href=\"https://leetcode.cn/problems/maximum-sum-bst-in-binary-tree/description/\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">二叉搜索子树的最大键值和</a>"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"一次DFS即可，维护四个信息：子树和、子树节点的最大值、子树节点的最大值、子树是否是合法的二叉搜索树。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Lc",null,{"className":"x-codeblock-header-copy","text":"$d"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"一个更简洁的做法是利用类似哨兵节点的思想，不再需要分类讨论叶子节点。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Lc",null,{"className":"x-codeblock-header-copy","text":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n#define INF 2147483647\nclass Solution {\npublic:\n    int ans;\n    struct INFO{\n        int sum;\n        int mx,mi;\n        bool valid;\n    };\n    INFO dfs(TreeNode *p)\n    {\n        if(p==nullptr) return (INFO){0,-INF,INF,true};\n        INFO il=dfs(p->left),ir=dfs(p->right);\n        int mx=max(p->val,ir.mx),mi=min(p->val,il.mi);\n        int sum=p->val+il.sum+ir.sum;\n        bool valid=\n            il.mx<p->val&&\n            p->val<ir.mi&&\n            il.valid&&\n            ir.valid;\n        if(valid) ans=max(ans,sum);\n        return (INFO){sum,mx,mi,valid};\n    }\n    int maxSumBST(TreeNode* root) {\n       dfs(root);\n       return ans;\n    }\n};\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"LeetCode 1373.二叉搜索子树的最大键值和 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24b/leetcode-1373/"}]]
1:null
