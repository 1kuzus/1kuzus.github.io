4:I[5613,[],""]
5:I[1778,[],""]
6:I[9806,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-a3fbe97d289cedfd.js"],""]
7:I[3393,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-a3fbe97d289cedfd.js"],""]
8:I[5694,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-6e2f614e4e9505b8.js"],"GlobalProvider"]
9:I[397,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-6e2f614e4e9505b8.js"],""]
2:T222c,<span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">INFO</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
        <span class="token keyword">int</span> mx<span class="token punctuation">,</span>mi<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    INFO <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        TreeNode <span class="token operator">*</span>l<span class="token operator">=</span>p<span class="token operator">-></span>left<span class="token punctuation">;</span>
        TreeNode <span class="token operator">*</span>r<span class="token operator">=</span>p<span class="token operator">-></span>right<span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>mi<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum<span class="token operator">=</span>mx<span class="token operator">=</span>mi<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token punctuation">;</span>
            valid<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            INFO info<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>info<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
            mx<span class="token operator">=</span>info<span class="token punctuation">.</span>mx<span class="token punctuation">;</span>
            mi<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token punctuation">;</span>
            valid<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">&lt;</span>info<span class="token punctuation">.</span>mi<span class="token operator">&amp;&amp;</span>info<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            INFO info<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>info<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
            mx<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token punctuation">;</span>
            mi<span class="token operator">=</span>info<span class="token punctuation">.</span>mi<span class="token punctuation">;</span>
            valid<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">></span>info<span class="token punctuation">.</span>mx<span class="token operator">&amp;&amp;</span>info<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            INFO il<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>ir<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>il<span class="token punctuation">.</span>sum<span class="token operator">+</span>ir<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
            mx<span class="token operator">=</span>ir<span class="token punctuation">.</span>mx<span class="token punctuation">;</span>
            mi<span class="token operator">=</span>il<span class="token punctuation">.</span>mi<span class="token punctuation">;</span>
            valid<span class="token operator">=</span>il<span class="token punctuation">.</span>mx<span class="token operator">&lt;</span>p<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>val<span class="token operator">&lt;</span>ir<span class="token punctuation">.</span>mi<span class="token operator">&amp;&amp;</span>il<span class="token punctuation">.</span>valid<span class="token operator">&amp;&amp;</span>ir<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>INFO<span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>mi<span class="token punctuation">,</span>valid<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">maxSumBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
3:T179d,<span class="token comment">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">2147483647</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">INFO</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
        <span class="token keyword">int</span> mx<span class="token punctuation">,</span>mi<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    INFO <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>INFO<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        INFO il<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>ir<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">,</span>ir<span class="token punctuation">.</span>mx<span class="token punctuation">)</span><span class="token punctuation">,</span>mi<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">,</span>il<span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span>p<span class="token operator">-></span>val<span class="token operator">+</span>il<span class="token punctuation">.</span>sum<span class="token operator">+</span>ir<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> valid<span class="token operator">=</span>
            il<span class="token punctuation">.</span>mx<span class="token operator">&lt;</span>p<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>
            p<span class="token operator">-></span>val<span class="token operator">&lt;</span>ir<span class="token punctuation">.</span>mi<span class="token operator">&amp;&amp;</span>
            il<span class="token punctuation">.</span>valid<span class="token operator">&amp;&amp;</span>
            ir<span class="token punctuation">.</span>valid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>INFO<span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>mi<span class="token punctuation">,</span>valid<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">maxSumBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
0:["dZlwKKWSJoDTgEHLYMaag",[[["",{"children":["(blogs)",{"children":["24b",{"children":["leetcode-1373",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(blogs)",{"children":["24b",{"children":["leetcode-1373",{"children":["__PAGE__",{},["$L1",[["$","h1",null,{"className":"x-title","children":"LeetCode 1373.二叉搜索子树的最大键值和"}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"原题链接：<a href=\"https://leetcode.cn/problems/maximum-sum-bst-in-binary-tree/description/\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">二叉搜索子树的最大键值和</a>"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"一次DFS即可，维护四个信息：子树和、子树节点的最大值、子树节点的最大值、子树是否是合法的二叉搜索树。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"一个更简洁的做法是利用类似哨兵节点的思想，不再需要分类讨论叶子节点。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$3"}}]}]}]],null]]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24b","children","leetcode-1373","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a5855e1942bdfa34.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"id":"blog-layout","children":[["$","div",null,{"id":"main","children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$L6",null,{}],["$","$L7",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}]]}],["$","body",null,{"children":["$","$L8",null,{"children":[["$","$L9",null,{}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/eccd2e7a1149e571.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/391c9d793ecdcfc9.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/06b76f26dd11a5cd.css","precedence":"next","crossOrigin":""}]],"$La"]]]]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"LeetCode 1373.二叉搜索子树的最大键值和 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24b/leetcode-1373/"}]]
1:null
