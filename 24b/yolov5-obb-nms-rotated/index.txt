3:I[5613,[],""]
4:I[1778,[],""]
5:I[9806,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-a6b1fa6340beea16.js"],""]
6:I[3393,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-a6b1fa6340beea16.js"],""]
7:I[5694,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-909fcb115c40cba0.js"],"GlobalProvider"]
8:I[397,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-909fcb115c40cba0.js"],""]
2:T11e09,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ATen/ATen.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ATen/cuda/CUDAContext.h></span></span>

<span class="token comment">// #include &lt;THC/THC.h></span>
<span class="token comment">// #include &lt;THC/THCDeviceUtils.cuh></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ATen/cuda/CUDAUtils.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ATen/ceil_div.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;c10/cuda/CUDACachingAllocator.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CUDA_CHECK</span><span class="token expression"><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
<span class="token comment">/* Code block avoids redefinition of cudaError_t error */</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\</span>
    <span class="token expression">cudaError_t error <span class="token operator">=</span> condition<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\</span>
    <span class="token expression">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DIVUP</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">int</span> <span class="token keyword">const</span> threadsPerBlock <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">// const double eps=1E-8;</span>

__device__ <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sig</span><span class="token punctuation">(</span><span class="token keyword">float</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1E-8</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>d<span class="token operator">></span>eps<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>d<span class="token operator">&lt;</span><span class="token operator">-</span>eps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__device__ <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">point_eq</span><span class="token punctuation">(</span><span class="token keyword">const</span> float2 a<span class="token punctuation">,</span> <span class="token keyword">const</span> float2 b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">sig</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sig</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__device__ <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">point_swap</span><span class="token punctuation">(</span>float2 <span class="token operator">*</span>a<span class="token punctuation">,</span> float2 <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    float2 temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__device__ <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">point_reverse</span><span class="token punctuation">(</span>float2 <span class="token operator">*</span>first<span class="token punctuation">,</span> float2<span class="token operator">*</span> last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>first<span class="token operator">!=</span>last<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>first<span class="token operator">!=</span><span class="token operator">--</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">point_swap</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>first<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

__device__ <span class="token keyword">inline</span> <span class="token keyword">float</span> <span class="token function">cross</span><span class="token punctuation">(</span>float2 o<span class="token punctuation">,</span>float2 a<span class="token punctuation">,</span>float2 b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//叉积</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>y<span class="token operator">-</span>o<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token operator">-</span>o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>o<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
__device__ <span class="token keyword">inline</span> <span class="token keyword">float</span> <span class="token function">area</span><span class="token punctuation">(</span>float2<span class="token operator">*</span> ps<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    ps<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>ps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token operator">+=</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>ps<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">*</span>ps<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
__device__ <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">lineCross</span><span class="token punctuation">(</span>float2 a<span class="token punctuation">,</span>float2 b<span class="token punctuation">,</span>float2 c<span class="token punctuation">,</span>float2 d<span class="token punctuation">,</span>float2<span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">float</span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>
    s1<span class="token operator">=</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s2<span class="token operator">=</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sig</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">sig</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sig</span><span class="token punctuation">(</span>s2<span class="token operator">-</span>s1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>x<span class="token operator">*</span>s2<span class="token operator">-</span>d<span class="token punctuation">.</span>x<span class="token operator">*</span>s1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>s2<span class="token operator">-</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>y<span class="token operator">*</span>s2<span class="token operator">-</span>d<span class="token punctuation">.</span>y<span class="token operator">*</span>s1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>s2<span class="token operator">-</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__device__ <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">polygon_cut</span><span class="token punctuation">(</span>float2<span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span>float2 a<span class="token punctuation">,</span>float2 b<span class="token punctuation">,</span> float2<span class="token operator">*</span> pp<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sig</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> pp<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sig</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">sig</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">lineCross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pp<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">point_eq</span><span class="token punctuation">(</span>pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// while(n>1&amp;&amp;p[n-1]==p[0])n--;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">point_eq</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//---------------华丽的分隔线-----------------//</span>
<span class="token comment">//返回三角形oab和三角形ocd的有向交面积,o是原点//</span>
__device__ <span class="token keyword">inline</span> <span class="token keyword">float</span> <span class="token function">intersectArea</span><span class="token punctuation">(</span>float2 a<span class="token punctuation">,</span>float2 b<span class="token punctuation">,</span>float2 c<span class="token punctuation">,</span>float2 d<span class="token punctuation">)</span><span class="token punctuation">{</span>
    float2 o <span class="token operator">=</span> <span class="token function">make_float2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s1<span class="token operator">=</span><span class="token function">sig</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s2<span class="token operator">=</span><span class="token function">sig</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>s2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment">//退化，面积为0</span>
    <span class="token comment">// if(s1==-1) swap(a,b);</span>
    <span class="token comment">// if(s2==-1) swap(c,d);</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">point_swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">point_swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    float2 p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>o<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
    float2 pp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">polygon_cut</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>c<span class="token punctuation">,</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">polygon_cut</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">polygon_cut</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>d<span class="token punctuation">,</span>o<span class="token punctuation">,</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> res<span class="token operator">=</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">area</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token operator">*</span>s2<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token operator">-</span>res<span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//求两多边形的交面积</span>
__device__ <span class="token keyword">inline</span> <span class="token keyword">float</span> <span class="token function">intersectArea</span><span class="token punctuation">(</span>float2<span class="token operator">*</span>ps1<span class="token punctuation">,</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span>float2<span class="token operator">*</span>ps2<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">area</span><span class="token punctuation">(</span>ps1<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">point_reverse</span><span class="token punctuation">(</span>ps1<span class="token punctuation">,</span>ps1<span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">area</span><span class="token punctuation">(</span>ps2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">point_reverse</span><span class="token punctuation">(</span>ps2<span class="token punctuation">,</span>ps2<span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ps1<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token operator">=</span>ps1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ps2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token operator">=</span>ps2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res<span class="token operator">+=</span><span class="token function">intersectArea</span><span class="token punctuation">(</span>ps1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ps1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ps2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ps2<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment">//assumeresispositive!</span>
<span class="token punctuation">}</span>

<span class="token comment">// TODO: optimal if by first calculate the iou between two hbbs</span>
__device__ <span class="token keyword">inline</span> <span class="token keyword">float</span> <span class="token function">devPolyIoU</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    float2 ps1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ps2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ps1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        ps1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        ps2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        ps2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">float</span> inter_area <span class="token operator">=</span> <span class="token function">intersectArea</span><span class="token punctuation">(</span>ps1<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> ps2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> union_area <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">area</span><span class="token punctuation">(</span>ps1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">area</span><span class="token punctuation">(</span>ps2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> inter_area<span class="token punctuation">;</span>
    <span class="token keyword">float</span> iou <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>union_area <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        iou <span class="token operator">=</span> <span class="token punctuation">(</span>inter_area <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>union_area <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        iou <span class="token operator">=</span> inter_area <span class="token operator">/</span> union_area<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> iou<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__global__ <span class="token keyword">void</span> <span class="token function">poly_nms_kernel</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> n_polys<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> nms_overlap_thresh<span class="token punctuation">,</span>
                            <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>dev_polys<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>dev_mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> row_start <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> col_start <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> row_size <span class="token operator">=</span>
            <span class="token function">min</span><span class="token punctuation">(</span>n_polys <span class="token operator">-</span> row_start <span class="token operator">*</span> threadsPerBlock<span class="token punctuation">,</span> threadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> cols_size <span class="token operator">=</span>
            <span class="token function">min</span><span class="token punctuation">(</span>n_polys <span class="token operator">-</span> col_start <span class="token operator">*</span> threadsPerBlock<span class="token punctuation">,</span> threadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    __shared__ <span class="token keyword">float</span> block_polys<span class="token punctuation">[</span>threadsPerBlock <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> cols_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        block_polys<span class="token punctuation">[</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            dev_polys<span class="token punctuation">[</span><span class="token punctuation">(</span>threadsPerBlock <span class="token operator">*</span> col_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> row_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">int</span> cur_box_idx <span class="token operator">=</span> threadsPerBlock <span class="token operator">*</span> row_start <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>cur_box <span class="token operator">=</span> dev_polys <span class="token operator">+</span> cur_box_idx <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>row_start <span class="token operator">==</span> col_start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            start <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cols_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">devPolyIoU</span><span class="token punctuation">(</span>cur_box<span class="token punctuation">,</span> block_polys <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">></span> nms_overlap_thresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                t <span class="token operator">|=</span> <span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token comment">//      const int col_blocks = THCCeilDiv(n_polys, threadsPerBlock);</span>
        <span class="token keyword">const</span> <span class="token keyword">int</span> col_blocks <span class="token operator">=</span> at<span class="token double-colon punctuation">::</span><span class="token function">ceil_div</span><span class="token punctuation">(</span>n_polys<span class="token punctuation">,</span> threadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dev_mask<span class="token punctuation">[</span>cur_box_idx <span class="token operator">*</span> col_blocks <span class="token operator">+</span> col_start<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// boxes is a N x 9 tensor</span>
at<span class="token double-colon punctuation">::</span>Tensor <span class="token function">poly_nms_cuda</span><span class="token punctuation">(</span><span class="token keyword">const</span> at<span class="token double-colon punctuation">::</span>Tensor boxes<span class="token punctuation">,</span> <span class="token keyword">float</span> nms_overlap_thresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    at<span class="token double-colon punctuation">::</span>DeviceGuard <span class="token function">guard</span><span class="token punctuation">(</span>boxes<span class="token punctuation">.</span><span class="token function">device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> scalar_t <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">;</span>
    <span class="token function">AT_ASSERTM</span><span class="token punctuation">(</span>boxes<span class="token punctuation">.</span><span class="token function">device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_cuda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"boxes must be a CUDA tensor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> scores <span class="token operator">=</span> boxes<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> order_t <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">/*descending=*/</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> boxes_sorted <span class="token operator">=</span> boxes<span class="token punctuation">.</span><span class="token function">index_select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> order_t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> boxes_num <span class="token operator">=</span> boxes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  const int col_blocks = THCCeilDiv(boxes_num, threadsPerBlock);</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> col_blocks <span class="token operator">=</span> at<span class="token double-colon punctuation">::</span><span class="token function">ceil_div</span><span class="token punctuation">(</span>boxes_num<span class="token punctuation">,</span> threadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    scalar_t<span class="token operator">*</span> boxes_dev <span class="token operator">=</span> boxes_sorted<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">data_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>scalar_t<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  THCState *state = at::globalContext().lazyInitCUDA();</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> mask_dev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">//  mask_dev = (unsigned long long*) THCudaMalloc(state, boxes_num * col_blocks * sizeof(unsigned long long));</span>
    mask_dev <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> c10<span class="token double-colon punctuation">::</span>cuda<span class="token double-colon punctuation">::</span><span class="token class-name">CUDACachingAllocator</span><span class="token double-colon punctuation">::</span><span class="token function">raw_alloc</span><span class="token punctuation">(</span>boxes_num <span class="token operator">*</span> col_blocks <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  dim3 blocks(THCCeilDiv(boxes_num, threadsPerBlock),</span>
<span class="token comment">//                THCCeilDiv(boxes_num, threadsPerBlock));</span>
    dim3 <span class="token function">blocks</span><span class="token punctuation">(</span>at<span class="token double-colon punctuation">::</span><span class="token function">ceil_div</span><span class="token punctuation">(</span>boxes_num<span class="token punctuation">,</span> threadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> at<span class="token double-colon punctuation">::</span><span class="token function">ceil_div</span><span class="token punctuation">(</span>boxes_num<span class="token punctuation">,</span> threadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    dim3 <span class="token function">threads</span><span class="token punctuation">(</span>threadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    poly_nms_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>blocks<span class="token punctuation">,</span> threads<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> at<span class="token double-colon punctuation">::</span>cuda<span class="token double-colon punctuation">::</span><span class="token function">getCurrentCUDAStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>boxes_num<span class="token punctuation">,</span>
                                        nms_overlap_thresh<span class="token punctuation">,</span>
                                        boxes_dev<span class="token punctuation">,</span>
                                        mask_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">mask_host</span><span class="token punctuation">(</span>boxes_num <span class="token operator">*</span> col_blocks<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  THCudaCheck(cudaMemcpyAsync(</span>
    <span class="token function">AT_CUDA_CHECK</span><span class="token punctuation">(</span><span class="token function">cudaMemcpyAsync</span><span class="token punctuation">(</span>
                <span class="token operator">&amp;</span>mask_host<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                            mask_dev<span class="token punctuation">,</span>
                            <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">*</span> boxes_num <span class="token operator">*</span> col_blocks<span class="token punctuation">,</span>
                            cudaMemcpyDeviceToHost<span class="token punctuation">,</span>
                at<span class="token double-colon punctuation">::</span>cuda<span class="token double-colon punctuation">::</span><span class="token function">getCurrentCUDAStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">remv</span><span class="token punctuation">(</span>col_blocks<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>remv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">*</span> col_blocks<span class="token punctuation">)</span><span class="token punctuation">;</span>

    at<span class="token double-colon punctuation">::</span>Tensor keep <span class="token operator">=</span> at<span class="token double-colon punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">{</span>boxes_num<span class="token punctuation">}</span><span class="token punctuation">,</span> boxes<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dtype</span><span class="token punctuation">(</span>at<span class="token double-colon punctuation">::</span>kLong<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">device</span><span class="token punctuation">(</span>at<span class="token double-colon punctuation">::</span>kCPU<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int64_t</span><span class="token operator">*</span> keep_out <span class="token operator">=</span> keep<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">data_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> num_to_keep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> boxes_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> nblock <span class="token operator">=</span> i <span class="token operator">/</span> threadsPerBlock<span class="token punctuation">;</span>
        <span class="token keyword">int</span> inblock <span class="token operator">=</span> i <span class="token operator">%</span> threadsPerBlock<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>remv<span class="token punctuation">[</span>nblock<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> inblock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            keep_out<span class="token punctuation">[</span>num_to_keep<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>mask_host<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">*</span> col_blocks<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> nblock<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col_blocks<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                remv<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token comment">//  THCudaFree(state, mask_dev);</span>
    c10<span class="token double-colon punctuation">::</span>cuda<span class="token double-colon punctuation">::</span><span class="token class-name">CUDACachingAllocator</span><span class="token double-colon punctuation">::</span><span class="token function">raw_delete</span><span class="token punctuation">(</span>mask_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> order_t<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        keep<span class="token punctuation">.</span><span class="token function">narrow</span><span class="token punctuation">(</span><span class="token comment">/*dim=*/</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">/*start=*/</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">/*length=*/</span>num_to_keep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>
        order_t<span class="token punctuation">.</span><span class="token function">device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keep<span class="token punctuation">.</span><span class="token function">scalar_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
0:["iLd67OoiQ4H2u-H-CAXSy",[[["",{"children":["(blogs)",{"children":["24b",{"children":["yolov5-obb-nms-rotated",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(blogs)",{"children":["24b",{"children":["yolov5-obb-nms-rotated",{"children":["__PAGE__",{},["$L1",[["$","h1",null,{"className":"x-title","children":"解决：nms_rotated报错\"THC/THC.h\": No such file or directory"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"使用<code class=\"x-inline-highlight\"><a href=\"https://github.com/hukaixuan19970627/yolov5_obb\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">yolov5_obb</a></code>时，我使用已有环境运行，此环境中的<code class=\"x-inline-highlight\">pytorch</code>版本是<code class=\"x-inline-highlight\">1.12.1</code>，而在<code class=\"x-inline-highlight\">1.11</code>版本已经弃用了<code class=\"x-inline-highlight\">\"THC/THC.h\"</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"解决办法是回退版本或者修改编译失败的文件<code class=\"x-inline-highlight\">utils&#92;nms_rotated&#92;src&#92;poly_nms_cuda.cu</code>，替换已经弃用的库。<br/> 修改的内容已经高亮标注，下面的代码可以直接复制替换原文件："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 72px, var(--bg-transparent-golden) 72px 192px, transparent 192px, transparent 600px, var(--bg-transparent-golden) 600px 624px, transparent 624px, transparent 672px, var(--bg-transparent-golden) 672px 696px, transparent 696px, transparent 4632px, var(--bg-transparent-golden) 4632px 4680px, transparent 4680px, transparent 5088px, var(--bg-transparent-golden) 5088px 5136px, transparent 5136px, transparent 5208px, var(--bg-transparent-golden) 5208px 5232px, transparent 5232px, transparent 5304px, var(--bg-transparent-golden) 5304px 5352px, transparent 5352px, transparent 5376px, var(--bg-transparent-golden) 5376px 5448px, transparent 5448px, transparent 5640px, var(--bg-transparent-golden) 5640px 5688px, transparent 5688px, transparent 6336px, var(--bg-transparent-golden) 6336px 6384px, transparent 6384px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]}]}]],null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24b","children","yolov5-obb-nms-rotated","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/233b7667e3c12808.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"id":"blog-layout","children":[["$","div",null,{"id":"main","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$L5",null,{}],["$","$L6",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}]]}],["$","body",null,{"children":["$","$L7",null,{"children":[["$","$L8",null,{}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/eccd2e7a1149e571.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/391c9d793ecdcfc9.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a0c81e8012055d49.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"解决：nms_rotated报错\"THC/THC.h\": No such file or directory - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24b/yolov5-obb-nms-rotated/"}]]
1:null
