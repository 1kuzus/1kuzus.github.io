1:HL["/_next/static/css/8ac0b0e7f508d966.css","style",{"crossOrigin":""}]
0:["a2ccQY1j6x_FTv2AsGrpW",[[["",{"children":["(blogs)",{"children":["23c",{"children":["js-array",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8ac0b0e7f508d966.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:HL["/_next/static/css/c84b60895b980f14.css","style",{"crossOrigin":""}]
5:HL["/_next/static/css/f70c26425a044d6b.css","style",{"crossOrigin":""}]
6:I[9226,["185","static/chunks/app/layout-e12e822557cc964c.js"],"GlobalProvider"]
7:I[9330,["185","static/chunks/app/layout-e12e822557cc964c.js"],""]
8:I[6954,[],""]
9:I[7264,[],""]
a:I[5285,["176","static/chunks/176-6509553bec92a789.js","135","static/chunks/app/(blogs)/layout-75f88dfdcbd0ba18.js"],""]
c:I[4484,["954","static/chunks/d3ac728e-1e5d8b71e3d43fec.js","202","static/chunks/202-7b9f876bcb1bf7b4.js","528","static/chunks/app/(blogs)/23c/js-array/page-49646e1f28ef8425.js"],"Title"]
d:I[4484,["954","static/chunks/d3ac728e-1e5d8b71e3d43fec.js","202","static/chunks/202-7b9f876bcb1bf7b4.js","528","static/chunks/app/(blogs)/23c/js-array/page-49646e1f28ef8425.js"],"H1"]
e:I[9708,["954","static/chunks/d3ac728e-1e5d8b71e3d43fec.js","202","static/chunks/202-7b9f876bcb1bf7b4.js","528","static/chunks/app/(blogs)/23c/js-array/page-49646e1f28ef8425.js"],""]
f:I[4484,["954","static/chunks/d3ac728e-1e5d8b71e3d43fec.js","202","static/chunks/202-7b9f876bcb1bf7b4.js","528","static/chunks/app/(blogs)/23c/js-array/page-49646e1f28ef8425.js"],"H2"]
10:I[8275,["954","static/chunks/d3ac728e-1e5d8b71e3d43fec.js","202","static/chunks/202-7b9f876bcb1bf7b4.js","528","static/chunks/app/(blogs)/23c/js-array/page-49646e1f28ef8425.js"],"Uli"]
2:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L6",null,{"children":[["$","$L7",null,{}],["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":[null,["$","$La",null,{"children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","23c","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","23c","children","js-array","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lb",[["$","$Lc",null,{"children":"$undefined"}],["$","$Ld",null,{"children":"at()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">at()</code>方法接收一个整数值并返回该索引对应的元素，允许正数和负数。负整数从数组中的最后一个元素开始倒数。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [5, 12, 8, 130, 44];\n                console.log(arr[2]); //8\n                console.log(arr.at(2)); //8\n                console.log(arr.at(-1)); //44\n                "}],["$","$Ld",null,{"children":"concat()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">concat()</code>方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr1 = [1, 2, 3];\n                const arr2 = ['a', 'b', 'c'];\n                const arr3 = arr1.concat(99, arr2);\n\n                arr1[0] = 5; //不会影响arr3\n                console.log(arr3); //[1, 2, 3, 99, 'a', 'b', 'c']\n                "}],["$","$Ld",null,{"children":"every()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">every()</code>方法测试一个数组内的所有元素是否都能通过指定函数的测试，返回一个布尔值。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr1 = [1, 30, 39, 29, 10, 13];\n                const arr2 = [1, 30, 39, 88];\n                const isBelow50 = (num) => num < 50;\n\n                console.log(arr1.every(isBelow50)); //true\n                console.log(arr2.every(isBelow50)); //false\n                "}],["$","$Ld",null,{"children":"some()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">some()</code>方法测试数组中是否至少有一个元素能通过指定函数的测试，返回一个布尔值。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr1 = [1, 30, 39, 29, 10, 13];\n                const arr2 = [1, 30, 39, 88];\n                const isOver80 = (num) => num > 80;\n\n                console.log(arr1.some(isOver80)); //false\n                console.log(arr2.some(isOver80)); //true\n                "}],["$","$Ld",null,{"children":"fill()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">fill()</code>方法用一个固定值填充数组中从起始索引（默认为<code class=\"x-inline-highlight\">0</code>）到终止索引（默认为<code class=\"x-inline-highlight\">array.length</code>）内的全部元素，返回修改后的数组。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 2, 3, 4, 5];\n\n                // fill(value)\n                console.log(arr.fill(9)); //[9, 9, 9, 9, 9]\n\n                // fill(value, start)\n                console.log(arr.fill('a', 2)); //[ 9, 9, 'a', 'a', 'a']\n\n                arr[0] = 1;\n\n                // fill(value, start, end)\n                console.log(arr.fill('b', 1, 3)); //[1, 'b', 'b', 'a', 'a']\n                "}],["$","$Lf",null,{"children":"创建指定长度和内容的数组"}],["$","$Le",null,{"language":"js","code":"\n                function getArray(len, val) {\n                    return Array(len).fill(val);\n                }\n\n                console.log(getArray(3, 'some value')); //['some value', 'some value', 'some value']\n                "}],["$","$Ld",null,{"children":"filter()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">filter()</code>方法用一个固定值填充数组中从起始索引（默认为<code class=\"x-inline-highlight\">0</code>）到终止索引（默认为<code class=\"x-inline-highlight\">array.length</code>）内的全部元素，返回修改后的数组。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 5, 7, 13, 45, 66];\n                console.log(arr.filter((i) => i > 10)); //[13, 45, 66]\n                "}],["$","$Ld",null,{"children":"find系列"}],["$","$L10",null,{"children":"`find()`方法返回数组中满足提供的测试函数的第一个元素的值。否则返回`undefined`。"}],["$","$L10",null,{"children":"`findIndex()`方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回`-1`。"}],["$","$L10",null,{"children":"`findLast()`方法反向迭代数组，并返回满足提供的测试函数的第一个元素的值。如果没有找到对应元素，则返回`undefined`。"}],["$","$L10",null,{"children":"`findLastIndex()`方法反向迭代数组，并返回满足所提供的测试函数的第一个元素的索引。若没有找到对应元素，则返回`-1`。"}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 15, 7, 33, 5, 66, 47, 9, 5];\n                const cond = (x) => x > 30;\n                \n                console.log(arr.find(cond)); //33\n                console.log(arr.findIndex(cond)); //3\n                console.log(arr.findLast(cond)); //47\n                console.log(arr.findLastIndex(cond)); //6\n                "}],["$","$Ld",null,{"children":"flat()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">flat()</code>方法创建一个新的数组，并根据指定深度递归地将所有子数组元素拼接到新的数组中。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 2, ['a', 'b', [88, 99, ['xx', 'yy']]], 3];\n\n                console.log(arr.flat());         //[1, 2, 'a', 'b', [88, 99, ['xx', 'yy']], 3]\n                console.log(arr.flat(2));        //[1, 2, 'a', 'b', 88, 99, ['xx', 'yy'], 3]\n                console.log(arr.flat(Infinity)); //[1, 2, 'a', 'b', 88, 99, 'xx', 'yy', 3]\n                "}],["$","$Ld",null,{"children":"forEach()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">forEach()</code>方法对数组的每个元素执行一次给定的函数。"}}],["$","$Le",null,{"language":"js","code":"arr.forEach(callbackFn)"}],["$","p",null,{"className":"x-p no-margin-bottom","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">callbackFn</code>为数组中每个元素执行的函数，并会丢弃它的返回值。该函数被调用时将传入以下参数："}}],["$","$L10",null,{"children":"`value`：数组中正在处理的当前元素"}],["$","$L10",null,{"children":"`index`：数组中正在处理的当前元素的索引"}],["$","$L10",null,{"children":"`array`：调用了`forEach()`的数组本身"}],["$","$Le",null,{"language":"js","code":"\n                const arr = ['a', 'b', 'c'];\n\n                arr.forEach((value, index, array) => console.log(value, index, array));\n                // a 0 ['a', 'b', 'c']\n                // b 1 ['a', 'b', 'c']\n                // c 2 ['a', 'b', 'c']\n                "}],["$","$Ld",null,{"children":"includes()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">includes()</code>方法用来判断一个数组是否包含一个指定的值。"}}],["$","$Le",null,{"language":"js","code":"\n                arr.includes(searchElement)\n                arr.includes(searchElement, fromIndex) //开始搜索的索引\n                "}],["$","$Le",null,{"language":"js","code":"\n                console.log([1, 2, 3].includes(2)); //true\n                console.log([1, 2, 3].includes(4)); //false\n                console.log([1, 2, 3].includes(1, 2)); //false\n\n                //负索引从数组末尾开始计数,但仍然从前往后进行搜索\n                console.log([1, 2, 3].includes(3, -2)); //true\n\n                console.log([1, 2, NaN].includes(NaN)); //true\n                console.log(['1', '2', '3'].includes(3)); //false\n                "}],["$","$Ld",null,{"children":"indexOf()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">indexOf()</code>方法返回数组中第一次出现给定元素的下标，如果不存在则返回<code class=\"x-inline-highlight\">-1</code>。"}}],["$","$Le",null,{"language":"js","code":"\n                arr.indexOf(searchElement)\n                arr.indexOf(searchElement, fromIndex) //开始搜索的索引\n                "}],["$","$Le",null,{"language":"js","code":"\n                const arr = [0, 1, 2, 3, 2];\n                console.log(arr.indexOf(2)); //2\n                console.log(arr.indexOf(2, 3)); //4\n                console.log(arr.indexOf(9)); //-1\n                "}],["$","$Lf",null,{"children":"lastIndexOf()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">lastIndexOf()</code>方法返回数组中给定元素最后一次出现的索引，如果不存在则返回<code class=\"x-inline-highlight\">-1</code>。该方法从<code class=\"x-inline-highlight\">fromIndex</code>开始向前搜索数组。"}}],["$","$Le",null,{"language":"js","code":"\n                arr.lastIndexOf(searchElement)\n                arr.lastIndexOf(searchElement, fromIndex) //开始搜索的索引\n                "}],["$","$Le",null,{"language":"js","code":"\n                const arr = [0, 1, 2, 3, 2];\n                console.log(arr.lastIndexOf(2)); //4\n                console.log(arr.lastIndexOf(2, 3)); //2\n                console.log(arr.lastIndexOf(9)); //-1\n                "}],["$","$Ld",null,{"children":"join()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">join()</code>方法将一个数组的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。"}}],["$","$Le",null,{"language":"js","code":"\n                const elements = ['Fire', 'Air', 'Water'];\n                console.log(elements.join()); //Fire,Air,Water\n                console.log(elements.join('')); //FireAirWater\n                console.log(elements.join('-')); //Fire-Air-Water\n                "}],["$","$Ld",null,{"children":"map()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">map()</code>方法创建一个<span class=\"x-inline-strong\">新数组</span>，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。"}}],["$","$Le",null,{"language":"js","code":"arr.map(callbackFn)"}],["$","p",null,{"className":"x-p no-margin-bottom","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">callbackFn</code>为数组中每个元素执行的函数，它的返回值作为一个元素被添加为新数组中。该函数被调用时将传入以下参数："}}],["$","$L10",null,{"children":"`value`：数组中正在处理的当前元素"}],["$","$L10",null,{"children":"`index`：数组中正在处理的当前元素的索引"}],["$","$L10",null,{"children":"`array`：调用了`map()`的数组本身"}],["$","$Le",null,{"language":"js","code":"\n                const numbers = [1, 4, 9];\n                const roots = numbers.map((num) => Math.sqrt(num));\n\n                console.log(numbers); //[1, 4, 9]\n                console.log(roots); //[1, 2, 3]\n                "}],["$","$Ld",null,{"children":"pop()和push()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">pop()</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度。<br/> <code class=\"x-inline-highlight\">push()</code>方法将指定的元素添加到数组的末尾，并返回新的数组长度。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 2, 3];\n\n                arr.push(50);\n                const res1 = arr.push(98, 99);\n                console.log(res1, arr); //6 [1, 2, 3, 50, 98, 99]\n\n                const res2 = arr.pop();\n                console.log(res2, arr); //99 [1, 2, 3, 50, 98]\n\n                console.log([].pop()); //undefined\n                "}],["$","$Ld",null,{"children":"reduce()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">reduce()</code>方法对数组中的每个元素按序执行一个提供的<code class=\"x-inline-highlight\">reducer</code>函数，每一次运行<code class=\"x-inline-highlight\">reducer</code>会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为<code class=\"x-inline-highlight\">0</code>的元素开始执行，则需要传递初始值。否则，数组索引为<code class=\"x-inline-highlight\">0</code>的元素将被用作初始值，迭代器将从索引为<code class=\"x-inline-highlight\">1</code>的元素开始执行。<br/> 下面是一个使用<code class=\"x-inline-highlight\">reduce()</code>的例子，计算数组所有元素的总和："}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 2, 3, 4];\n                const initialValue = 7;\n                const sum = arr.reduce((sum, currentValue) => sum + currentValue, initialValue);\n                console.log(sum); //17\n                "}],["$","$Lf",null,{"children":"使用 .reduce() 替代 .filter().map()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"使用<code class=\"x-inline-highlight\">filter()</code>和<code class=\"x-inline-highlight\">map()</code>会遍历数组两次，但是你可以使用<code class=\"x-inline-highlight\">reduce()</code>只遍历一次并实现相同的效果。<br/> 下面这个例子中，希望筛选出数组中的正数并将其乘<code class=\"x-inline-highlight\">2</code>："}}],["$","$Le",null,{"language":"js","code":"\n                const numbers = [-5, 6, 2, -1];\n\n                console.log(\n                    numbers.filter((n) => n > 0).map((n) => n * 2)\n                ); //[12, 4]\n\n                console.log(\n                    numbers.reduce((result, n) => (n > 0 ? [...result, n * 2] : result), [])\n                ); //[12, 4]\n                "}],["$","$Ld",null,{"children":"reverse()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">reverse()</code>方法反转数组中的元素，并返回同一数组的引用。<br/>改变返回的数组也会改变原始数组。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 2, 3];\n\n                const res = arr.reverse();\n                console.log(arr); //[3, 2, 1]\n\n                res[0] = 99;\n                console.log(res, arr); //[99, 2, 1] [99, 2, 1]\n                "}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果希望<code class=\"x-inline-highlight\">reverse()</code>不改变原始数组，可以在调用之前做一个浅拷贝。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 2, 3];\n\n                const res = [...arr].reverse(); //在调用之前做浅拷贝\n                console.log(arr); //[1, 2, 3]\n\n                res[0] = 99;\n                console.log(res, arr); //[99, 2, 1] [1, 2, 3]\n                "}],["$","$Ld",null,{"children":"shift()和unshift()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">shift()</code>方法从数组中删除第一个元素，并返回该元素的值。此方法会更改数组的长度。<br/> <code class=\"x-inline-highlight\">unshift()</code>方法将指定元素添加到数组的开头，并返回新的数组长度。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [1, 2, 3];\n\n                arr.unshift(50);\n                const res1 = arr.unshift(98, 99);\n                console.log(res1, arr); //6 [98, 99, 50, 1, 2, 3]\n\n                const res2 = arr.shift();\n                console.log(res2, arr); //98 [99, 50, 1, 2, 3]\n\n                console.log([].shift()); //undefined\n                "}],["$","$Ld",null,{"children":"slice()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">slice()</code>方法返回一个新的数组对象，该对象为原数组的一段，包括<code class=\"x-inline-highlight\">start</code>，不包括<code class=\"x-inline-highlight\">end</code>。"}}],["$","$Le",null,{"language":"js","code":"\n                arr.slice()\n                arr.slice(start)\n                arr.slice(start, end)\n                "}],["$","$Le",null,{"language":"js","code":"\n                const arr = [0, 1, 2, 3, 4, 5];\n\n                console.log(arr.slice()); //[0, 1, 2, 3, 4, 5]\n                console.log(arr.slice(2)); //[2, 3, 4, 5]\n                console.log(arr.slice(2, 4)); //[2, 3]\n\n                //支持负数索引\n                console.log(arr.slice(-2)); //[4, 5]\n                console.log(arr.slice(-6, 4)); //[[0, 1, 2, 3]\n                console.log(arr.slice(-5, -1)); //[1, 2, 3, 4]\n\n                //end超出范围会提取所有元素直到末尾\n                console.log(arr.slice(-5, 99)); //[1, 2, 3, 4, 5]\n                "}],["$","$Ld",null,{"children":"sort()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">sort()</code>方法<span class=\"x-inline-strong\">就地</span>对数组的元素进行排序，并返回对相同数组的引用。"}}],["$","$Le",null,{"language":"js","code":"\n                arr.sort()\n                arr.sort(compareFn)\n                "}],["$","div",null,{"className":"x-highlightblock highlight-background-red","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果省略<code class=\"x-inline-highlight\">compareFn</code>，数组元素会被转换为字符串，然后根据每个字符的Unicode码位值进行排序。"}}]}],["$","$Le",null,{"language":"js","code":"\n                const arr1 = [2, 5, 14, 8, 1];\n                const arr2 = arr1.sort();\n\n                console.log(arr1); //[1, 14, 2, 5, 8]\n                arr2[0] = 99;\n                console.log(arr1); //[99, 14, 2, 5, 8]\n\n                arr1.sort((a, b) => a - b);\n                console.log(arr1); //[2, 5, 8, 14, 99]\n                "}],["$","$Ld",null,{"children":"splice()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">splice()</code>方法通过移除或者替换已存在的元素和/或添加新元素<span class=\"x-inline-strong\">就地</span>改变一个数组的内容。"}}],["$","$Le",null,{"language":"js","code":"\n                arr.splice(start)\n                arr.splice(start, deleteCount)\n                arr.splice(start, deleteCount, item1)\n                arr.splice(start, deleteCount, item1, item2, itemN)\n                "}],["$","p",null,{"className":"x-p no-margin-bottom","dangerouslySetInnerHTML":{"__html":"参数说明："}}],["$","$L10",null,{"children":"`start`：表示要开始改变数组的位置"}],["$","$L10",null,{"children":"`deleteCount`：数组中要从`start`开始删除的元素数量"}],["$","$L10",null,{"children":"`item1 ... itemN`：从`start`开始要加入到数组中的元素"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果省略了<code class=\"x-inline-highlight\">deleteCount</code>，或者其值大于或等于由<code class=\"x-inline-highlight\">start</code>指定的位置到数组末尾的元素数量，那么从<code class=\"x-inline-highlight\">start</code>到数组末尾的所有元素将被删除。"}}],["$","$Le",null,{"language":"js","code":"\n                const arr = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\n                arr.splice(6);\n                console.log(arr); //[0, 1, 2, 3, 4, 5]\n\n                arr.splice(2, 2);\n                console.log(arr); //[0, 1, 4, 5]\n\n                arr.splice(1, 2, 'a');\n                console.log(arr); //[0, 'a', 5]\n\n                arr.splice(0, 0, 'hello', 'world');\n                console.log(arr); //['hello', 'world', 0, 'a', 5]\n                "}],["$","$Ld",null,{"children":"Array.isArray()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Array.isArray()</code>静态方法用于确定传递的值是否是一个<code class=\"x-inline-highlight\">Array</code>。"}}],["$","$Le",null,{"language":"js","code":"\n                console.log(Array.isArray([1, 2, 3])); //true\n                console.log(Array.isArray('123')); //false\n                "}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"更多示例：<code class=\"x-inline-highlight\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">Array.isArray()</a></code>"}}],["$","$Ld",null,{"children":"Array.from()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Array.from()</code>静态方法从可迭代或类数组对象创建一个新的浅拷贝的数组实例。<br/> 转换异步的可迭代对象到数组，可以使用<code class=\"x-inline-highlight\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">Array.fromAsync()</a></code>。"}}],["$","$Le",null,{"language":"js","code":"\n                console.log(Array.from('hello')); //['h', 'e', 'l', 'l', 'o']\n                console.log(Array.from([1, 2, 3], (x) => x * x)); //[1, 4, 9]\n                "}],["$","p",null,{"className":"x-p no-margin-bottom","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Array.from()</code>可以通过以下方式来创建数组对象："}}],["$","$L10",null,{"children":"可迭代对象（例如`@Map[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map]@`和`@Set[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set]@`对象）"}],["$","$L10",null,{"children":"类数组对象（带有`length`属性和索引元素的对象）"}],["$","$Ld",null,{"children":"Array.of()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Array.of()</code>静态方法通过可变数量的参数创建一个新的<code class=\"x-inline-highlight\">Array</code>实例。<br/> <code class=\"x-inline-highlight\">Array()</code>构造函数会因为参数数量不同导致重载，<code class=\"x-inline-highlight\">Array.of()</code>行为更加统一。"}}],["$","$Le",null,{"language":"js","code":"\n                console.log(Array(5)); //[<5 empty items>]\n                console.log(Array(98, 99)); //[98, 99]\n\n                console.log(Array.of(5)); //[5]\n                console.log(Array.of(98, 99)); //[98, 99]\n                "}]],null],"segment":"__PAGE__"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f70c26425a044d6b.css","precedence":"next","crossOrigin":""}]]}],"segment":"js-array"},"styles":[]}],"segment":"23c"},"styles":[]}],"params":{}}],null],"segment":"(blogs)"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c84b60895b980f14.css","precedence":"next","crossOrigin":""}]]}]]}]}]}],null]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Create Next App"}],["$","meta","2",{"name":"description","content":"Generated by create next app"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
b:null
