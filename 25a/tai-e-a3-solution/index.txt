2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-365a68497689ccdc.js"],""]
3:I[86510,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","931","static/chunks/app/page-83f042a81d8e4dec.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-365a68497689ccdc.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-731525953a9b1826.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-731525953a9b1826.js"],""]
8:["slug","25a/tai-e-a3-solution","c"]
0:["lKLdySv0qPZzwe6tWJDMG",[[["",{"children":[["slug","25a/tai-e-a3-solution","c"],{"children":["__PAGE__?{\"slug\":[\"25a\",\"tai-e-a3-solution\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","25a/tai-e-a3-solution","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"南京大学程序分析Lab3（死代码消除）思路"}],["$","$L3",null,{"path":"/25a/tai-e-a3-solution/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/466d61e46d9c1cc6.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/17b3c4485edf7c41.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-365a68497689ccdc.js"],""]
f:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-365a68497689ccdc.js"],""]
e:T7de,<span class="token keyword">int</span> <span class="token function">unreachableSwitchBranch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// unreachable branch</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// fall through</span>
        <span class="token keyword">default</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span> <span class="token comment">// unreachable branch</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
10:T503,// 获取if语句的“可达后继”
Set<Stmt> getIfStmtReachableSuccs(If ifStmt, CFG<Stmt> cfg, DataflowResult<Stmt, CPFact> constants) {
    ConditionExp condition = ifStmt.getCondition();
    Var op1 = condition.getOperand1(), op2 = condition.getOperand2();
    Value v1 = constants.getInFact(ifStmt).get(op1), v2 = constants.getInFact(ifStmt).get(op2);
    if (v1.isConstant() && v2.isConstant()) {
        int c1 = v1.getConstant(), c2 = v2.getConstant(); // 条件表达式的两个操作数的（常量）值
        boolean isTrue = switch (condition.getOperator()) {
            case EQ -> c1 == c2;
            case NE -> c1 != c2;
            case LT -> c1 < c2;
            case GT -> c1 > c2;
            case LE -> c1 <= c2;
            case GE -> c1 >= c2;
        };
        for (Edge<Stmt> edge : cfg.getOutEdgesOf(ifStmt)) {
            // 条件值为常量true/false，只保留对应分支的后继
            if (isTrue && edge.getKind() == Edge.Kind.IF_TRUE) {
                return Set.of(edge.getTarget());
            }
            if (!isTrue && edge.getKind() == Edge.Kind.IF_FALSE) {
                return Set.of(edge.getTarget());
            }
        }
    }
    // 条件值不是常量，保留所有后继
    return cfg.getSuccsOf(ifStmt);
}
11:T2489,<span class="token comment">// 获取if语句的“可达后继”</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> <span class="token function">getIfStmtReachableSuccs</span><span class="token punctuation">(</span><span class="token class-name">If</span> ifStmt<span class="token punctuation">,</span> <span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">,</span> <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">,</span> <span class="token class-name">CPFact</span><span class="token punctuation">></span></span> constants<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConditionExp</span> condition <span class="token operator">=</span> ifStmt<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Var</span> op1 <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">getOperand1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> op2 <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">getOperand2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Value</span> v1 <span class="token operator">=</span> constants<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>ifStmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> constants<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>ifStmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">isConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> v2<span class="token punctuation">.</span><span class="token function">isConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> c1 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> v2<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 条件表达式的两个操作数的（常量）值</span>
        <span class="token keyword">boolean</span> isTrue <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">EQ</span> <span class="token operator">-></span> c1 <span class="token operator">==</span> c2<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">NE</span> <span class="token operator">-></span> c1 <span class="token operator">!=</span> c2<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">LT</span> <span class="token operator">-></span> c1 <span class="token operator">&lt;</span> c2<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">GT</span> <span class="token operator">-></span> c1 <span class="token operator">></span> c2<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">LE</span> <span class="token operator">-></span> c1 <span class="token operator">&lt;=</span> c2<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">GE</span> <span class="token operator">-></span> c1 <span class="token operator">>=</span> c2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> edge <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getOutEdgesOf</span><span class="token punctuation">(</span>ifStmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 条件值为常量true/false，只保留对应分支的后继</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrue <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Edge<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">IF_TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isTrue <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Edge<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">IF_FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 条件值不是常量，保留所有后继</span>
    <span class="token keyword">return</span> cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>ifStmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
12:T1803,<span class="token comment">// 获取switch语句的“可达后继”</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> <span class="token function">getSwitchStmtReachableSuccs</span><span class="token punctuation">(</span><span class="token class-name">SwitchStmt</span> switchStmt<span class="token punctuation">,</span> <span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">,</span> <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">,</span> <span class="token class-name">CPFact</span><span class="token punctuation">></span></span> constants<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Var</span> condVar <span class="token operator">=</span> switchStmt<span class="token punctuation">.</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Value</span> v <span class="token operator">=</span> constants<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>switchStmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>condVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">isConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// switch语句的条件（常量）值</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> edge <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getOutEdgesOf</span><span class="token punctuation">(</span>switchStmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Edge<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">SWITCH_CASE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> cv <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">getCaseValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// case标签的值</span>
                <span class="token comment">// 有一个case标签的值等于条件值，只保留对应分支的后继</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> cv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 条件值为常量，但没有case标签的值等于条件值，只保留default分支的后继</span>
        <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>switchStmt<span class="token punctuation">.</span><span class="token function">getDefaultTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 条件值不是常量，保留所有后继</span>
    <span class="token keyword">return</span> cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>switchStmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
13:Ta12,@Override
public Set<Stmt> analyze(IR ir) {
    // obtain CFG
    CFG<Stmt> cfg = ir.getResult(CFGBuilder.ID);

    // obtain result of constant propagation
    DataflowResult<Stmt, CPFact> constants = ir.getResult(ConstantPropagation.ID);

    // obtain result of live variable analysis
    DataflowResult<Stmt, SetFact<Var>> liveVars = ir.getResult(LiveVariableAnalysis.ID);

    // keep statements (dead code) sorted in the resulting set
    Set<Stmt> deadCode = new TreeSet<>(Comparator.comparing(Stmt::getIndex));

    // TODO - finish me
    // Your task is to recognize dead code in ir and add it to deadCode

    // 1.不可达代码
    Queue<Stmt> queue = new LinkedList<>();
    Set<Stmt> visited = new HashSet<>();
    Stmt entry = cfg.getEntry();
    queue.add(entry); // BFS遍历图
    while (!queue.isEmpty()) {
        Stmt stmt = queue.poll();
        visited.add(stmt);

        Set<Stmt> reachableSuccs;
        if (stmt instanceof If ifStmt) {
            // if语句的“可达后继”
            reachableSuccs = getIfStmtReachableSuccs(ifStmt, cfg, constants);
        } else if (stmt instanceof SwitchStmt switchStmt) {
            // switch语句的“可达后继”
            reachableSuccs = getSwitchStmtReachableSuccs(switchStmt, cfg, constants);
        } else {
            reachableSuccs = cfg.getSuccsOf(stmt);
        }

        for (Stmt succ : reachableSuccs) {
            if (!visited.contains(succ)) {
                queue.add(succ);
            }
        }
    }
    // 遍历一遍之后，可以找到所有控制流不可达和分支不可达的语句
    for (Stmt stmt : cfg) {
        if (cfg.isExit(stmt)) continue;
        if (!visited.contains(stmt)) {
            deadCode.add(stmt);
        }
    }

    // 2.无用赋值
    for (Stmt stmt : cfg) {
        /*
        见作业文档：
        AssignStmt和Invoke都是DefinitionStmt的子类，但方法调用可能含有很多副作用，
        因此对于像 x = m(); 这样的语句，即使x之后再也不会被用到（x是无用变量），
        这条语句也不会被认为是无用赋值。因此，本次作业中所有可能的无用赋值都只可能是AssignStmt的实例。
        */
        if (stmt instanceof AssignStmt assignStmt) {
            LValue lval = assignStmt.getLValue();
            RValue rval = assignStmt.getRValue();
            if (lval instanceof Var && !liveVars.getOutFact(stmt).contains((Var) lval) && hasNoSideEffect(rval)) {
                deadCode.add(stmt);
            }
        }
    }

    return deadCode;
}
14:T38da,<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> <span class="token function">analyze</span><span class="token punctuation">(</span><span class="token class-name">IR</span> ir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// obtain CFG</span>
    <span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> cfg <span class="token operator">=</span> ir<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CFGBuilder</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// obtain result of constant propagation</span>
    <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">,</span> <span class="token class-name">CPFact</span><span class="token punctuation">></span></span> constants <span class="token operator">=</span> ir<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ConstantPropagation</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// obtain result of live variable analysis</span>
    <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">,</span> <span class="token class-name">SetFact</span><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span><span class="token punctuation">></span></span> liveVars <span class="token operator">=</span> ir<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">LiveVariableAnalysis</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// keep statements (dead code) sorted in the resulting set</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> deadCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span><span class="token operator">::</span><span class="token function">getIndex</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// TODO - finish me</span>
    <span class="token comment">// Your task is to recognize dead code in ir and add it to deadCode</span>

    <span class="token comment">// 1.不可达代码</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stmt</span> entry <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BFS遍历图</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Stmt</span> stmt <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> reachableSuccs<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">If</span> ifStmt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// if语句的“可达后继”</span>
            reachableSuccs <span class="token operator">=</span> <span class="token function">getIfStmtReachableSuccs</span><span class="token punctuation">(</span>ifStmt<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> constants<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">SwitchStmt</span> switchStmt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// switch语句的“可达后继”</span>
            reachableSuccs <span class="token operator">=</span> <span class="token function">getSwitchStmtReachableSuccs</span><span class="token punctuation">(</span>switchStmt<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> constants<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            reachableSuccs <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Stmt</span> succ <span class="token operator">:</span> reachableSuccs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>succ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>succ<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历一遍之后，可以找到所有控制流不可达和分支不可达的语句</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Stmt</span> stmt <span class="token operator">:</span> cfg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">isExit</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            deadCode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2.无用赋值</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Stmt</span> stmt <span class="token operator">:</span> cfg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
        见作业文档：
        AssignStmt和Invoke都是DefinitionStmt的子类，但方法调用可能含有很多副作用，
        因此对于像 x = m(); 这样的语句，即使x之后再也不会被用到（x是无用变量），
        这条语句也不会被认为是无用赋值。因此，本次作业中所有可能的无用赋值都只可能是AssignStmt的实例。
        */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">AssignStmt</span> assignStmt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">LValue</span> lval <span class="token operator">=</span> assignStmt<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RValue</span> rval <span class="token operator">=</span> assignStmt<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lval <span class="token keyword">instanceof</span> <span class="token class-name">Var</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>liveVars<span class="token punctuation">.</span><span class="token function">getOutFact</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">)</span> lval<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasNoSideEffect</span><span class="token punctuation">(</span>rval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                deadCode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> deadCode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
5:[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"NJU程序分析<a href=\"https://tai-e.pascal-lab.net/pa3.html\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">死代码检测的Lab</a>关注以下两种类型的死代码："}}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"不可达代码：控制流不可达（比如<code class=\"x-inline-highlight\">return</code>之后的语句）和分支不可达（比如<code class=\"x-inline-highlight\">if(false)</code>）"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"无用赋值：赋值语句的左值不在活跃变量集合中（并且等号右边的表达式没有副作用）"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"不可达代码涉及到对CFG图结构的分析，而无用赋值可以逐条语句进行检测，因此考虑先完成对不可达代码的检测。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"从程序入口点开始，对CFG进行一次BFS，标记到达的节点（语句），即可排除掉控制流不可达的语句；对于分支不可达的语句，考虑在遍历的过程中选择他们的出边，就像把那些不可达的分支“剪掉”。比如对于这个例子（作业文档上的例子）："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Java"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"int unreachableSwitchBranch() {\n    int x = 2, y;\n    switch (x) {\n        case 1: y = 100; break; // unreachable branch\n        case 2: y = 200;\n        case 3: y = 300; break; // fall through\n        default: y = 666; // unreachable branch\n    }\n    return y;\n}\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"生成的CFG为："}}],["$","$Lf",null,{"src":"fig1.svg","width":"600px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"对于<code class=\"x-inline-highlight\">switch</code>语句，<code class=\"x-inline-highlight\">x</code>为常量<code class=\"x-inline-highlight\">2</code>，如果我们在遍历CFG的时候忽略其余的边，就等价于只剩一条从<code class=\"x-inline-highlight\">15-&#62;5-&#62;6-&#62;7-&#62;8-&#62;9-&#62;16</code>的通路，其他分支上的（即使是不与节点<code class=\"x-inline-highlight\">15</code>直接相连的）节点也自然不会被遍历到了。同时也不需要特殊考虑<code class=\"x-inline-highlight\">switch</code>语句的fall through问题（语句<code class=\"x-inline-highlight\">y=200</code>后没有<code class=\"x-inline-highlight\">break</code>因此语句<code class=\"x-inline-highlight\">y=300</code>也是可达的）。"}}],["$","$Lf",null,{"src":"fig2.jpg","width":"600px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"代码侧面，实现<code class=\"x-inline-highlight\">getIfStmtReachableSuccs</code>和<code class=\"x-inline-highlight\">getSwitchStmtReachableSuccs</code>两个方法："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Java"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$10"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Java"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"// 获取switch语句的“可达后继”\nSet<Stmt> getSwitchStmtReachableSuccs(SwitchStmt switchStmt, CFG<Stmt> cfg, DataflowResult<Stmt, CPFact> constants) {\n    Var condVar = switchStmt.getVar();\n    Value v = constants.getInFact(switchStmt).get(condVar);\n    if (v.isConstant()) {\n        int c = v.getConstant(); // switch语句的条件（常量）值\n        for (Edge<Stmt> edge : cfg.getOutEdgesOf(switchStmt)) {\n            if (edge.getKind() == Edge.Kind.SWITCH_CASE) {\n                int cv = edge.getCaseValue(); // case标签的值\n                // 有一个case标签的值等于条件值，只保留对应分支的后继\n                if (c == cv) {\n                    return Set.of(edge.getTarget());\n                }\n            }\n        }\n        // 条件值为常量，但没有case标签的值等于条件值，只保留default分支的后继\n        return Set.of(switchStmt.getDefaultTarget());\n    }\n    // 条件值不是常量，保留所有后继\n    return cfg.getSuccsOf(switchStmt);\n}\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这两个方法会返回条件/分支语句“可达”的后继节点，如果条件值不是常量则等价于<code class=\"x-inline-highlight\">cfg.getSuccsOf(stmt)</code>（返回所有后继），否则只会返回命中条件的那个后继节点。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在BFS时，对于条件/分支语句，改为用这两个方法获取语句的后继节点，即可完成对不可达代码的判断；BFS完成之后再逐语句进行无用赋值的检测即可，代码如下："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Java"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$13"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]]}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"南京大学程序分析Lab3（死代码消除）思路 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/25a/tai-e-a3-solution/"}]]
1:null
