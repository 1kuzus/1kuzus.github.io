2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-b311f2c3ba911157.js"],""]
3:I[86510,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-b311f2c3ba911157.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-b311f2c3ba911157.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-2f7fc8109c2c02eb.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-2f7fc8109c2c02eb.js"],""]
8:["slug","23d/protocols","c"]
0:["Jzb6MWORfP3perfrWvz2s",[[["",{"children":[["slug","23d/protocols","c"],{"children":["__PAGE__?{\"slug\":[\"23d\",\"protocols\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","23d/protocols","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"【计算机网络】协议总结"}],["$","$L3",null,{"path":"/23d/protocols/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f11866205a1cdd00.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aabc4b23e8094229.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-b311f2c3ba911157.js"],""]
e:T84b,图中<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>是单程传播时延，<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>并没有很强的物理含义，我们只是假设主机D发送数据后经过<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>时间检测到A的信号。这张图的重点是，在<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>趋近于0的情况下，A最长需要<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>的时间检测到碰撞。我们把<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>称作<span class="x-inline-strong">争用期</span><code class="x-inline-highlight">(Contention Period)</code>，它的意义是只要经过<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span>时间还没有检测到碰撞，就能肯定这次发送不会发生碰撞。f:Tb86,第<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span>次重传的退避时间为<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>，r为从集合<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">i</span><span class="mtight">n</span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mtight">10</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span>中随机选出的数。当重传达<code class="x-inline-highlight">16</code>次仍不能成功时，则丢弃该帧，并向上层报告。5:[["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"文中各层出现的协议参考教程的教学顺序，不代表对协议所属层次的划分。"}}]}],["$","h2",null,{"className":"x-h1","children":"链路层"}],["$","h3",null,{"className":"x-h2","children":"可靠传输"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在链路层传输中，可能出现的错误包括数据位出错、分组丢失、分组失序、分组重复等。可靠传输服务希望实现发送端发送什么，接收端就接收到什么。虽然下面将在链路层这一章节中介绍SW、GBN、SR三种协议，但要明确的是，可靠传输服务并不仅仅局限于链路层，其他各层均可选择实现可靠传输。"}}],["$","h3",null,{"className":"x-h2","children":"停等协议 - SW"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">停等协议</span><code class=\"x-inline-highlight\">(Stop and Wait, SW)</code>的发送方每发送一帧数据就停止，并等待接收方发送确认帧，收到确认后再发送下一帧。"}}],["$","$Ld",null,{"src":"sw.png","width":"100%","filterDarkTheme":true}],["$","h4",null,{"className":"x-h3","children":"确认与否认、超时重传"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"发送方发送数据后等待接收方<code class=\"x-inline-highlight\">ACK</code>或<code class=\"x-inline-highlight\">NAK</code>的响应，并启动超时计时器，如果一定时间收不到响应则启动超时重传。"}}],["$","h4",null,{"className":"x-h3","children":"确认丢失"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果确认分组丢失，接收方需要能感知到数据分组是否重复，因此数据分组需要编号，在停等协议中，由于每发送一个数据就进行等待，因此使用一位编号就够了。"}}],["$","h4",null,{"className":"x-h3","children":"确认迟到"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果确认分组迟到，在图示情况中，发送方需要感知到第二个<code class=\"x-inline-highlight\">ACK</code>是对第二个<code class=\"x-inline-highlight\">DATA 0</code>的重复确认，而不是对<code class=\"x-inline-highlight\">DATA 1</code>的确认。因此确认分组也需要使用一位编号。"}}],["$","h3",null,{"className":"x-h2","children":"回退N帧协议 - GBN"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">回退N帧协议</span><code class=\"x-inline-highlight\">(Go Back N, GBN)</code>允许发送方连续发送多个帧（即发送窗口可以大于<code class=\"x-inline-highlight\">1</code>），以解决停等协议信道利用率低的问题。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去；但接收方的接收窗口大小仅为<code class=\"x-inline-highlight\">1</code>，也就是只有接收到了此窗口所代表的序号的分组，接收方才会回复<code class=\"x-inline-highlight\">ACK</code>并且移动接收窗口。同理，发送方收到了发送窗口中最早的那个序号对应分组的<code class=\"x-inline-highlight\">ACK</code>，才会移动发送窗口。"}}],["$","h4",null,{"className":"x-h3","children":"累计确认"}],["$","$Ld",null,{"src":"gbn1.png","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"接收方不一定要对收到的数据逐个确认，也可以对最后一个分组进行确认。<code class=\"x-inline-highlight\">ACK n</code>表示序号为<code class=\"x-inline-highlight\">n</code>及其之前的分组都已经被正确接收。称这种方法为累计确认。例如图中，接收方只对<code class=\"x-inline-highlight\">1</code>号、<code class=\"x-inline-highlight\">4</code>号数据分组进行确认，并且<code class=\"x-inline-highlight\">ACK 1</code>在传输过程中丢失，发送方仍然可以根据收到的<code class=\"x-inline-highlight\">ACK 4</code>判断<code class=\"x-inline-highlight\">0</code>~<code class=\"x-inline-highlight\">4</code>号分组都已经被正确接收。"}}],["$","h4",null,{"className":"x-h3","children":"有差错情况"}],["$","$Ld",null,{"src":"gbn2.png","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"例如发送方发送了<code class=\"x-inline-highlight\">5</code>/<code class=\"x-inline-highlight\">6</code>/<code class=\"x-inline-highlight\">7</code>/<code class=\"x-inline-highlight\">0</code>/<code class=\"x-inline-highlight\">1</code>五个分组，但<code class=\"x-inline-highlight\">5</code>号数据分组丢失，此时由于到达的四个分组都与接收窗口序号不匹配，接收方会将其丢弃，并重复响应<code class=\"x-inline-highlight\">ACK 4</code>。"}}],["$","h3",null,{"className":"x-h2","children":"选择重传协议 - SR"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">选择重传协议</span><code class=\"x-inline-highlight\">(Selective Repeat, SR)</code>加大接收窗口的长度（即接收窗口也可以大于<code class=\"x-inline-highlight\">1</code>），缓存乱序到达的帧，这样不至于在一些情况下需要重传所有未被确认的帧从而导致效率降低。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"与GBN一样，发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去；接收方可接收未按序到达但没有误码并且序号落在接收窗口内的数据分组；发送方收到未按序到达的确认分组时，对其进行记录，以防止其相应数据分组的超时重发，但发送窗口不能向前滑动。为了使发送方仅重传出现差错的分组，接收方不再采用累积确认，而是对每个正确接收的数据分组进行<span class=\"x-inline-strong\">逐一确认</span>。"}}],["$","$Ld",null,{"src":"sr1.png","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"例如发送方发送了<code class=\"x-inline-highlight\">0</code>/<code class=\"x-inline-highlight\">1</code>/<code class=\"x-inline-highlight\">2</code>/<code class=\"x-inline-highlight\">3</code>四个分组，但<code class=\"x-inline-highlight\">2</code>号数据分组丢失，此时<code class=\"x-inline-highlight\">0</code>号、<code class=\"x-inline-highlight\">1</code>号按序到达，接收窗口可以向前移动；而<code class=\"x-inline-highlight\">3</code>号分组可以被接收，但接收窗口不能移动。"}}],["$","$Ld",null,{"src":"sr2.png","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"返回的<code class=\"x-inline-highlight\">ACK</code>到达发送方之后，发送方可以把发送窗口的起点移动到<code class=\"x-inline-highlight\">2</code>号，同时记录<code class=\"x-inline-highlight\">3</code>号分组已接收。移动发送窗口后，可以把新纳入窗口的<code class=\"x-inline-highlight\">4</code>号、<code class=\"x-inline-highlight\">5</code>号发送出去。"}}],["$","$Ld",null,{"src":"sr3.png","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果<code class=\"x-inline-highlight\">4</code>号、<code class=\"x-inline-highlight\">5</code>号可以被正常接收，并且返回的<code class=\"x-inline-highlight\">ACK 4</code>、<code class=\"x-inline-highlight\">ACK 5</code>可以正确到达发送方，那么最后会使得发送窗口和接收窗口都卡在<code class=\"x-inline-highlight\">2</code>的位置，并最终触发<code class=\"x-inline-highlight\">2</code>号分组超时重传。"}}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","h4",null,{"className":"x-h3","children":"GBN和SR的重传计时器"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在GBN中一个连接只会设置一个定时器，也就是说发生超时时，GBN会重发所有已发送但未被确认过的分组；<br/>而在SR中会为每个分组设置定时器。"}}]]}],["$","h3",null,{"className":"x-h2","children":"媒体接入控制"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即<span class=\"x-inline-strong\">媒体接入控制</span><code class=\"x-inline-highlight\">(Medium Access Control, MAC)</code>。"}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","th",null,{"rowSpan":4,"children":"静态划分信道"}],["$","td",null,{"colSpan":2,"children":"时分多路复用"}]]}],["$","tr",null,{"children":["$","td",null,{"colSpan":2,"children":"频分多路复用"}]}],["$","tr",null,{"children":["$","td",null,{"colSpan":2,"children":"波分多路复用"}]}],["$","tr",null,{"children":["$","td",null,{"colSpan":2,"children":"码分多路复用"}]}],["$","tr",null,{"children":[["$","th",null,{"rowSpan":5,"children":"动态接入控制"}],["$","th",null,{"children":"轮询访问"}],["$","td",null,{"children":"令牌传递"}]]}],["$","tr",null,{"children":[["$","th",null,{"rowSpan":4,"children":"随机访问"}],["$","td",null,{"children":"ALOHA"}]]}],["$","tr",null,{"children":["$","td",null,{"children":"CSMA"}]}],["$","tr",null,{"children":["$","td",null,{"children":"CSMA/CD"}]}],["$","tr",null,{"children":["$","td",null,{"children":"CSMA/CA"}]}]]}]}]}],["$","h3",null,{"className":"x-h2","children":"载波监听多路访问 - CSMA"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">载波监听多路访问</span><code class=\"x-inline-highlight\">(Carrier Sense Multiple Access, CSMA)</code>的思想是在发送帧之前监听信道。其原理是：当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会互相叠加而增大。当一个站检测到的信号电压摆动值超过一定门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。"}}],["$","h4",null,{"className":"x-h3","children":"非坚持CSMA"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"非坚持指的是对于监听信道忙之后就不继续监听。<br/>当主机要发送数据并对信道进行监听时，发现信道空闲则可直接传输；忙则等待一个随机的时间之后再进行监听。<br/>这样的缺点是可能存在各主机都在延迟等待过程中，使得信道处于空闲状态但无人发送数据，媒体使用率降低。"}}],["$","h4",null,{"className":"x-h3","children":"1-坚持CSMA"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"当主机要发送数据并对信道进行监听时，发现信道空闲则可直接传输；忙则一直保持监听，直到空闲马上传输。<br/>这样的缺点是假如有两个或两个以上的站点有数据要发送，冲突就不可避免。"}}],["$","h4",null,{"className":"x-h3","children":"p-坚持CSMA"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"当主机要发送数据并对信道进行监听时，发现信道空闲则以<code class=\"x-inline-highlight\">p</code>概率直接传输；忙则一直保持监听，直到空闲再以<code class=\"x-inline-highlight\">p</code>概率传输。对于空闲时其余的<code class=\"x-inline-highlight\">1-p</code>概率，则会等到下一个时间槽重复上述规则。"}}],["$","h3",null,{"className":"x-h2","children":"碰撞检测 - CSMA/CD"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上述的三种CSMA发生冲突后，仍然会坚持把数据帧发完，这时接收方收到叠加在一起的有碰撞数据会响应否认<code class=\"x-inline-highlight\">NAK</code>或者不响应等待发送方重发，这是一种被动的方式。<span class=\"x-inline-strong\">碰撞检测</span><code class=\"x-inline-highlight\">(Collision Detection, CD)</code>就是边发送数据边检测信道上信号电压的变化情况，来判断是否有其他主机也在发送数据。如果发现碰撞则立刻主动终止发送。"}}],["$","h4",null,{"className":"x-h3","children":"强化碰撞"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"以太网的强化碰撞：当发送帧的站点检测到碰撞，除了立即停止发送帧外，还要再继续发送<code class=\"x-inline-highlight\">48</code>位的人为干扰信号，以便有足够多的碰撞信号使所有站点都能检测出碰撞。"}}],["$","h4",null,{"className":"x-h3","children":"争用期"}],["$","$Ld",null,{"src":"csma1.png","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"$e"}}],["$","h4",null,{"className":"x-h3","children":"截断二进制指数规避算法"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"$f"}}],["$","h4",null,{"className":"x-h3","children":"最小/最大帧长的由来"}],["$","$Ld",null,{"src":"csma2.png","width":"600","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果一个帧的长度太小，可能一个站点还没来得及检测到其发送的帧产生了碰撞，就已经将这个帧发送完毕了。帧的传输时间要大于争用期。对于<code class=\"x-inline-highlight\">10 Mb/s</code>以太网，帧的最小长度为<code class=\"x-inline-highlight\">64</code>字节。减去帧头和帧尾，数据部分至少应为<code class=\"x-inline-highlight\">46</code>字节。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果一个帧的长度过大，一个站点不停地发送帧，其他站点就一直无法无法使用信道；如果帧的长度过大，接收方的缓冲区也可能产生溢出。以太网规定数据部分最长为<code class=\"x-inline-highlight\">1500</code>字节，加上帧头和帧尾，帧的最大长度为<code class=\"x-inline-highlight\">1518</code>字节。"}}],["$","h3",null,{"className":"x-h2","children":"碰撞避免 - CSMA/CA"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在无线局域网中可能会出现隐蔽站的问题，使用碰撞检测意义不大。不同于以太网，802.11标准使用<span class=\"x-inline-strong\">碰撞避免</span><code class=\"x-inline-highlight\">(Collision Avoidance, CA)</code>而不是碰撞检测。"}}],["$","$Ld",null,{"src":"csma3.png","width":"600","filterDarkTheme":true}],["$","h4",null,{"className":"x-h3","children":"使用确认帧"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"CSMA、CSMA/CD都没有使用确认帧机制。但因为无线信道的通信质量远不如有线信道，因此CSMA/CA要求接收方收到数据帧后响应<code class=\"x-inline-highlight\">ACK</code>，发送方收到<code class=\"x-inline-highlight\">ACK</code>就可以进行下一个数据帧的发送。"}}],["$","h4",null,{"className":"x-h3","children":"预约信道"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"802.11标准允许发送站对信道进行预约。<br/>检测到信道空闲时，源站先发送<span class=\"x-inline-strong\">请求发送</span><code class=\"x-inline-highlight\">(Request To Send, RTS)</code>，包括源地址、目的地址和这次通信所需的时间；<br/>若目的站收到源站发来的<code class=\"x-inline-highlight\">RTS</code>帧且媒体空闲，就响应<span class=\"x-inline-strong\">允许发送</span><code class=\"x-inline-highlight\">(Clear To Send, CTS)</code>它也包括这次通信所需的时间（从<code class=\"x-inline-highlight\">RTS</code>复制）。<code class=\"x-inline-highlight\">CTS</code>帧可以被目的站范围内所有站点收到，其作用有两点：给源站明确的发送许可，同时指示其他站在预约期内不要发送。"}}],["$","h2",null,{"className":"x-h1","children":"网络层"}],["$","h3",null,{"className":"x-h2","children":"自治系统、IGP和EGP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">自治系统</span><code class=\"x-inline-highlight\">(Autonomous System, AS)</code>通常由一组处在相同管理控制下的路由器组成。通常，一个<span class=\"x-inline-strong\">互联网服务提供商</span><code class=\"x-inline-highlight\">(Internet Service Provider, ISP)</code>中的路由器以及连接它们的链路构成一个AS。不过某些ISP会将它们的网络划分为多个AS。一个自治系统将会分配一个唯一的<span class=\"x-inline-strong\">自治系统号</span><code class=\"x-inline-highlight\">(ASN)</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"自治系统可以被理解为互联网中的小型网络单位。由此产生了<span class=\"x-inline-strong\">自治系统内部路由选择协议</span><code class=\"x-inline-highlight\">(intra-AS routing protocol)</code>和<span class=\"x-inline-strong\">自治系统间路由选择协议</span><code class=\"x-inline-highlight\">(inter-AS routing protocol)</code>。有时也会把这两个概念称作<span class=\"x-inline-strong\">内部网关协议</span><code class=\"x-inline-highlight\">(Interior Gateway Protocol, IGP)</code>和<span class=\"x-inline-strong\">外部网关协议</span><code class=\"x-inline-highlight\">(Exterior Gateway Protocol, EGP)</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"IGP和EGP并不指代某个具体的协议，而是代表一个类别。下面会讨论如下三个协议："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","th",null,{"children":"分类"}],["$","th",null,{"children":"名称"}]]}],["$","tr",null,{"children":[["$","td",null,{"rowSpan":2,"children":"IGP"}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">路由信息协议</span><code class=\"x-inline-highlight\">(Routing Information Protocol, RIP)</code>"}}]}]]}],["$","tr",null,{"children":["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">开放最短路径优先</span><code class=\"x-inline-highlight\">(Open Shortest Path First, OSPF)</code>"}}]}]}],["$","tr",null,{"children":[["$","td",null,{"children":"EGP"}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">边界网关协议</span><code class=\"x-inline-highlight\">(Border Gateway Protocol, BGP)</code>"}}]}]]}]]}]}]}],["$","h3",null,{"className":"x-h2","children":"路由信息协议 - RIP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">路由信息协议</span><code class=\"x-inline-highlight\">(Routing Information Protocol, RIP)</code>是基于<code class=\"x-inline-highlight\">距离矢量法</code>的，较为简单，适用于小网络。<br/>RIP协议要求网络中每一个路由器都维护从自己到每个其他目的网络的距离，这个距离用<span class=\"x-inline-strong\">跳数</span>来衡量，每经过一个路由器跳数+1。<br/>RIP协议允许一条路最多包含<code class=\"x-inline-highlight\">15</code>个路由器，即跳数最多为<code class=\"x-inline-highlight\">15</code>，超过则表示不可达。<br/>RIP协议只和<span class=\"x-inline-strong\">相邻路由器</span>交换信息，交换的信息是<span class=\"x-inline-strong\">自己的路由表</span>。"}}],["$","h4",null,{"className":"x-h3","children":"RIP协议路由更新规则"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"路由表中包含<span class=\"x-inline-strong\">目的网络</span>、<span class=\"x-inline-strong\">到目的网络的距离</span>、<span class=\"x-inline-strong\">下一跳路由器</span>。对于每个路由器，路由表更新规则为："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"对于接收到的新表的每一项，若原表没有这项对应的目标网络，则添加到自己的路由表中；"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"若有，且原表项的下一跳路由器就是发来更新信息的路由器，则用新表项替换原表项，但距离要+1，且下一跳路由器应修改为自己；"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"若有，且原表项的下一跳路由器不是发来更新信息的路由器，那么比较<code class=\"x-inline-highlight\">原表项的距离</code>和<code class=\"x-inline-highlight\">新表项的距离+1</code>，选择较小的。<br/>同上一条，填入新表项时距离要+1，下一跳路由器应修改为自己。"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"考虑一个例子："}}],["$","div",null,{"className":"x-highlightblock highlight-background-gray","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"R6和R4是两个相邻路由器，现在R6收到R4发来的更新信息，试更新R6的路由表。"}}],["$","div",null,{"className":"x-divider"}],["$","div",null,{"className":"x-flexrow-wrapper","children":["$","div",null,{"className":"x-flexrow","style":{"gap":"32px","minWidth":"$undefined","justifyContent":"$undefined","alignItems":"$undefined"},"children":[["$","div",null,{"children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"R6的路由表："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"目的网络"}}]}],["$","th","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"距离"}}]}],["$","th","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"下一跳路由器"}}]}]]}],["$","tr","1",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net1"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"-"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"-"}}]}]]}],["$","tr","2",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net2"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"3"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"R4"}}]}]]}],["$","tr","3",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net3"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"4"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"R5"}}]}]]}]]}]}]}]]}],["$","div",null,{"children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"R4发给R6的路由表（更新信息）："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"目的网络"}}]}],["$","th","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"距离"}}]}],["$","th","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"下一跳路由器"}}]}]]}],["$","tr","1",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net1"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"7"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"R1"}}]}]]}],["$","tr","2",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net2"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"4"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"R2"}}]}]]}],["$","tr","3",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net3"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"1"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"直接交付"}}]}]]}]]}]}]}]]}]]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"解：<br/>对于Net1，原表中没有，填入新表项，距离改为<code class=\"x-inline-highlight\">7+1=8</code>；<br/>对于Net2，原表中有，并且原表项下一跳路由器也是R4，因此填入新表项，但距离改为<code class=\"x-inline-highlight\">5</code>，下一跳路由器改为R4；<br/>对于Net3，原表中有，但下一跳路由器不是R4；此时比较<code class=\"x-inline-highlight\">4</code>和<code class=\"x-inline-highlight\">1+1</code>，选择较小的新表项，同理下一跳路由器应改为R4。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"最终结果，更新后R6的路由表："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"目的网络"}}]}],["$","th","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"距离"}}]}],["$","th","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"下一跳路由器"}}]}]]}],["$","tr","1",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net1"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"8"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"R4"}}]}]]}],["$","tr","2",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net2"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"5"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"R4"}}]}]]}],["$","tr","3",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Net3"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"2"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"R4"}}]}]]}]]}]}]}]]}],["$","h3",null,{"className":"x-h2","children":"开放最短路径优先 - OSPF"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">开放最短路径优先</span><code class=\"x-inline-highlight\">(Open Shortest Path First, OSPF)</code>是基于<code class=\"x-inline-highlight\">链路状态法</code>的，较为复杂，适用于大网络。<br/>每个路由器使用洪泛法向区域中的所有路由器发送信息，因此最终整个区域内所有路由器都得到了区域完整的图结构。然后每台路由器在本地运行<code class=\"x-inline-highlight\">Dijkstra</code>最短路径算法，确定一个以自身为根节点到所有子网的最短路径树。"}}],["$","h4",null,{"className":"x-h3","children":"在单个自治系统中再划分层次结构"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"为了应用于规模很大的网络，OSPF协议可以将一个自治系统再划分为若干更小的<span class=\"x-inline-strong\">区域</span>。在每个区域内，一台或多台区域边界路由器负责为流向该区域以外的分组提供路由选择。在AS中只有一个区域被配置成主干区域。主干区域的主要作用是为该AS中其他区域之间的流量提供路由选择。该主干总是包含本AS中的所有区域边界路由器、但也可能包含非边界路由器。在AS中的区域间的路由选择要求分组先路由到一个区域边界路由器（区域内路由选择），然后通过主干路由到位于目的区域的区域边界路由器进而再路由到最终目的地。"}}],["$","$Ld",null,{"src":"ospf.png","width":"600","filterDarkTheme":true}],["$","h4",null,{"className":"x-h3","children":"OSPF 相较于 RIP 的优点"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"安全：使用鉴别，仅有受信任的路由器能参于OSPF协议，可防止恶意入侵者将不正确的信息注入路由器表内。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"允许多条相同开销的路径：当存在多条相等开销的路径时，无须仅选择单一的路径来承载所有的流量。（RIP协议只允许一条）"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"对单播与多播路由选择的综合支持：<span class=\"x-inline-strong\">多播OSPF</span><code class=\"x-inline-highlight\">(MOSPF)</code>提供对OSPF的简单扩展，以便提供多播路由选择。MOSPF使用现有的OSPF链路数据库，并为现有的OSPF链路状态广播机制增加了一种新型的链路状态通告。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"支持在单个AS中的层次结构。"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"边界网关协议 - BGP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">边界网关协议</span><code class=\"x-inline-highlight\">(Border Gateway Protocol, BGP)</code>在这里只做简单的概念性介绍。"}}],["$","div",null,{"className":"x-flexrow-wrapper","children":["$","div",null,{"className":"x-flexrow","style":{"gap":"$undefined","minWidth":"600px","justifyContent":"$undefined","alignItems":"$undefined"},"children":[["$","$Ld",null,{"src":"bgp1.png","width":"50%","filterDarkTheme":true}],["$","$Ld",null,{"src":"bgp2.png","width":"50%","filterDarkTheme":true}]]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在不同自治系统内，度量路由的代价可能不同；自治系统之间的路由选择也需要考虑相关的政治、经济、安全因素。BGP只希望选择一条可达，无环路，且相对较优的路由。"}}],["$","$Ld",null,{"src":"bgp3.png","width":"600px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在配置BGP时，每个AS需要选择至少一个路由器作为<span class=\"x-inline-strong\">BGP发言人</span>，不同自治系统的BGP发言人要通过TCP连接交换路由信息。当BGP发言人互相交换了网络可达性信息后，各BGP发言人就根据自己的策略选择出到达各自治系统的较好的路由，也就是构造出树形结构、不存在回路的连通图。"}}],["$","div",null,{"className":"x-highlightblock highlight-background-red","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"关于协议所属层次的划分：<br/>RIP基于UDP，BGP基于TCP，归类到应用层协议比较合理；<br/>OSPF基于IP，归类到传输层协议比较合理；<br/>只不过，它们计算出的路径都服务于网络层，因此按照课程目录划在了网络层下。"}}]}],["$","h3",null,{"className":"x-h2","children":"IPv4编址"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">网际协议</span><code class=\"x-inline-highlight\">(Internet Protocol, IP)</code>现在有两个常用的版本，IPv4和IPv6。<br/>每个IPv4地址长度为<code class=\"x-inline-highlight\">32</code>位，等价为<code class=\"x-inline-highlight\">4</code>字节，大约有<code class=\"x-inline-highlight\">40</code>亿个可能的地址。地址通常用点分十进制记法表示，例如<code class=\"x-inline-highlight\">192.32.216.9</code>。"}}],["$","h4",null,{"className":"x-h3","children":"粗略的分类"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"IPv4地址有诸多分类，且其中有很多特殊地址、保留地址，因此先从最普遍的地址分类入手，再逐渐深入介绍特殊的IPv4地址。<br/>IPv4地址可以看作由两部分组成：网络号和主机号。根据网络号和主机号分为A、B、C三类，同时还有特殊的D、E两类。"}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","th",null,{"children":"分类"}],["$","th",null,{"children":"网络号"}],["$","th",null,{"children":"主机号"}],["$","th",null,{"children":"前8位十进制范围"}],["$","th",null,{"children":"特殊说明"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"A"}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"前<code class=\"x-inline-highlight\">8</code>位"}}]}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"后<code class=\"x-inline-highlight\">24</code>位"}}]}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">0</code>~<code class=\"x-inline-highlight\">127</code>"}}]}],["$","td",null,{"children":"-"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"B"}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"前<code class=\"x-inline-highlight\">16</code>位"}}]}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"后<code class=\"x-inline-highlight\">16</code>位"}}]}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">128</code>~<code class=\"x-inline-highlight\">191</code>"}}]}],["$","td",null,{"children":"-"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"C"}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"前<code class=\"x-inline-highlight\">24</code>位"}}]}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"后<code class=\"x-inline-highlight\">8</code>位"}}]}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">192</code>~<code class=\"x-inline-highlight\">223</code>"}}]}],["$","td",null,{"children":"-"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"D"}],["$","td",null,{"colSpan":2,"children":"不区分"}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">224</code>~<code class=\"x-inline-highlight\">239</code>"}}]}],["$","td",null,{"children":"D类IPv4地址不区分网络号与主机号，作多播地址用，不做介绍"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"E"}],["$","td",null,{"colSpan":2,"children":"不区分"}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">240</code>~<code class=\"x-inline-highlight\">255</code>"}}]}],["$","td",null,{"children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"E类IPv4地址不区分网络号与主机号，<br/>仅保留为搜索、Internet的实验和开发用，不做介绍"}}]}]]}]]}]}]}],["$","h4",null,{"className":"x-h3","children":"特殊地址"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上述分类中，各分类的范围中，都有很少一部分的地址有特殊的含义："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"网络号"}}]}],["$","th","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"主机号"}}]}],["$","th","2",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是否可作为源地址"}}]}],["$","th","3",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是否可作为目的地址"}}]}],["$","th","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"描述"}}]}]]}],["$","tr","1",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全<code class=\"x-inline-highlight\">0</code>"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全<code class=\"x-inline-highlight\">0</code>"}}]}],["$","td","2",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是"}}]}],["$","td","3",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"否"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">0.0.0.0</code>严格来说不是一个真正意义上的ip地址，<br/>它在本网范围内表示主机，也被用于一些协议的默认参数。"}}]}]]}],["$","tr","2",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全<code class=\"x-inline-highlight\">0</code>"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"某特定值"}}]}],["$","td","2",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是"}}]}],["$","td","3",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"否"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"本网内某特定主机，相当于把本应是本网的网络号填作了<code class=\"x-inline-highlight\">0</code>。"}}]}]]}],["$","tr","3",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"某特定值"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全<code class=\"x-inline-highlight\">0</code>"}}]}],["$","td","2",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"否"}}]}],["$","td","3",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"否"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"代表一个网段。"}}]}]]}],["$","tr","4",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"某特定值"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全<code class=\"x-inline-highlight\">1</code>"}}]}],["$","td","2",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"否"}}]}],["$","td","3",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"直接广播地址，对特定网络上的所有主机进行广播。"}}]}]]}],["$","tr","5",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全<code class=\"x-inline-highlight\">1</code>"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全<code class=\"x-inline-highlight\">1</code>"}}]}],["$","td","2",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"否"}}]}],["$","td","3",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">255.255.255.255</code>表示本网广播地址"}}]}]]}],["$","tr","6",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">127</code>"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">0.0.1</code>~<code class=\"x-inline-highlight\">255.255.254</code>"}}]}],["$","td","2",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是"}}]}],["$","td","3",{"className":null,"width":120,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"是"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"回环地址，用于本地回环测试。"}}]}]]}]]}]}]}],["$","h4",null,{"className":"x-h3","children":"私有地址"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"提到IP地址，第一反应可能就是<code class=\"x-inline-highlight\">192.168.0.1</code>这串数字了！又或许你打开<code class=\"x-inline-highlight\">cmd</code>窗口输入<code class=\"x-inline-highlight\">ipconfig</code>，然后发现你的设备IP地址是<code class=\"x-inline-highlight\">192.168.137.1</code>。这个问题可能让人感到困扰：一方面，课本上说IP地址是互联网上唯一的；另一方面，似乎无论你处在哪个移动或有线网络下，你的设备IP总是长成<code class=\"x-inline-highlight\">192.168.x.x</code>的样子，这似乎根本无法保证唯一性。这个问题涉及到<span class=\"x-inline-strong\">私有地址</span>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"除了特殊IP地址，还有一部分地址作为私有地址；这些地址不能用于在互联网上标识一个主机，只适用于在内部网络中使用。它们是："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"分类"}}]}],["$","th","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"地址范围"}}]}]]}],["$","tr","1",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"A"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">10.0.0.0</code>~<code class=\"x-inline-highlight\">10.255.255.255</code>"}}]}]]}],["$","tr","2",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"B"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">172.16.0.0</code>~<code class=\"x-inline-highlight\">171.31.255.255</code>"}}]}]]}],["$","tr","3",{"children":[["$","td","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"C"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">192.168.0.0</code>~<code class=\"x-inline-highlight\">192.168.255.255</code>"}}]}]]}]]}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这样的私有地址仅对本地网络中的设备有意义。但既然如此，想在互联网上发送或接收数据时，该如何处理编址呢？这需要用到<span class=\"x-inline-strong\">网络地址转换</span><code class=\"x-inline-highlight\">(Network Address Translation, NAT)</code>，NAT可以将内网的IP地址映射到互联网上的IP地址。从某种角度，NAT使得路由器对外界隐藏了本地网络的细节。"}}],["$","h3",null,{"className":"x-h2","children":"IPv6编址"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"用IPv6来取代IPv4主要是为了解决IPv4地址用尽问题，同时IPv6也在其他方面对于IPv4有许多改进。<br/>每个IPv6地址长度为<code class=\"x-inline-highlight\">128</code>位，地址通常用<code class=\"x-inline-highlight\">8</code>组四位十六进制数表示，例如<code class=\"x-inline-highlight\">2001:0db8:86a3:08d3:1319:8a2e:0370:7344</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"IPv6的地址有时可以省略，具体规则是："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"每组数字的前导<code class=\"x-inline-highlight\">0</code>可以省略；"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"可以用<code class=\"x-inline-highlight\">::</code>表示一组多组连续的<code class=\"x-inline-highlight\">0</code>，但<span class=\"x-inline-strong\">只能出现一次</span>。"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"例如下面的IPv6地址是等价的："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">2001:0db8:00de:0000:0000:0000:0000:2e13</code>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">2001:db8:de:0:0:0:0:2e13</code>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">2001:db8:de::2e13</code>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"IPv6比IPv4的改进"}],["$","$Ld",null,{"src":"ip.png","width":"100%","filterDarkTheme":true}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"扩大了地址空间，从<code class=\"x-inline-highlight\">8</code>位变为<code class=\"x-inline-highlight\">32</code>位"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"IPv6移除了校验和字段，以减少每跳的处理时间"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"IPv6将可选字段移出首部字段，放在有效载荷的扩展首部中，路由器不对扩展首部进行检查，提高了处理效率"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"IPv6支持即插即用，不需要DHCP协议"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"地址解析协议 - ARP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址，而网络层和运输层只关心目标主机的IP地址。<br/><span class=\"x-inline-strong\">地址解析协议</span><code class=\"x-inline-highlight\">(Address Resolution Protocol, ARP)</code>用于完成网络层地址（例如IP地址）和链路层地址（即MAC地址）的转换。"}}],["$","h3",null,{"className":"x-h2","children":"互联网控制报文协议 - ICMP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">互联网控制报文协议</span><code class=\"x-inline-highlight\">(Internet Control Message Protocol, ICMP)</code>被主机和路由器用来彼此沟通网络层的信息，ICMP最典型的用途是差错报告，提供可能发生在通信环境中的各种问题反馈。通过这些信息，管理者可以对所发生的问题作出诊断，然后采取适当的措施解决。"}}],["$","h3",null,{"className":"x-h2","children":"动态主机配置协议 - DHCP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">动态主机配置协议</span><code class=\"x-inline-highlight\">(Dynamic Host Configuration Protocol, DHCP)</code>是使用UDP协议的应用层协议，用于自动给内网机器分配IP地址等信息。虽然可以手动给内网设备一个一个的分配IP地址，但这项任务通常由DHCP服务器完成。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"DHCP的四个步骤是："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">DHCP发现</span><code class=\"x-inline-highlight\">(DHCP Discover)</code><br/>新加入主机的首要任务是发现一个要与其交互的DHCP服务器，这可以通过生成一个目的地址为<code class=\"x-inline-highlight\">255.255.255.255</code>或者一个子网广播地址的UDP包实现。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">DHCP提供</span><code class=\"x-inline-highlight\">(DHCP Offer)</code><br/>DHCP服务器提供一个IP租约。服务器租用期通常设置为几小时或几天。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">DHCP选择（请求）</span><code class=\"x-inline-highlight\">(DHCP Request)</code><br/>当客户主机从一个或多个DHCP服务器的提供中选择了一个IP租约时，它必须告诉其他的DHCP服务器它已经接受了一个租约提供。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">DHCP确认</span><code class=\"x-inline-highlight\">(DHCP Acknowledge/ACK)</code><br/>对DHCP Request报文进行响应，证实所要求的参数。一旦客户主机收到DHCP ACK后，配置过程就完成了。"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"运输层"}],["$","h3",null,{"className":"x-h2","children":"用户数据报协议 - UDP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">用户数据报协议</span><code class=\"x-inline-highlight\">(User Datagram Protocol, UDP)</code>提供无连接、不可靠的服务，支持单播、多播、广播；UDP面向报文，对应用进程交下来的报文既不合并也不拆分。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"UDP传输效率更高，其牺牲了可靠性来保证性能。UDP适用于实时应用，例如视频会议、电话等。<br/>UDP首部开销小，只包括源端口、目的端口、长度、校验和共<code class=\"x-inline-highlight\">8</code>字节。"}}],["$","$Ld",null,{"src":"tcpudp.jpg","width":"600","filterDarkTheme":true}],["$","h3",null,{"className":"x-h2","children":"传输控制协议 - TCP"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">传输控制协议</span><code class=\"x-inline-highlight\">(Transmission Control Protocol, TCP)</code>提供连接、可靠的服务，仅支持单播；TCP面向字节流，把应用进程交下来的报文仅当作字节流。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"TCP首部由<code class=\"x-inline-highlight\">20</code>字节固定首部和最大<code class=\"x-inline-highlight\">40</code>字节的扩展首部构成。下面是对一些字段的解释："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"序号、确认号、<code class=\"x-inline-highlight\">ACK</code>标志位（在Flags中）：用于实现TCP可靠传输；确认号指出期望收到对方下一个TCP报文段的数据载荷的第一个字节的序号，同时也是对之前收到的所有数据的确认。只有当<code class=\"x-inline-highlight\">ACK</code>取值为<code class=\"x-inline-highlight\">1</code>时，确认号字段才有效。TCP规定在连接建立后所有传送的报文段都必须把<code class=\"x-inline-highlight\">ACK</code>置<code class=\"x-inline-highlight\">1</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"数据偏移：占<code class=\"x-inline-highlight\">4</code>位，以<code class=\"x-inline-highlight\">4</code>字节为单位，用来指出TCP报文段的数据载荷部分的起始处距离TCP报文段的起始处有多远；这个字段实际上指出了TCP报文段的首部长度。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">SYN</code>标志位（在Flags中）：在TCP连接建立时用来同步序号。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">FIN</code>标志位（在Flags中）：用来释放TCP连接。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"窗口：占<code class=\"x-inline-highlight\">16</code>位，以字节为单位，用于流量控制；接收方给出的<span class=\"x-inline-strong\">接收窗口</span>值是发送方设置其发送窗口的依据之一（另一个是<span class=\"x-inline-strong\">拥塞窗口</span>）。"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"TCP连接建立"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"TCP通过三报文握手建立连接，目的是使双方能感知到对方的存在，同时协商一些参数。过程如下图所示："}}],["$","$Ld",null,{"src":"tcp1.jpg","width":"100%","filterDarkTheme":true}],["$","h4",null,{"className":"x-h3","children":"TCP连接释放"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"TCP通过四报文挥手释放连接。服务端响应客户端的释放请求后进入关闭等待状态，但如果TCP服务器进程还有数据要发送，服务端仍然会发送完最后的数据才会发送连接释放报文段。<br/>客户端确认了连接释放报文段后，还要经过<code class=\"x-inline-highlight\">2</code>倍<span class=\"x-inline-strong\">最长报文段寿命</span><code class=\"x-inline-highlight\">(Maximum Segment Lifetime, MSL)</code>才进入关闭状态，这是为了防止客户端确认报文丢失，如果直接进入关闭状态就无法接收到服务端重传的连接释放报文。过程如下图所示："}}],["$","$Ld",null,{"src":"tcp2.jpg","width":"100%","filterDarkTheme":true}],["$","h4",null,{"className":"x-h3","children":"TCP可靠传输"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"TCP综合了GBN和SR的一些机制来实现可靠传输。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"TCP的接收方也会维护接收窗口，这点与SR类似；但TCP采用与GBN类似的累计确认。<br/>需要注意的是，GBN中<code class=\"x-inline-highlight\">ACK n</code>表示序号为<code class=\"x-inline-highlight\">n</code>及其之前的分组都已经被正确接收，而TCP中<code class=\"x-inline-highlight\">ACK n</code>表示序号为<code class=\"x-inline-highlight\">n-1</code>及其之前的分组都已经被正确接收，接收方期望收到的最小序号的分组是序号<code class=\"x-inline-highlight\">n</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果接收方收到了失序到达的分组，会缓存这些分组（像SR一样），但不是对分组逐一确认，而是累计确认期望收到的最小序号的分组（类似GBN）。TCP同样只有一个超时计时器（像GBN一样），如果发生超时就会重传窗口内所有已发送但未得到确认的数据。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"不过，例如当发送方陆续发送序号<code class=\"x-inline-highlight\">n</code>之后的分组，但却收到了重复的<code class=\"x-inline-highlight\">ACK n</code>时，就可以判断分组<code class=\"x-inline-highlight\">n</code>一定因为某些原因没有被接收方收到。 此时发送方可以不等到重传计时器超时，而是在收到<code class=\"x-inline-highlight\">3</code>次重复确认后，就立即重传这个分组，这也被称为<span class=\"x-inline-strong\">快重传</span>。"}}],["$","h4",null,{"className":"x-h3","children":"TCP流量控制"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"传输速度快固然是好事，但如果发送方传输速度超过了接收方的接收能力就会导致丢包。TCP流量控制就是接收方通过<code class=\"x-inline-highlight\">ACK</code>设置头部中的窗口字段，根据自己接收缓存的大小，动态地调整发送方的发送窗口大小。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"一个特殊的情况是，当接收方通知发送方窗口大小为<code class=\"x-inline-highlight\">0</code>时，发送方就不再会发送新的数据。此时发送方不收到接收方调整接收窗口的报文，双方就会陷入互相等待。因此TCP为每个连接设有一个持续计时器，只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器；若持续计时器超时就发送一个零窗口探测报文，对方在确认探测报文时就给出现在的窗口值。"}}],["$","h4",null,{"className":"x-h3","children":"TCP拥塞控制"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果网络中对某一资源的需求超过了可用的资源，例如很多主机都向带宽有限的链路上发送数据，就会引起拥塞。TCP拥塞控制就是为了防止过多数据注入到网络当中。"}}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","h4",null,{"className":"x-h3","children":"拥塞控制与流量控制的区别"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"流量控制中接收方告知发送方的窗口大小称为<span class=\"x-inline-strong\">接收窗口</span><code class=\"x-inline-highlight\">(Receiver Window, rwnd)</code>，其反映了接收方的容量；<br/>拥塞控制中发送方根据网络拥塞程度调整的发送窗口大小称为<span class=\"x-inline-strong\">拥塞窗口</span><code class=\"x-inline-highlight\">(Congestion Window, cwnd)</code>，其反映了当前网络容量。"}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"流量控制是端到端的问题，由接收方主动控制发送方的发送窗口"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"拥塞控制是网络上的全局问题，由发送方主动根据对网络拥塞程度的估计调整发送窗口的值"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"发送方发送窗口大小应该取<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">min</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span>。"}}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-gray","children":[["$","h4",null,{"className":"x-h3","children":"拥塞控制的实现"}],["$","$Ld",null,{"src":"tcp3.jpg","width":"600","filterDarkTheme":true}],["$","h4",null,{"className":"x-h3","children":"慢开始"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"执行慢开始算法时拥塞窗口初始大小为<code class=\"x-inline-highlight\">1</code>，同时要设定慢开始门限值（图中是<code class=\"x-inline-highlight\">8</code>），拥塞窗口将指数增大到门限值。"}}],["$","h4",null,{"className":"x-h3","children":"拥塞避免"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"拥塞窗口增大到门限值后执行拥塞避免算法，此阶段拥塞窗口线性增加<code class=\"x-inline-highlight\">1</code>。<br/>随着拥塞窗口增大，可能会有报文段发生丢失，引起发送方重传计时器超时。因此发送方判断网络可能出现了拥塞，此时会："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"将慢开始门限值更新为发生拥塞时拥塞窗口的一半"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"将拥塞窗口置为<code class=\"x-inline-highlight\">1</code>，并重新开始执行慢开始算法"}}]}]]}],["$","div",null,{"className":"x-divider"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"慢开始和拥塞避免算法是1988年<code class=\"x-inline-highlight\">Tahoe</code>版本提出的TCP拥塞控制算法，1990年<code class=\"x-inline-highlight\">Reno</code>版本又增加了快重传和快恢复。"}}],["$","h4",null,{"className":"x-h3","children":"快重传"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"快重传就是使发送方尽快进行重传，而不是等超时重传计时器超时再重传。见上文TCP可靠传输。"}}],["$","h4",null,{"className":"x-h3","children":"快恢复"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"发送方一旦收到<code class=\"x-inline-highlight\">3</code>个重复的确认，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而执行快恢复算法。<br/>发送方将慢开始门限值和拥塞窗口大小调整为当前窗口大小的一半，并开始执行拥塞避免算法。"}}]]}],["$","h2",null,{"className":"x-h1","children":"参考资料"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"本文的部分内容、图片来源于："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<a href=\"https://www.bilibili.com/video/BV19E411D78Q\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">Bilibili - 王道计算机考研 计算机网络</a>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<a href=\"https://www.bilibili.com/video/BV1c4411d7jb\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">Bilibili - 计算机网络微课堂</a>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"《计算机网络自顶向下方法》（第七版）"}}]}]]}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"【计算机网络】协议总结 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/23d/protocols/"}]]
1:null
