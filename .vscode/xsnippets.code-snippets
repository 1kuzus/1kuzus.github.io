{
	// Place your Githubio 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"X.H1 tag": {
		"scope": "javascript,typescript",
		"prefix": "xh1",
		"body": [
			"<X.H1>$1</X.H1>",
		],
		"description": "X.H1 tag"
	},
	"X.H2 tag": {
		"scope": "javascript,typescript",
		"prefix": "xh2",
		"body": [
			"<X.H2>$1</X.H2>",
		],
		"description": "X.H2 tag"
	},
	"X.H3 tag": {
		"scope": "javascript,typescript",
		"prefix": "xh3",
		"body": [
			"<X.H3>$1</X.H3>",
		],
		"description": "X.H3 tag"
	},
	"X.P tag": {
		"scope": "javascript,typescript",
		"prefix": "xp",
		"body": [
			"<X.P>$1</X.P>",
		],
		"description": "X.P tag"
	},
	"X.Uli tag": {
		"scope": "javascript,typescript",
		"prefix": "xuli",
		"body": [
			"<X.Uli>$1</X.Uli>",
		],
		"description": "X.Uli tag"
	},
	"X.Oli tag": {
		"scope": "javascript,typescript",
		"prefix": "xoli",
		"body": [
			"<X.Oli>$1</X.Oli>",
		],
		"description": "X.Oli tag"
	},




	<X.CodeBlock
	language="python"
	code={`
	class SpatioTemporalConv(nn.Module):
		def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0, bias=True):
			super(SpatioTemporalConv, self).__init__()

			kernel_size = _triple(kernel_size)
			stride = _triple(stride)
			padding = _triple(padding)

			spatial_kernel_size =  [1, kernel_size[1], kernel_size[2]]
			spatial_stride =  [1, stride[1], stride[2]]
			spatial_padding =  [0, padding[1], padding[2]]

			temporal_kernel_size = [kernel_size[0], 1, 1]
			temporal_stride =  [stride[0], 1, 1]
			temporal_padding =  [padding[0], 0, 0]
	
			# 计算中间通道数
			# from the paper section 3.5
			intermed_channels = int(math.floor((kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels)/ \\
								(kernel_size[1]* kernel_size[2] * in_channels + kernel_size[0] * out_channels)))

			self.spatial_conv = nn.Conv3d(in_channels, intermed_channels, spatial_kernel_size, stride=spatial_stride, padding=spatial_padding, bias=bias)
			self.bn = nn.BatchNorm3d(intermed_channels)
			self.relu = nn.ReLU()
			self.temporal_conv = nn.Conv3d(intermed_channels, out_channels, temporal_kernel_size, stride=temporal_stride, padding=temporal_padding, bias=bias)
	
		def forward(self, x):
			x = self.relu(self.bn(self.spatial_conv(x)))
			x = self.temporal_conv(x)
			return x
	`}
/>
	"X.Codeblock tag": {
		"scope": "javascript,typescript",
		"prefix": "xflex",
		"body": [
			"<X.FlexRow>$1</X.FlexRow>",
		],
		"description": "X.FlexRow tag"
	},
	"X.FlexRow tag": {
		"scope": "javascript,typescript",
		"prefix": "xflex",
		"body": [
			"<X.FlexRow>$1</X.FlexRow>",
		],
		"description": "X.FlexRow tag"
	},
	"X.Formula tag": {
		"scope": "javascript,typescript",
		"prefix": "xformula",
		"body": [
			"<X.Formula text=\"$1\" />",
		],
		"description": "X.Formula tag"
	},
	"X.HighlightBlock tag": {
		"scope": "javascript,typescript",
		"prefix": "xh",
		"body": [
			"<X.HighlightBlock>$1</X.HighlightBlock>",
		],
		"description": "X.HighlightBlock tag"
	},
	"X.HighlightBlock tag with bgcolor": {
		"scope": "javascript,typescript",
		"prefix": "xhbg",
		"body": [
			"<X.HighlightBlock bgcolor=\"$1\"></X.HighlightBlock>",
		],
		"description": "X.HighlightBlock tag with bgcolor"
	},
	"X.Table tag": {
		"scope": "javascript,typescript",
		"prefix": "xtable",
		"body": [
			"<X.Table>",
			"\t<tr>",
			"\t\t<th>$1</th>",
			"\t</tr>",
			"\t<tr>",
			"\t\t<td></td>",
			"\t</tr>",
			"</X.Table>",
		],
		"description": "X.Table tag"
	},
	"X.Table from text": {
		"scope": "javascript,typescript",
		"prefix": "xtft",
		"body": [
			"<X.Table",
			"\tfromText={`",
			"\t$1||",
			"\t||",
			"\t`}",
			"/>",
		],
		"description": "X.Table from text"
	}
}