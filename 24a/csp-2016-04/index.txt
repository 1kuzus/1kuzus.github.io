2:I[55329,["954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","358","static/chunks/bc9e92e6-f77e57ee1a28b8d8.js","250","static/chunks/250-0ef8476c0fa8ee24.js","238","static/chunks/238-7a142b7f4afb0ef1.js","877","static/chunks/app/%5B...slug%5D/page-5c66bddbd33ba5c7.js"],""]
3:"$Sreact.suspense"
5:I[30389,["954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","358","static/chunks/bc9e92e6-f77e57ee1a28b8d8.js","250","static/chunks/250-0ef8476c0fa8ee24.js","238","static/chunks/238-7a142b7f4afb0ef1.js","877","static/chunks/app/%5B...slug%5D/page-5c66bddbd33ba5c7.js"],""]
6:I[5613,[],""]
8:I[31778,[],""]
9:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-440e3a3c1ed38f78.js"],"GlobalProvider"]
a:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-440e3a3c1ed38f78.js"],""]
7:["slug","24a/csp-2016-04","c"]
0:["f6OK2Q40_HFwkD7yUMLOu",[[["",{"children":[["slug","24a/csp-2016-04","c"],{"children":["__PAGE__?{\"slug\":[\"24a\",\"csp-2016-04\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24a/csp-2016-04","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"y-center-wrapper","children":[["$","h1",null,{"className":"x-title","children":"CSP 201604 T1-T4题解"}],["$","$3",null,{"fallback":["$","p",null,{"children":"Loading..."}],"children":["$","$3",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L4"}]}]]}],["$","$L5",null,{}]]}]],null]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/1661b6715a34de92.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$L9",null,{"children":[["$","$La",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0f7cce8b0dae9908.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/dac94f68c1ae2954.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[62029,["954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","358","static/chunks/bc9e92e6-f77e57ee1a28b8d8.js","250","static/chunks/250-0ef8476c0fa8ee24.js","238","static/chunks/238-7a142b7f4afb0ef1.js","877","static/chunks/app/%5B...slug%5D/page-5c66bddbd33ba5c7.js"],""]
d:Te76,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token comment">//折点数量</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">+=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
7
5 4 1 2 3 6 4

out:
2
*/</span>
e:T710,#include <iostream>
using namespace std;
int map[15][10];//方格图
int blk[4][4];//下落的方块
int offsetj;//板块图案最左边开始的时候是在方格图的哪一列
//测试下落offseti行时是否合法
bool check(int offseti)
{
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
        {
            int mapi=i+offseti,mapj=j+offsetj-1;
            if(blk[i][j]&&(map[mapi][mapj]||mapi>=15))
                return false;
        }
    return true;
}
int main()
{
    for(int i=0;i<15;i++)
        for(int j=0;j<10;j++)
            cin>>map[i][j];
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            cin>>blk[i][j];
    cin>>offsetj;
    int final_offseti=0;
    for(int offseti=0;offseti<20;offseti++)
    {
        if(!check(offseti))
        {
            final_offseti=offseti-1;
            break;
        }
    }
    for(int i=0;i<4;i++)
    for(int j=0;j<4;j++)
    {
        int mapi=i+final_offseti,mapj=j+offsetj-1;
        if(blk[i][j])
            map[mapi][mapj]=1;
    }
    for(int i=0;i<15;i++)
    {
        for(int j=0;j<10;j++)
            cout<<map[i][j]<<' ';
        cout<<endl;
    }
    return 0;
}
/*
in:
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0 0
1 1 1 0 0 0 1 1 1 1
0 0 0 0 1 0 0 0 0 0
0 0 0 0
0 1 1 1
0 0 0 1
0 0 0 0
3

out:
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0 0
1 1 1 1 1 1 1 1 1 1
0 0 0 0 1 1 0 0 0 0
*/
f:T2ed0,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//方格图</span>
<span class="token keyword">int</span> blk<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下落的方块</span>
<span class="token keyword">int</span> offsetj<span class="token punctuation">;</span><span class="token comment">//板块图案最左边开始的时候是在方格图的哪一列</span>
<span class="token comment">//测试下落offseti行时是否合法</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> offseti<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mapi<span class="token operator">=</span>i<span class="token operator">+</span>offseti<span class="token punctuation">,</span>mapj<span class="token operator">=</span>j<span class="token operator">+</span>offsetj<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>blk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>mapi<span class="token punctuation">]</span><span class="token punctuation">[</span>mapj<span class="token punctuation">]</span><span class="token operator">||</span>mapi<span class="token operator">>=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            cin<span class="token operator">>></span>blk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>offsetj<span class="token punctuation">;</span>
    <span class="token keyword">int</span> final_offseti<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> offseti<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>offseti<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>offseti<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>offseti<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            final_offseti<span class="token operator">=</span>offseti<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mapi<span class="token operator">=</span>i<span class="token operator">+</span>final_offseti<span class="token punctuation">,</span>mapj<span class="token operator">=</span>j<span class="token operator">+</span>offsetj<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>blk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            map<span class="token punctuation">[</span>mapi<span class="token punctuation">]</span><span class="token punctuation">[</span>mapj<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            cout<span class="token operator">&lt;&lt;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0 0
1 1 1 0 0 0 1 1 1 1
0 0 0 0 1 0 0 0 0 0
0 0 0 0
0 1 1 1
0 0 0 1
0 0 0 0
3

out:
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0 0
1 1 1 1 1 1 1 1 1 1
0 0 0 0 1 1 0 0 0 0
*/</span>
10:T9b9,#include <iostream>
#include <vector>
#include <stack>
using namespace std;
int p;
string home;//home dir
string dirs[15];
//joinSlash合并多个斜线
string joinSlash(string str)
{
    string ans=str.substr(0,1);
    char prev=str[0];
    for(int i=1;i<str.length();i++)
    {
        if(str[i]=='/'&&prev=='/') continue;
        ans+=str[i];
        prev=str[i];
    }
    return ans;
}
//splitSlash输入一个字符串，并按斜杠拆分成字符串数组
vector<string> splitSlash(string str)
{
    vector<string> parts;
    string part;
    for(int i=1;i<str.length();i++)//跳过第一位'/'
    {
        if(str[i]=='/') parts.push_back(part),part="";
        else part+=str[i];
    }
    return parts;
}
//parseDots处理.和..
string parseDots(string str)
{
    string ans;
    vector<string> str_parts=splitSlash(str);
    stack<string> ans_parts;//最终组成答案的路径栈，.会被忽略，..会和上一级目录抵消
    for(auto part:str_parts)
    {
        if(part==".") continue;
        else if(part==".."&&!ans_parts.empty())ans_parts.pop();
        else if(part=="..") continue;//根目录的上一级目录是它本身
        else ans_parts.push(part);
    }
    while(!ans_parts.empty())
    {
        string part=ans_parts.top();
        ans_parts.pop();
        ans="/"+part+ans;
    }
    //如果结果是空，说明是根目录
    return ans.length()?ans:"/";
}
int main()
{
    cin>>p>>home;
    getchar();
    home=joinSlash(home+"/");//不确定输入的格式，对当前目录合并一次斜线，并保证当前目录以'/'结尾
    for(int i=0;i<p;i++)
    {
        getline(cin,dirs[i]);
    }
    for(int i=0;i<p;i++)
    {
        //若路径为空字符串，则正规化操作的结果是当前目录
        if(!dirs[i].length())
        {
            cout<<parseDots(joinSlash(home))<<endl;
            continue;
        }

        //1.合并斜线
        string str=joinSlash(dirs[i]+"/");//保证输入路径以'/'结尾，方便split函数处理

        //2.得到最终的绝对路径，但是不处理.和..
        bool isAbsPath=(str[0]=='/');//是否为绝对路径
        if(!isAbsPath) str=home+str;

        //3.处理.和..
        str=parseDots(str);

        cout<<str<<endl;
    }
    return 0;
}
/*
in:
7
/d2/d3////
/d2/d4/f1
../d4/f1
/d1/./f1
/d1///f1
/d1/
///
/d1/../../d2

out:
/d2/d4/f1
/d2/d4/f1
/d1/f1
/d1/f1
/d1
/
/d2

in:
4
/
../.././dir1/

/../.././dir1/
/dir2////../file3

out:
/dir1
/
/dir1
/file3
*/
11:T3d72,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> p<span class="token punctuation">;</span>
string home<span class="token punctuation">;</span><span class="token comment">//home dir</span>
string dirs<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//joinSlash合并多个斜线</span>
string <span class="token function">joinSlash</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    string ans<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> prev<span class="token operator">=</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token operator">&amp;&amp;</span>prev<span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        ans<span class="token operator">+=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        prev<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//splitSlash输入一个字符串，并按斜杠拆分成字符串数组</span>
vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">splitSlash</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> parts<span class="token punctuation">;</span>
    string part<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//跳过第一位'/'</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">)</span> parts<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">,</span>part<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> part<span class="token operator">+=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> parts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//parseDots处理.和..</span>
string <span class="token function">parseDots</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    string ans<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str_parts<span class="token operator">=</span><span class="token function">splitSlash</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">&lt;</span>string<span class="token operator">></span> ans_parts<span class="token punctuation">;</span><span class="token comment">//最终组成答案的路径栈，.会被忽略，..会和上一级目录抵消</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> part<span class="token operator">:</span>str_parts<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>part<span class="token operator">==</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>part<span class="token operator">==</span><span class="token string">".."</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>ans_parts<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ans_parts<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>part<span class="token operator">==</span><span class="token string">".."</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//根目录的上一级目录是它本身</span>
        <span class="token keyword">else</span> ans_parts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ans_parts<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        string part<span class="token operator">=</span>ans_parts<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans_parts<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">+</span>part<span class="token operator">+</span>ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果结果是空，说明是根目录</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>ans<span class="token operator">:</span><span class="token string">"/"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>p<span class="token operator">>></span>home<span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    home<span class="token operator">=</span><span class="token function">joinSlash</span><span class="token punctuation">(</span>home<span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不确定输入的格式，对当前目录合并一次斜线，并保证当前目录以'/'结尾</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//若路径为空字符串，则正规化操作的结果是当前目录</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token function">parseDots</span><span class="token punctuation">(</span><span class="token function">joinSlash</span><span class="token punctuation">(</span>home<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//1.合并斜线</span>
        string str<span class="token operator">=</span><span class="token function">joinSlash</span><span class="token punctuation">(</span>dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保证输入路径以'/'结尾，方便split函数处理</span>

        <span class="token comment">//2.得到最终的绝对路径，但是不处理.和..</span>
        <span class="token keyword">bool</span> isAbsPath<span class="token operator">=</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否为绝对路径</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isAbsPath<span class="token punctuation">)</span> str<span class="token operator">=</span>home<span class="token operator">+</span>str<span class="token punctuation">;</span>

        <span class="token comment">//3.处理.和..</span>
        str<span class="token operator">=</span><span class="token function">parseDots</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

        cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
7
/d2/d3////
/d2/d4/f1
../d4/f1
/d1/./f1
/d1///f1
/d1/
///
/d1/../../d2

out:
/d2/d4/f1
/d2/d4/f1
/d1/f1
/d1/f1
/d1
/
/d2

in:
4
/
../.././dir1/

/../.././dir1/
/dir2////../file3

out:
/dir1
/
/dir1
/file3
*/</span>
12:T781,#include <iostream>
#include <cstring>
#include <queue>
using namespace std;
int n,m,t;
int dir[5]={0,1,0,-1,0};//相邻两个元素组成一对上/右/下/左方向
int safe[105][105][2];
inline bool isSafe(int i,int j,int step)
{
    return
        safe[i][j][0]==safe[i][j][1]&&safe[i][j][0]==0||
        !(safe[i][j][0]<=step&&step<=safe[i][j][1]);
}
struct POS{
    int i,j,step;//走到这个地方需要的步数
};
queue<POS> q;
int max_step;//维护已经出队的最大step值
int visit[105][105];//使得对于同一step值，BFS过程加入队列的元素互不相同
int main()
{
    cin>>n>>m>>t;
    for(int i=0;i<t;i++)
    {
        //第r行第c列的方格在第a个时刻到第b个时刻之间是危险的，包括a和b，游戏开始时的时刻为0
        int r,c,a,b;
        cin>>r>>c>>a>>b;
        safe[r-1][c-1][0]=a,safe[r-1][c-1][1]=b;
    }
    q.push((POS){0,0,0});
    while(!q.empty())
    {
        POS cur=q.front();
        q.pop();
        //终止条件
        if(cur.i==n-1&&cur.j==m-1)
        {
            cout<<cur.step<<endl;
            break;
        }
        //当max_step与队首元素的step不一致时(cur.step==max_step+1)，说明所有step<=max_step的状态都考虑完了
        //此时应该重置visit，并更新max_step为cur.step
        if(max_step!=cur.step)
        {
            max_step=cur.step;
            memset(visit,0,sizeof(visit));
        }
        for(int i=0;i<4;i++)
        {
            int di=dir[i],dj=dir[i+1];
            int new_i=cur.i+di,new_j=cur.j+dj;
            if(0<=new_i&&new_i<n&&0<=new_j&&new_j<m)
            {
                if(!visit[new_i][new_j]&&isSafe(new_i,new_j,cur.step+1))
                {
                    visit[new_i][new_j]=1;
                    q.push((POS){new_i,new_j,cur.step+1});
                }
            }
        }
    }
    return 0;
}
/*
in:
3 3 3
2 1 1 1
1 3 2 10
2 2 2 10

out:
6
*/
13:T3cf1,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
<span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//相邻两个元素组成一对上/右/下/左方向</span>
<span class="token keyword">int</span> safe<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">isSafe</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span>
        safe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>safe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>safe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>
        <span class="token operator">!</span><span class="token punctuation">(</span>safe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>step<span class="token operator">&amp;&amp;</span>step<span class="token operator">&lt;=</span>safe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">POS</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>step<span class="token punctuation">;</span><span class="token comment">//走到这个地方需要的步数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
queue<span class="token operator">&lt;</span>POS<span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> max_step<span class="token punctuation">;</span><span class="token comment">//维护已经出队的最大step值</span>
<span class="token keyword">int</span> visit<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使得对于同一step值，BFS过程加入队列的元素互不相同</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//第r行第c列的方格在第a个时刻到第b个时刻之间是危险的，包括a和b，游戏开始时的时刻为0</span>
        <span class="token keyword">int</span> r<span class="token punctuation">,</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>r<span class="token operator">>></span>c<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
        safe<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">,</span>safe<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>POS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        POS cur<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//终止条件</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>i<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>cur<span class="token punctuation">.</span>j<span class="token operator">==</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>cur<span class="token punctuation">.</span>step<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//当max_step与队首元素的step不一致时(cur.step==max_step+1)，说明所有step&lt;=max_step的状态都考虑完了</span>
        <span class="token comment">//此时应该重置visit，并更新max_step为cur.step</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max_step<span class="token operator">!=</span>cur<span class="token punctuation">.</span>step<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            max_step<span class="token operator">=</span>cur<span class="token punctuation">.</span>step<span class="token punctuation">;</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>visit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> di<span class="token operator">=</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dj<span class="token operator">=</span>dir<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> new_i<span class="token operator">=</span>cur<span class="token punctuation">.</span>i<span class="token operator">+</span>di<span class="token punctuation">,</span>new_j<span class="token operator">=</span>cur<span class="token punctuation">.</span>j<span class="token operator">+</span>dj<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;=</span>new_i<span class="token operator">&amp;&amp;</span>new_i<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">&lt;=</span>new_j<span class="token operator">&amp;&amp;</span>new_j<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>new_i<span class="token punctuation">]</span><span class="token punctuation">[</span>new_j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">isSafe</span><span class="token punctuation">(</span>new_i<span class="token punctuation">,</span>new_j<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    visit<span class="token punctuation">[</span>new_i<span class="token punctuation">]</span><span class="token punctuation">[</span>new_j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>POS<span class="token punctuation">)</span><span class="token punctuation">{</span>new_i<span class="token punctuation">,</span>new_j<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
3 3 3
2 1 1 1
1 3 2 10
2 2 2 10

out:
6
*/</span>
4:[["$","h2",null,{"className":"x-h1","children":"T1 折点计数"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Lc",null,{"className":"x-codeblock-header-copy","text":"#include <iostream>\nusing namespace std;\nint n,a[1005];\nint ans;//折点数量\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>a[i];\n    }\n    if(n>2)\n    {\n        for(int i=2;i<n;i++)\n        {\n            ans+=(a[i]>a[i-1])^(a[i-1]>a[i-2]);\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n/*\nin:\n7\n5 4 1 2 3 6 4\n\nout:\n2\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T2 俄罗斯方块"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Lc",null,{"className":"x-codeblock-header-copy","text":"$e"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T3 路径解析"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Lc",null,{"className":"x-codeblock-header-copy","text":"$10"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T4 游戏"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Lc",null,{"className":"x-codeblock-header-copy","text":"$12"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"CSP 201604 T1-T4题解 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24a/csp-2016-04/"}]]
1:null
