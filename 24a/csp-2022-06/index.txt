2:I[579,["2202","static/chunks/2202-a70b76e16443b83b.js","9919","static/chunks/9919-fdd433cceba36e69.js","9571","static/chunks/app/(posts)/24a/csp-2022-06/page-c9ce5646cd66aec7.js"],""]
8:I[5613,[],""]
9:I[1778,[],""]
a:I[389,["5250","static/chunks/5250-aaac40ffcdef4b77.js","1993","static/chunks/app/(posts)/layout-a1fc8e57c0d159ff.js"],""]
b:I[5694,["5250","static/chunks/5250-aaac40ffcdef4b77.js","3185","static/chunks/app/layout-16a924fc60f8c1d3.js"],"GlobalProvider"]
c:I[397,["5250","static/chunks/5250-aaac40ffcdef4b77.js","3185","static/chunks/app/layout-16a924fc60f8c1d3.js"],""]
3:T790,<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>4:Tf46,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> avg<span class="token punctuation">,</span>avg_sq<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        avg<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        avg_sq<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    avg<span class="token operator">/=</span>n<span class="token punctuation">,</span>avg_sq<span class="token operator">/=</span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>avg_sq<span class="token operator">-</span>avg<span class="token operator">*</span>avg<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
7
-4 293 0 -22 12 654 1000

out:
-0.7485510379073613
0.04504284674812264
-0.7378629047806881
-0.7966476369773906
-0.7057985054006686
1.0096468614303775
1.9341703768876082
*/</span>
5:T2a39,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>s<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//树的坐标</span>
<span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//藏宝图</span>
unordered_set<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> st<span class="token punctuation">;</span><span class="token comment">//用一个long long存储坐标x*(1e9+1)+y</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1e9L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>y<span class="token operator">+</span>j<span class="token punctuation">;</span>
            <span class="token comment">//绿化图坐标(x+i,y+j)与藏宝图上坐标(i,j)不对应，匹配失败</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">!=</span>st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span>g<span class="token punctuation">[</span>s<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>l<span class="token operator">>></span>s<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1e9L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">+</span>s<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>y<span class="token operator">+</span>s<span class="token operator">&lt;=</span>l<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">+=</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
5 100 2
0 0
1 1
2 2
3 3
4 4
0 0 1
0 1 0
1 0 0

out:
3
*/</span>
6:T61cc,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">505</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">;</span>
string s<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">USER</span><span class="token punctuation">{</span>
    string username<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ng<span class="token punctuation">;</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> gset<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ROLE</span><span class="token punctuation">{</span>
    string rolename<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nv<span class="token punctuation">,</span>no<span class="token punctuation">,</span>nn<span class="token punctuation">;</span><span class="token comment">//操作、资源种类、资源名称</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> vset<span class="token punctuation">,</span>oset<span class="token punctuation">,</span>nset<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> vadmin<span class="token punctuation">,</span>oadmin<span class="token punctuation">;</span><span class="token comment">//允许的操作/资源是否含有"*"</span>
<span class="token punctuation">}</span>role<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">RBAC</span><span class="token punctuation">{</span>
    string rolename<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ns<span class="token punctuation">;</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> sset_user<span class="token punctuation">;</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> sset_group<span class="token punctuation">;</span>
<span class="token punctuation">}</span>rbac<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//role-based access control</span>
<span class="token keyword">struct</span> <span class="token class-name">QUERY</span><span class="token punctuation">{</span>
    USER user<span class="token punctuation">;</span>
    string v<span class="token punctuation">,</span>o<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> rolemap<span class="token punctuation">;</span><span class="token comment">//角色名--id</span>
<span class="token comment">//判断一个角色能否对某个资源执行某个操作</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>roleid<span class="token punctuation">,</span>string <span class="token operator">&amp;</span>qv<span class="token punctuation">,</span>string <span class="token operator">&amp;</span>qo<span class="token punctuation">,</span>string <span class="token operator">&amp;</span>qn<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    ROLE <span class="token operator">&amp;</span>r<span class="token operator">=</span>role<span class="token punctuation">[</span>roleid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ok<span class="token operator">&amp;=</span>r<span class="token punctuation">.</span>vadmin<span class="token operator">||</span>r<span class="token punctuation">.</span>vset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>qv<span class="token punctuation">)</span><span class="token operator">!=</span>r<span class="token punctuation">.</span>vset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    ok<span class="token operator">&amp;=</span>r<span class="token punctuation">.</span>oadmin<span class="token operator">||</span>r<span class="token punctuation">.</span>oset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>qo<span class="token punctuation">)</span><span class="token operator">!=</span>r<span class="token punctuation">.</span>oset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>nn<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    ok<span class="token operator">&amp;=</span>r<span class="token punctuation">.</span>nset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>qn<span class="token punctuation">)</span><span class="token operator">!=</span>r<span class="token punctuation">.</span>nset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> <span class="token function">query</span><span class="token punctuation">(</span>QUERY <span class="token operator">&amp;</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        RBAC <span class="token operator">&amp;</span>ac<span class="token operator">=</span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> roleid<span class="token operator">=</span>rolemap<span class="token punctuation">[</span>ac<span class="token punctuation">.</span>rolename<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>sset_user<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token operator">==</span>ac<span class="token punctuation">.</span>sset_user<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//q.user.username不在ac.sset_user中</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>elem<span class="token operator">:</span>ac<span class="token punctuation">.</span>sset_group<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>gset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">!=</span>ac<span class="token punctuation">.</span>sset_group<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//且q.user.gset与ac.sset_group没有交集，就跳过对这个角色检查</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>roleid<span class="token punctuation">,</span>q<span class="token punctuation">.</span>v<span class="token punctuation">,</span>q<span class="token punctuation">.</span>o<span class="token punctuation">,</span>q<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rolename<span class="token punctuation">;</span>
        rolemap<span class="token punctuation">[</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rolename<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nv<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nv<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">)</span> role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vadmin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>no<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>no<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>oset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">)</span> role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>oadmin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nn<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nn<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rolename<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ns<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ns<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">char</span> typ<span class="token punctuation">;</span>
            cin<span class="token operator">>></span>typ<span class="token operator">>></span>s<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>typ<span class="token operator">==</span><span class="token char">'u'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sset_user<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sset_group<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        QUERY q<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>ng<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>ng<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>gset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cin<span class="token operator">>></span>q<span class="token punctuation">.</span>v<span class="token operator">>></span>q<span class="token punctuation">.</span>o<span class="token operator">>></span>q<span class="token punctuation">.</span>n<span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token function">query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
1 2 3
op 1 open 1 door 0
op 1 g sre
op 1 u xiaop
xiaoc 2 sre ops open door room302
xiaop 1 ops open door room501
xiaoc 2 sre ops remove door room302

out:
1
1
0
*/</span>
7:Tf8f7,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">500005</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">lc</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//左子</span>
<span class="token keyword">int</span> <span class="token function">rc</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//右子</span>

<span class="token keyword">struct</span> <span class="token class-name">POS</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token keyword">friend</span> POS <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>POS a<span class="token punctuation">,</span>POS b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        POS ans<span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span>x<span class="token operator">=</span>a<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span>y<span class="token operator">=</span>a<span class="token punctuation">.</span>y<span class="token operator">+</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">TAGVAL</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> mat<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//省略了齐次坐标的第三行[0 0 1]</span>
<span class="token punctuation">}</span><span class="token keyword">const</span> I<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

TAGVAL <span class="token function">T</span><span class="token punctuation">(</span><span class="token keyword">double</span> dx<span class="token punctuation">,</span><span class="token keyword">double</span> dy<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> TAGVAL<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>dx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>dy<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//平移</span>
TAGVAL <span class="token function">R</span><span class="token punctuation">(</span><span class="token keyword">double</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> TAGVAL<span class="token punctuation">{</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//绕原点旋转</span>
TAGVAL <span class="token function">S</span><span class="token punctuation">(</span><span class="token keyword">double</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> TAGVAL<span class="token punctuation">{</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//绕原点缩放</span>

<span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>
    POS sum<span class="token punctuation">;</span><span class="token comment">//和(x,y)</span>
    POS sqs<span class="token punctuation">;</span><span class="token comment">//平方和(x**2,y**2)</span>
    <span class="token keyword">double</span> xys<span class="token punctuation">;</span><span class="token comment">//交叉项和xy</span>
    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span><span class="token comment">//是否打了tag</span>
    TAGVAL tag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//matmul 矩阵乘</span>
TAGVAL <span class="token function">mm</span><span class="token punctuation">(</span>TAGVAL A<span class="token punctuation">,</span>TAGVAL B<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TAGVAL result<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>B<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>B<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    result<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+=</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+=</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//对向量p应用仿射变换M，变为Mp</span>
POS <span class="token function">affine</span><span class="token punctuation">(</span>POS p<span class="token punctuation">,</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">,</span><span class="token keyword">double</span> c<span class="token punctuation">,</span><span class="token keyword">double</span> d<span class="token punctuation">,</span><span class="token keyword">double</span> e<span class="token punctuation">,</span><span class="token keyword">double</span> g<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//M=[a b c</span>
    <span class="token comment">//   d e g      (f变量名被占用了)</span>
    <span class="token comment">//   0 0 1]     (省略了齐次坐标的第三行)</span>
    <span class="token keyword">return</span> POS<span class="token punctuation">{</span>a<span class="token operator">*</span>p<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token operator">*</span>p<span class="token punctuation">.</span>y<span class="token operator">+</span>c<span class="token punctuation">,</span>d<span class="token operator">*</span>p<span class="token punctuation">.</span>x<span class="token operator">+</span>e<span class="token operator">*</span>p<span class="token punctuation">.</span>y<span class="token operator">+</span>g<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//合并tgv至 &lt;管辖[l,r]区间的f节点> 的tag值，同时更新树上值</span>
<span class="token keyword">void</span> <span class="token function">mergetag</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span>TAGVAL tgv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//原本TAG(M1)，父亲分发下TAG(M2)</span>
    <span class="token comment">//现在TAG(M2*M1)</span>
    <span class="token keyword">int</span> len<span class="token operator">=</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    POS sum<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">,</span>sqs<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token punctuation">;</span>
    <span class="token keyword">double</span> xys<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token punctuation">;</span>
    <span class="token keyword">double</span> a<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span><span class="token function">affine</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">*</span>len<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>g<span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">=</span><span class="token function">affine</span><span class="token punctuation">(</span>sqs<span class="token punctuation">,</span>a<span class="token operator">*</span>a<span class="token punctuation">,</span>b<span class="token operator">*</span>b<span class="token punctuation">,</span>c<span class="token operator">*</span>c<span class="token operator">*</span>len<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token operator">*</span>b<span class="token operator">*</span>xys<span class="token punctuation">,</span>d<span class="token operator">*</span>d<span class="token punctuation">,</span>e<span class="token operator">*</span>e<span class="token punctuation">,</span>g<span class="token operator">*</span>g<span class="token operator">*</span>len<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">*</span>e<span class="token operator">*</span>xys<span class="token punctuation">)</span>
               <span class="token operator">+</span><span class="token function">affine</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>b<span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">*</span>g<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>e<span class="token operator">*</span>g<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">=</span>a<span class="token operator">*</span>d<span class="token operator">*</span>sqs<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token operator">*</span>e<span class="token operator">*</span>sqs<span class="token punctuation">.</span>y<span class="token operator">+</span>c<span class="token operator">*</span>g<span class="token operator">*</span>len<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">*</span>e<span class="token operator">+</span>b<span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token operator">*</span>xys<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">*</span>g<span class="token operator">+</span>c<span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">*</span>g<span class="token operator">+</span>c<span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span>tgv<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//M2*M1</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//用子节点更新 &lt;f节点></span>
<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tree<span class="token punctuation">[</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">=</span>tree<span class="token punctuation">[</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">=</span>tree<span class="token punctuation">[</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//将 &lt;管辖[l,r]区间的f节点> 的tag值下发至子节点</span>
<span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">mergetag</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mergetag</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token operator">=</span>I<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//在tree[f]建立一个管辖[l,r]的节点</span>
<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token operator">=</span>I<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">=</span>POS<span class="token punctuation">{</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">*</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//将tgv合并至区间[ql,qr]的tag值，当前在管辖[l,r]区间的f节点</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span>TAGVAL tgv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//当前区间是查询区间的子集，修改</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">mergetag</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问到有标记的节点就下放</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>qr<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//求区间[ql,qr]的和，当前在管辖[l,r]区间的f节点</span>
POS <span class="token function">getsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//当前区间是查询区间的子集，返回</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问到有标记的节点就下放</span>
    POS ans<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsum</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>qr<span class="token operator">></span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsum</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//求区间[ql,qr]的平方和，当前在管辖[l,r]区间的f节点</span>
POS <span class="token function">getsqs</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//当前区间是查询区间的子集，返回</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问到有标记的节点就下放</span>
    POS ans<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsqs</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>qr<span class="token operator">></span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsqs</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    cout<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token punctuation">.</span><span class="token function">setf</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>fixed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> q<span class="token punctuation">;</span>
        <span class="token keyword">double</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>theta<span class="token punctuation">,</span>k<span class="token punctuation">,</span>y0<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>q<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">T</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>theta<span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span>I<span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">,</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">R</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旋转</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>k<span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span>I<span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">,</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//缩放</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>theta<span class="token operator">>></span>y0<span class="token punctuation">;</span>
            <span class="token keyword">double</span> t<span class="token operator">=</span><span class="token function">tan</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span><span class="token punctuation">{</span>
                <span class="token number">1</span><span class="token operator">-</span>t<span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>y0<span class="token operator">*</span>t<span class="token punctuation">,</span>
                <span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">,</span>   t<span class="token operator">*</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>y0<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>t<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>theta<span class="token operator">>></span>y0<span class="token punctuation">;</span>
            <span class="token keyword">double</span> t<span class="token operator">=</span><span class="token function">tan</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span><span class="token punctuation">{</span>
                <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span>  <span class="token operator">-</span>y0<span class="token operator">*</span>t<span class="token punctuation">,</span>
                t<span class="token punctuation">,</span> t<span class="token operator">*</span>t<span class="token punctuation">,</span> y0
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>t<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            POS sum<span class="token operator">=</span><span class="token function">getsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">.</span>x<span class="token operator">/</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">.</span>y<span class="token operator">/</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
            POS sum<span class="token operator">=</span><span class="token function">getsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            POS sqs<span class="token operator">=</span><span class="token function">getsqs</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">double</span> ans<span class="token operator">=</span>sqs<span class="token punctuation">.</span>x<span class="token operator">+</span>sqs<span class="token punctuation">.</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token operator">*</span>sum<span class="token punctuation">.</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>b<span class="token operator">*</span>sum<span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
10 20
26.389153 -31.339463
-98.664509 -58.061567
16.023894 14.489272
-67.840842 -74.793309
19.790708 -87.062719
31.541964 88.441505
-75.918013 24.526470
57.288832 -39.033977
38.274184 -67.446883
-90.906424 -73.528612
3 4 4 32.938694 -6.774595 1.000221
1 2 6 69.965610 -39.563795
4 3 10 -1.399075 38.282976
4 6 7 -1.016301 61.080461
7 9 10 76.549276 22.856189
7 3 7 -96.501727 5.585970
6 8 9
4 2 8 1.215917 -90.918350
7 4 8 55.948842 38.373278
1 5 9 -83.845362 -6.619437
5 6 9 -1.202044 -90.146760
7 1 4 -81.574047 -56.555229
3 1 5 75.690820 60.620104 0.980271
4 5 9 1.512746 89.531420
5 2 5 0.071305 79.784122
6 2 4
1 3 6 90.288492 72.829660
6 4 4
7 1 10 -51.991614 -6.732535
5 5 6 0.087950 71.164056

out:
21029.678359
120220.146461
-14.172376 -63.985055
95006.134951
52111.910474
2.849235 79.987632
35.040886 148.667661
302347.683678
*/</span>
0:["SRkklnWGqndd2Jk5RZEor",[[["",{"children":["(posts)",{"children":["24a",{"children":["csp-2022-06",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(posts)",{"children":["24a",{"children":["csp-2022-06",{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","h1",null,{"className":"x-title","children":"CSP 202206 T1-T5题解"}],["$","h2",null,{"className":"x-h1","children":"T1 归一化处理"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"用了一下方差的变形："}}],["$","div",null,{"className":"x-formula","dangerouslySetInnerHTML":{"__html":"$3"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$4"}}]}]}],["$","h2",null,{"className":"x-h1","children":"T2 寻宝！大冒险！"}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}]}],["$","h2",null,{"className":"x-h1","children":"T3 角色授权"}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$6"}}]}]}],["$","h2",null,{"className":"x-h1","children":"T5 PS无限版"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"线段树题，因为涉及到查询平方和，还需要额外维护乘积交叉项；题目中涉及的二维坐标变换可以在齐次坐标下使用三阶矩阵表示，由于第三行总是<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>，在下面代码中省略，只用<code class=\"x-inline-highlight\">mat[6]</code>表示一个三阶矩阵。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$7"}}]}]}]],null]]},["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","24a","children","csp-2022-06","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bb28853473d225b5.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","24a","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"id":"post-layout","children":[["$","div",null,{"id":"main","className":"y-center-wrapper","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$La",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0f7cce8b0dae9908.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/615f855f1eaa8d62.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/1279e9e476ea3436.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"CSP 202206 T1-T5题解 - 归一化处理 寻宝！大冒险！ 角色授权 光线追踪 PS无限版 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24a/csp-2022-06/"}]]
1:null
