2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-3464524d86b927fb.js"],""]
3:I[28270,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","931","static/chunks/app/page-e1a086b38e584954.js"],""]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-3464524d86b927fb.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8e85c0ce7e4f5a90.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8e85c0ce7e4f5a90.js"],""]
8:["slug","24a/csp-2022-06","c"]
0:["d2m0sT01PQNRZYawhsF8j",[[["",{"children":[["slug","24a/csp-2022-06","c"],{"children":["__PAGE__?{\"slug\":[\"24a\",\"csp-2022-06\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24a/csp-2022-06","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"CSP 202206 T1-T5题解"}],["$","$L3",null,{"path":"/24a/csp-2022-06/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/125f9fa1c5ad69a1.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0df77261f39dbb70.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
e:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-3464524d86b927fb.js"],""]
d:T790,<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>f:Tf46,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> avg<span class="token punctuation">,</span>avg_sq<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        avg<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        avg_sq<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    avg<span class="token operator">/=</span>n<span class="token punctuation">,</span>avg_sq<span class="token operator">/=</span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>avg_sq<span class="token operator">-</span>avg<span class="token operator">*</span>avg<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
7
-4 293 0 -22 12 654 1000

out:
-0.7485510379073613
0.04504284674812264
-0.7378629047806881
-0.7966476369773906
-0.7057985054006686
1.0096468614303775
1.9341703768876082
*/</span>
10:T456,#include <iostream>
#include <unordered_set>
using namespace std;
int n,l,s,ans;
int t[1005][2];//树的坐标
int g[55][55];//藏宝图
unordered_set<long long> st;//用一个long long存储坐标x*(1e9+1)+y
bool check(int x,int y)
{
    for(int i=0;i<=s;i++)
    {
        for(int j=0;j<=s;j++)
        {
            long long p=(1e9L+1)*(x+i)+y+j;
            //绿化图坐标(x+i,y+j)与藏宝图上坐标(i,j)不对应，匹配失败
            if((st.find(p)!=st.end())^g[s-i][j])
            {
                return false;
            }
        }
    }
    return true;
}
int main()
{
    cin>>n>>l>>s;
    for(int i=0;i<n;i++)
    {
        cin>>t[i][0]>>t[i][1];
        long long p=(1e9L+1)*t[i][0]+t[i][1];
        st.insert(p);
    }
    for(int i=0;i<=s;i++)
    {
        for(int j=0;j<=s;j++)
        {
            cin>>g[i][j];
        }
    }
    for(int i=0;i<n;i++)
    {
        int x=t[i][0],y=t[i][1];
        if(x+s<=l&&y+s<=l)
        {
            ans+=check(x,y);
        }
    }
    cout<<ans<<endl;
    return 0;
}
/*
in:
5 100 2
0 0
1 1
2 2
3 3
4 4
0 0 1
0 1 0
1 0 0

out:
3
*/
11:T2a39,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>s<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//树的坐标</span>
<span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//藏宝图</span>
unordered_set<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> st<span class="token punctuation">;</span><span class="token comment">//用一个long long存储坐标x*(1e9+1)+y</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1e9L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>y<span class="token operator">+</span>j<span class="token punctuation">;</span>
            <span class="token comment">//绿化图坐标(x+i,y+j)与藏宝图上坐标(i,j)不对应，匹配失败</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">!=</span>st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span>g<span class="token punctuation">[</span>s<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>l<span class="token operator">>></span>s<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1e9L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">+</span>s<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>y<span class="token operator">+</span>s<span class="token operator">&lt;=</span>l<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">+=</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
5 100 2
0 0
1 1
2 2
3 3
4 4
0 0 1
0 1 0
1 0 0

out:
3
*/</span>
12:Tcd3,#include <iostream>
#include <unordered_set>
#include <unordered_map>
#define N 505
using namespace std;
int n,m,q;
string s;
struct USER{
    string username;
    int ng;
    unordered_set<string> gset;
};
struct ROLE{
    string rolename;
    int nv,no,nn;//操作、资源种类、资源名称
    unordered_set<string> vset,oset,nset;
    bool vadmin,oadmin;//允许的操作/资源是否含有"*"
}role[N];
struct RBAC{
    string rolename;
    int ns;
    unordered_set<string> sset_user;
    unordered_set<string> sset_group;
}rbac[N];//role-based access control
struct QUERY{
    USER user;
    string v,o,n;
};
unordered_map<string,int> rolemap;//角色名--id
//判断一个角色能否对某个资源执行某个操作
bool check(int &roleid,string &qv,string &qo,string &qn)
{
    bool ok=true;
    ROLE &r=role[roleid];
    ok&=r.vadmin||r.vset.find(qv)!=r.vset.end();
    if(!ok) return false;
    ok&=r.oadmin||r.oset.find(qo)!=r.oset.end();
    if(!ok) return false;
    if(r.nn==0) return true;
    ok&=r.nset.find(qn)!=r.nset.end();
    return ok;
}
bool query(QUERY &q)
{
    for(int i=0;i<m;i++)
    {
        RBAC &ac=rbac[i];
        int roleid=rolemap[ac.rolename];
        if(ac.sset_user.find(q.user.username)==ac.sset_user.end())//q.user.username不在ac.sset_user中
        {
            bool ok=false;
            for(auto &elem:ac.sset_group)
            {
                if(q.user.gset.find(elem)!=ac.sset_group.end())
                {
                    ok=true;
                    break;
                }
            }
            if(!ok) continue;//且q.user.gset与ac.sset_group没有交集，就跳过对这个角色检查
        }
        if(check(roleid,q.v,q.o,q.n)) return true;
    }
    return false;
}
int main()
{
    ios::sync_with_stdio(false);
    cin>>n>>m>>q;
    for(int i=0;i<n;i++)
    {
        cin>>role[i].rolename;
        rolemap[role[i].rolename]=i;
        cin>>role[i].nv;
        for(int j=0;j<role[i].nv;j++)
        {
            cin>>s;
            role[i].vset.emplace(s);
            if(s=="*") role[i].vadmin=true;
        }
        cin>>role[i].no;
        for(int j=0;j<role[i].no;j++)
        {
            cin>>s;
            role[i].oset.emplace(s);
            if(s=="*") role[i].oadmin=true;
        }
        cin>>role[i].nn;
        for(int j=0;j<role[i].nn;j++)
        {
            cin>>s;
            role[i].nset.emplace(s);
        }
    }
    for(int i=0;i<m;i++)
    {
        cin>>rbac[i].rolename;
        cin>>rbac[i].ns;
        for(int j=0;j<rbac[i].ns;j++)
        {
            char typ;
            cin>>typ>>s;
            if(typ=='u')
            {
                rbac[i].sset_user.emplace(s);
            }
            else
            {
                rbac[i].sset_group.emplace(s);
            }
        }
    }
    for(int i=0;i<q;i++)
    {
        QUERY q;
        cin>>q.user.username;
        cin>>q.user.ng;
        for(int j=0;j<q.user.ng;j++)
        {
            cin>>s;
            q.user.gset.emplace(s);
        }
        cin>>q.v>>q.o>>q.n;
        cout<<query(q)<<endl;
    }
    return 0;
}
/*
in:
1 2 3
op 1 open 1 door 0
op 1 g sre
op 1 u xiaop
xiaoc 2 sre ops open door room302
xiaop 1 ops open door room501
xiaoc 2 sre ops remove door room302

out:
1
1
0
*/
13:T61cc,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">505</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">;</span>
string s<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">USER</span><span class="token punctuation">{</span>
    string username<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ng<span class="token punctuation">;</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> gset<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ROLE</span><span class="token punctuation">{</span>
    string rolename<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nv<span class="token punctuation">,</span>no<span class="token punctuation">,</span>nn<span class="token punctuation">;</span><span class="token comment">//操作、资源种类、资源名称</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> vset<span class="token punctuation">,</span>oset<span class="token punctuation">,</span>nset<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> vadmin<span class="token punctuation">,</span>oadmin<span class="token punctuation">;</span><span class="token comment">//允许的操作/资源是否含有"*"</span>
<span class="token punctuation">}</span>role<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">RBAC</span><span class="token punctuation">{</span>
    string rolename<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ns<span class="token punctuation">;</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> sset_user<span class="token punctuation">;</span>
    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> sset_group<span class="token punctuation">;</span>
<span class="token punctuation">}</span>rbac<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//role-based access control</span>
<span class="token keyword">struct</span> <span class="token class-name">QUERY</span><span class="token punctuation">{</span>
    USER user<span class="token punctuation">;</span>
    string v<span class="token punctuation">,</span>o<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> rolemap<span class="token punctuation">;</span><span class="token comment">//角色名--id</span>
<span class="token comment">//判断一个角色能否对某个资源执行某个操作</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>roleid<span class="token punctuation">,</span>string <span class="token operator">&amp;</span>qv<span class="token punctuation">,</span>string <span class="token operator">&amp;</span>qo<span class="token punctuation">,</span>string <span class="token operator">&amp;</span>qn<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    ROLE <span class="token operator">&amp;</span>r<span class="token operator">=</span>role<span class="token punctuation">[</span>roleid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ok<span class="token operator">&amp;=</span>r<span class="token punctuation">.</span>vadmin<span class="token operator">||</span>r<span class="token punctuation">.</span>vset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>qv<span class="token punctuation">)</span><span class="token operator">!=</span>r<span class="token punctuation">.</span>vset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    ok<span class="token operator">&amp;=</span>r<span class="token punctuation">.</span>oadmin<span class="token operator">||</span>r<span class="token punctuation">.</span>oset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>qo<span class="token punctuation">)</span><span class="token operator">!=</span>r<span class="token punctuation">.</span>oset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>nn<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    ok<span class="token operator">&amp;=</span>r<span class="token punctuation">.</span>nset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>qn<span class="token punctuation">)</span><span class="token operator">!=</span>r<span class="token punctuation">.</span>nset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> <span class="token function">query</span><span class="token punctuation">(</span>QUERY <span class="token operator">&amp;</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        RBAC <span class="token operator">&amp;</span>ac<span class="token operator">=</span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> roleid<span class="token operator">=</span>rolemap<span class="token punctuation">[</span>ac<span class="token punctuation">.</span>rolename<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>sset_user<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token operator">==</span>ac<span class="token punctuation">.</span>sset_user<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//q.user.username不在ac.sset_user中</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>elem<span class="token operator">:</span>ac<span class="token punctuation">.</span>sset_group<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>gset<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">!=</span>ac<span class="token punctuation">.</span>sset_group<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//且q.user.gset与ac.sset_group没有交集，就跳过对这个角色检查</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>roleid<span class="token punctuation">,</span>q<span class="token punctuation">.</span>v<span class="token punctuation">,</span>q<span class="token punctuation">.</span>o<span class="token punctuation">,</span>q<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rolename<span class="token punctuation">;</span>
        rolemap<span class="token punctuation">[</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rolename<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nv<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nv<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">)</span> role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vadmin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>no<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>no<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>oset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">)</span> role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>oadmin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cin<span class="token operator">>></span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nn<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nn<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            role<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rolename<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ns<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ns<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">char</span> typ<span class="token punctuation">;</span>
            cin<span class="token operator">>></span>typ<span class="token operator">>></span>s<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>typ<span class="token operator">==</span><span class="token char">'u'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sset_user<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                rbac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sset_group<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        QUERY q<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>ng<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>ng<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>s<span class="token punctuation">;</span>
            q<span class="token punctuation">.</span>user<span class="token punctuation">.</span>gset<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cin<span class="token operator">>></span>q<span class="token punctuation">.</span>v<span class="token operator">>></span>q<span class="token punctuation">.</span>o<span class="token operator">>></span>q<span class="token punctuation">.</span>n<span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token function">query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
1 2 3
op 1 open 1 door 0
op 1 g sre
op 1 u xiaop
xiaoc 2 sre ops open door room302
xiaop 1 ops open door room501
xiaoc 2 sre ops remove door room302

out:
1
1
0
*/</span>
14:T484,因为反射面的总长度<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，可以用<code class="x-inline-highlight">map</code>存整数格点，注意不存端点。15:Tfe7,#include <iostream>
#include <map>
#include <unordered_map>
#define N 100005
using namespace std;
int m,mirrors[N][4];
struct RPOINT{
    //反射面上的点
    int k;
    double a;
};
struct RAYPOS{
    int x,y,d;
    double I;
    int ttl;
};
unordered_map<int,map<int,RPOINT>> px,py;
int abs(int x){return x>0?x:-x;}
void add(int x1,int y1,int x2,int y2,double a)
{
    for(int x=x1,y=y1,dx=abs(x2-x1)/(x2-x1),dy=abs(y2-y1)/(y2-y1);;x+=dx,y+=dy)
    {
        if(x==x1) continue;
        if(x==x2) break;
        px[x][y]=(RPOINT){dy/dx,a};
        py[y][x]=(RPOINT){dy/dx,a};
    }
    return;
}
void del(int k)
{
    int x1=mirrors[k][0];
    int y1=mirrors[k][1];
    int x2=mirrors[k][2];
    int y2=mirrors[k][3];
    for(int x=x1,y=y1,dx=abs(x2-x1)/(x2-x1),dy=abs(y2-y1)/(y2-y1);;x+=dx,y+=dy)
    {
        if(x==x1) continue;
        if(x==x2) break;
        px[x].erase(y);
        py[y].erase(x);
    }
    return;
}
RAYPOS query(RAYPOS p)
{
    int x=p.x,y=p.y,d=p.d,ttl=p.ttl;
    double I=p.I;
    if(I<1) return (RAYPOS){0,0,0,0,0};
    if(d==0)
    {
        auto it=py[y].upper_bound(x);
        if(it!=py[y].end())
        {
            int nx=it->first;
            int dt=nx-x;
            if(ttl<dt) return (RAYPOS){x+ttl,y,0,I,0};
            else
            {
                int k=it->second.k;
                double a=it->second.a;
                if(k==1) return query((RAYPOS){nx,y,1,I*a,ttl-dt});
                else return query((RAYPOS){nx,y,3,I*a,ttl-dt});
            }
        }
        else return (RAYPOS){x+ttl,y,0,I,0};
    }
    else if(d==1)
    {
        auto it=px[x].upper_bound(y);
        if(it!=px[x].end())
        {
            int ny=it->first;
            int dt=ny-y;
            if(ttl<dt) return (RAYPOS){x,y+ttl,0,I,0};
            else
            {
                int k=it->second.k;
                double a=it->second.a;
                if(k==1) return query((RAYPOS){x,ny,0,I*a,ttl-dt});
                else return query((RAYPOS){x,ny,2,I*a,ttl-dt});
            }
        }
        else return (RAYPOS){x,y+ttl,0,I,0};
    }
    else if(d==2)
    {
        auto it=py[y].lower_bound(x);
        if(it!=py[y].begin())
        {
            it--;
            int nx=it->first;
            int dt=x-nx;
            if(ttl<dt) return (RAYPOS){x-ttl,y,0,I,0};
            else
            {
                int k=it->second.k;
                double a=it->second.a;
                if(k==1) return query((RAYPOS){nx,y,3,I*a,ttl-dt});
                else return query((RAYPOS){nx,y,1,I*a,ttl-dt});
            }
        }
        else return (RAYPOS){x-ttl,y,0,I,0};
    }
    else if(d==3)
    {
        auto it=px[x].lower_bound(y);
        if(it!=px[x].begin())
        {
            it--;
            int ny=it->first;
            int dt=y-ny;
            if(ttl<dt) return (RAYPOS){x,y-ttl,0,I,0};
            else
            {
                int k=it->second.k;
                double a=it->second.a;
                if(k==1) return query((RAYPOS){x,ny,2,I*a,ttl-dt});
                else return query((RAYPOS){x,ny,0,I*a,ttl-dt});
            }
        }
        else return (RAYPOS){x,y-ttl,0,I,0};
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin>>m;
    for(int i=0;i<m;i++)
    {
        int opt;
        cin>>opt;
        if(opt==1)
        {
            int x1,y1,x2,y2;
            double a;
            cin>>x1>>y1>>x2>>y2>>a;
            mirrors[i][0]=x1;
            mirrors[i][1]=y1;
            mirrors[i][2]=x2;
            mirrors[i][3]=y2;
            add(x1,y1,x2,y2,a);
        }
        else if(opt==2)
        {
            int k;
            cin>>k;
            del(k-1);
        }
        else if(opt==3)
        {
            int x,y,d,t;
            double I;
            cin>>x>>y>>d>>I>>t;
            RAYPOS ans=query((RAYPOS){x,y,d,I,t});
            cout<<ans.x<<' '<<ans.y<<' '<<int(ans.I)<<endl;
        }
    }
    return 0;
}
/*
in:
7
1 0 4 2 2 0.4
1 2 2 0 0 0.45
3 -1 3 0 6 5
3 1 5 3 2.4 5
3 0 2 0 3 4
2 1
3 1 5 3 2.4 5

out:
0 1 1
0 0 0
4 2 3
0 1 1
*/
16:T9a4d,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100005</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> m<span class="token punctuation">,</span>mirrors<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">RPOINT</span><span class="token punctuation">{</span>
    <span class="token comment">//反射面上的点</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>
    <span class="token keyword">double</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">RAYPOS</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>d<span class="token punctuation">;</span>
    <span class="token keyword">double</span> I<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ttl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>RPOINT<span class="token operator">>></span> px<span class="token punctuation">,</span>py<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>x<span class="token operator">:</span><span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">double</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>x1<span class="token punctuation">,</span>y<span class="token operator">=</span>y1<span class="token punctuation">,</span>dx<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token punctuation">,</span>dy<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>y2<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>y2<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>x<span class="token operator">+=</span>dx<span class="token punctuation">,</span>y<span class="token operator">+=</span>dy<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>x1<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>x2<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        px<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>RPOINT<span class="token punctuation">)</span><span class="token punctuation">{</span>dy<span class="token operator">/</span>dx<span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token punctuation">;</span>
        py<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>RPOINT<span class="token punctuation">)</span><span class="token punctuation">{</span>dy<span class="token operator">/</span>dx<span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x1<span class="token operator">=</span>mirrors<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y1<span class="token operator">=</span>mirrors<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> x2<span class="token operator">=</span>mirrors<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y2<span class="token operator">=</span>mirrors<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>x1<span class="token punctuation">,</span>y<span class="token operator">=</span>y1<span class="token punctuation">,</span>dx<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token punctuation">,</span>dy<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>y2<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>y2<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>x<span class="token operator">+=</span>dx<span class="token punctuation">,</span>y<span class="token operator">+=</span>dy<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>x1<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>x2<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        px<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        py<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
RAYPOS <span class="token function">query</span><span class="token punctuation">(</span>RAYPOS p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token operator">=</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span>p<span class="token punctuation">.</span>y<span class="token punctuation">,</span>d<span class="token operator">=</span>p<span class="token punctuation">.</span>d<span class="token punctuation">,</span>ttl<span class="token operator">=</span>p<span class="token punctuation">.</span>ttl<span class="token punctuation">;</span>
    <span class="token keyword">double</span> I<span class="token operator">=</span>p<span class="token punctuation">.</span>I<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>I<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> it<span class="token operator">=</span>py<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>py<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> nx<span class="token operator">=</span>it<span class="token operator">-></span>first<span class="token punctuation">;</span>
            <span class="token keyword">int</span> dt<span class="token operator">=</span>nx<span class="token operator">-</span>x<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ttl<span class="token operator">&lt;</span>dt<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">+</span>ttl<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> k<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>k<span class="token punctuation">;</span>
                <span class="token keyword">double</span> a<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>nx<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>nx<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">+</span>ttl<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> it<span class="token operator">=</span>px<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>px<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ny<span class="token operator">=</span>it<span class="token operator">-></span>first<span class="token punctuation">;</span>
            <span class="token keyword">int</span> dt<span class="token operator">=</span>ny<span class="token operator">-</span>y<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ttl<span class="token operator">&lt;</span>dt<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>ttl<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> k<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>k<span class="token punctuation">;</span>
                <span class="token keyword">double</span> a<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>ny<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>ny<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>ttl<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> it<span class="token operator">=</span>py<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>py<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            it<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> nx<span class="token operator">=</span>it<span class="token operator">-></span>first<span class="token punctuation">;</span>
            <span class="token keyword">int</span> dt<span class="token operator">=</span>x<span class="token operator">-</span>nx<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ttl<span class="token operator">&lt;</span>dt<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">-</span>ttl<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> k<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>k<span class="token punctuation">;</span>
                <span class="token keyword">double</span> a<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>nx<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>nx<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">-</span>ttl<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> it<span class="token operator">=</span>px<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>px<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            it<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> ny<span class="token operator">=</span>it<span class="token operator">-></span>first<span class="token punctuation">;</span>
            <span class="token keyword">int</span> dt<span class="token operator">=</span>y<span class="token operator">-</span>ny<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ttl<span class="token operator">&lt;</span>dt<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span>ttl<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> k<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>k<span class="token punctuation">;</span>
                <span class="token keyword">double</span> a<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>ny<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>ny<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token operator">*</span>a<span class="token punctuation">,</span>ttl<span class="token operator">-</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span>ttl<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>I<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> opt<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>opt<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">;</span>
            <span class="token keyword">double</span> a<span class="token punctuation">;</span>
            cin<span class="token operator">>></span>x1<span class="token operator">>></span>y1<span class="token operator">>></span>x2<span class="token operator">>></span>y2<span class="token operator">>></span>a<span class="token punctuation">;</span>
            mirrors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">;</span>
            mirrors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>y1<span class="token punctuation">;</span>
            mirrors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">;</span>
            mirrors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>y2<span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> k<span class="token punctuation">;</span>
            cin<span class="token operator">>></span>k<span class="token punctuation">;</span>
            <span class="token function">del</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>d<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
            <span class="token keyword">double</span> I<span class="token punctuation">;</span>
            cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token operator">>></span>d<span class="token operator">>></span>I<span class="token operator">>></span>t<span class="token punctuation">;</span>
            RAYPOS ans<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RAYPOS<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>d<span class="token punctuation">,</span>I<span class="token punctuation">,</span>t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span>x<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span>y<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
7
1 0 4 2 2 0.4
1 2 2 0 0 0.45
3 -1 3 0 6 5
3 1 5 3 2.4 5
3 0 2 0 3 4
2 1
3 1 5 3 2.4 5

out:
0 1 1
0 0 0
4 2 3
0 1 1
*/</span>
17:T1b8d,#include <iostream>
#include <cmath>
#include <iomanip>
#define N 500005
using namespace std;
int n,m;
int lc(int f){return f<<1;}//左子
int rc(int f){return f<<1|1;}//右子

struct POS{
    double x,y;
    friend POS operator +(POS a,POS b)
    {
        POS ans;
        ans.x=a.x+b.x;
        ans.y=a.y+b.y;
        return ans;
    }
}a[N];

struct TAGVAL{
    double mat[6];//省略了齐次坐标的第三行[0 0 1]
}const I{1,0,0,0,1,0};

TAGVAL T(double dx,double dy){return TAGVAL{1,0,dx,0,1,dy};}//平移
TAGVAL R(double t){return TAGVAL{cos(t),-sin(t),0,sin(t),cos(t),0};}//绕原点旋转
TAGVAL S(double k){return TAGVAL{k,0,0,0,k,0};}//绕原点缩放

struct NODE{
    POS sum;//和(x,y)
    POS sqs;//平方和(x**2,y**2)
    double xys;//交叉项和xy
    bool flag;//是否打了tag
    TAGVAL tag;
}tree[4*N];

//matmul 矩阵乘
TAGVAL mm(TAGVAL A,TAGVAL B)
{
    TAGVAL result;
    for(int i=0;i<6;i++)
    {
        result.mat[i]=A.mat[i/3*3]*B.mat[i%3]+A.mat[i/3*3+1]*B.mat[i%3+3];
    }
    result.mat[2]+=A.mat[2];
    result.mat[5]+=A.mat[5];
    return result;
}

//对向量p应用仿射变换M，变为Mp
POS affine(POS p,double a,double b,double c,double d,double e,double g)
{
    //M=[a b c
    //   d e g      (f变量名被占用了)
    //   0 0 1]     (省略了齐次坐标的第三行)
    return POS{a*p.x+b*p.y+c,d*p.x+e*p.y+g};
}

//合并tgv至 <管辖[l,r]区间的f节点> 的tag值，同时更新树上值
void mergetag(int l,int r,int f,TAGVAL tgv)
{
    //原本TAG(M1)，父亲分发下TAG(M2)
    //现在TAG(M2*M1)
    int len=r-l+1;
    POS sum=tree[f].sum,sqs=tree[f].sqs;
    double xys=tree[f].xys;
    double a=tgv.mat[0],b=tgv.mat[1],c=tgv.mat[2],d=tgv.mat[3],e=tgv.mat[4],g=tgv.mat[5];
    tree[f].sum=affine(sum,a,b,c*len,d,e,g*len);
    tree[f].sqs=affine(sqs,a*a,b*b,c*c*len+2*a*b*xys,d*d,e*e,g*g*len+2*d*e*xys)
               +affine(sum,2*a*c,2*b*c,0,2*d*g,2*e*g,0);
    tree[f].xys=a*d*sqs.x+b*e*sqs.y+c*g*len+(a*e+b*d)*xys+(a*g+c*d)*sum.x+(b*g+c*e)*sum.y;
    tree[f].tag=mm(tgv,tree[f].tag);//M2*M1
    tree[f].flag=true;
    return;
}

//用子节点更新 <f节点>
void pushup(int f)
{
    tree[f].sum=tree[lc(f)].sum+tree[rc(f)].sum;
    tree[f].sqs=tree[lc(f)].sqs+tree[rc(f)].sqs;
    tree[f].xys=tree[lc(f)].xys+tree[rc(f)].xys;
    return;
}

//将 <管辖[l,r]区间的f节点> 的tag值下发至子节点
void pushdown(int l,int r,int f)
{
    if(l==r) return;
    int mid=l+(r-l)/2;
    mergetag(l,mid,lc(f),tree[f].tag);
    mergetag(mid+1,r,rc(f),tree[f].tag);
    tree[f].tag=I;
    tree[f].flag=false;
    return;
}

//在tree[f]建立一个管辖[l,r]的节点
void build(int l,int r,int f)
{
    tree[f].flag=false;
    tree[f].tag=I;
    if(l==r)
    {
        tree[f].sum=a[l];
        tree[f].sqs=POS{a[l].x*a[l].x,a[l].y*a[l].y};
        tree[f].xys=a[l].x*a[l].y;
        return;
    }
    int mid=l+(r-l)/2;
    build(l,mid,lc(f));
    build(mid+1,r,rc(f));
    pushup(f);
    return;
}

//将tgv合并至区间[ql,qr]的tag值，当前在管辖[l,r]区间的f节点
void update(int ql,int qr,int l,int r,int f,TAGVAL tgv)
{
    //当前区间是查询区间的子集，修改
    if(ql<=l&&r<=qr)
    {
        mergetag(l,r,f,tgv);
        return;
    }
    int mid=l+(r-l)/2;
    if(tree[f].flag) pushdown(l,r,f);//访问到有标记的节点就下放
    if(ql<=mid) update(ql,qr,l,mid,lc(f),tgv);
    if(qr>mid) update(ql,qr,mid+1,r,rc(f),tgv);
    pushup(f);
    return;
}

//求区间[ql,qr]的和，当前在管辖[l,r]区间的f节点
POS getsum(int ql,int qr,int l,int r,int f)
{
    //当前区间是查询区间的子集，返回
    if(ql<=l&&r<=qr) return tree[f].sum;
    int mid=l+(r-l)/2;
    if(tree[f].flag) pushdown(l,r,f);//访问到有标记的节点就下放
    POS ans={0,0};
    if(ql<=mid) ans=ans+getsum(ql,qr,l,mid,lc(f));
    if(qr>mid) ans=ans+getsum(ql,qr,mid+1,r,rc(f));
    return ans;
}

//求区间[ql,qr]的平方和，当前在管辖[l,r]区间的f节点
POS getsqs(int ql,int qr,int l,int r,int f)
{
    //当前区间是查询区间的子集，返回
    if(ql<=l&&r<=qr) return tree[f].sqs;
    int mid=l+(r-l)/2;
    if(tree[f].flag) pushdown(l,r,f);//访问到有标记的节点就下放
    POS ans={0,0};
    if(ql<=mid) ans=ans+getsqs(ql,qr,l,mid,lc(f));
    if(qr>mid) ans=ans+getsqs(ql,qr,mid+1,r,rc(f));
    return ans;
}

int main()
{
    ios::sync_with_stdio(false);
    cin>>n>>m;
    cout.precision(4);
    cout.setf(ios::fixed);
    for(int i=0;i<n;i++)
    {
        cin>>a[i+1].x>>a[i+1].y;
    }
    build(1,n,1);
    for(int i=0;i<m;i++)
    {
        int q;
        double l,r,a,b,theta,k,y0;
        cin>>q>>l>>r;
        if(q==1)
        {
            cin>>a>>b;
            update(l,r,1,n,1,T(a,b));
        }
        else if(q==2)
        {
            cin>>a>>b>>theta;
            TAGVAL tgv=I;
            tgv=mm(T(-a,-b),tgv);
            tgv=mm(R(theta),tgv);//旋转
            tgv=mm(T(a,b),tgv);
            update(l,r,1,n,1,tgv);
        }
        else if(q==3)
        {
            cin>>a>>b>>k;
            TAGVAL tgv=I;
            tgv=mm(T(-a,-b),tgv);
            tgv=mm(S(k),tgv);//缩放
            tgv=mm(T(a,b),tgv);
            update(l,r,1,n,1,tgv);
        }
        else if(q==4)
        {
            cin>>theta>>y0;
            double t=tan(theta);
            TAGVAL tgv={
                1-t*t, 2*t,  -2*y0*t,
                2*t,   t*t-1, 2*y0,
            };
            tgv=mm(S(1/(1+t*t)),tgv);
            update(l,r,1,n,1,tgv);
        }
        else if(q==5)
        {
            cin>>theta>>y0;
            double t=tan(theta);
            TAGVAL tgv={
                1, t,  -y0*t,
                t, t*t, y0
            };
            tgv=mm(S(1/(1+t*t)),tgv);
            update(l,r,1,n,1,tgv);
        }
        else if(q==6)
        {
            POS sum=getsum(l,r,1,n,1);
            cout<<sum.x/(r-l+1)<<' '<<sum.y/(r-l+1)<<'\n';
        }
        else if(q==7)
        {
            cin>>a>>b;
            POS sum=getsum(l,r,1,n,1);
            POS sqs=getsqs(l,r,1,n,1);
            double ans=sqs.x+sqs.y-2*a*sum.x-2*b*sum.y+(a*a+b*b)*(r-l+1);
            cout<<ans<<'\n';
        }
    }
    return 0;
}
/*
in:
10 20
26.389153 -31.339463
-98.664509 -58.061567
16.023894 14.489272
-67.840842 -74.793309
19.790708 -87.062719
31.541964 88.441505
-75.918013 24.526470
57.288832 -39.033977
38.274184 -67.446883
-90.906424 -73.528612
3 4 4 32.938694 -6.774595 1.000221
1 2 6 69.965610 -39.563795
4 3 10 -1.399075 38.282976
4 6 7 -1.016301 61.080461
7 9 10 76.549276 22.856189
7 3 7 -96.501727 5.585970
6 8 9
4 2 8 1.215917 -90.918350
7 4 8 55.948842 38.373278
1 5 9 -83.845362 -6.619437
5 6 9 -1.202044 -90.146760
7 1 4 -81.574047 -56.555229
3 1 5 75.690820 60.620104 0.980271
4 5 9 1.512746 89.531420
5 2 5 0.071305 79.784122
6 2 4
1 3 6 90.288492 72.829660
6 4 4
7 1 10 -51.991614 -6.732535
5 5 6 0.087950 71.164056

out:
21029.678359
120220.146461
-14.172376 -63.985055
95006.134951
52111.910474
2.849235 79.987632
35.040886 148.667661
302347.683678
*/
18:Tf8f7,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">500005</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">lc</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//左子</span>
<span class="token keyword">int</span> <span class="token function">rc</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//右子</span>

<span class="token keyword">struct</span> <span class="token class-name">POS</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token keyword">friend</span> POS <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>POS a<span class="token punctuation">,</span>POS b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        POS ans<span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span>x<span class="token operator">=</span>a<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span>y<span class="token operator">=</span>a<span class="token punctuation">.</span>y<span class="token operator">+</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">TAGVAL</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> mat<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//省略了齐次坐标的第三行[0 0 1]</span>
<span class="token punctuation">}</span><span class="token keyword">const</span> I<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

TAGVAL <span class="token function">T</span><span class="token punctuation">(</span><span class="token keyword">double</span> dx<span class="token punctuation">,</span><span class="token keyword">double</span> dy<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> TAGVAL<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>dx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>dy<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//平移</span>
TAGVAL <span class="token function">R</span><span class="token punctuation">(</span><span class="token keyword">double</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> TAGVAL<span class="token punctuation">{</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//绕原点旋转</span>
TAGVAL <span class="token function">S</span><span class="token punctuation">(</span><span class="token keyword">double</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> TAGVAL<span class="token punctuation">{</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//绕原点缩放</span>

<span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>
    POS sum<span class="token punctuation">;</span><span class="token comment">//和(x,y)</span>
    POS sqs<span class="token punctuation">;</span><span class="token comment">//平方和(x**2,y**2)</span>
    <span class="token keyword">double</span> xys<span class="token punctuation">;</span><span class="token comment">//交叉项和xy</span>
    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span><span class="token comment">//是否打了tag</span>
    TAGVAL tag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//matmul 矩阵乘</span>
TAGVAL <span class="token function">mm</span><span class="token punctuation">(</span>TAGVAL A<span class="token punctuation">,</span>TAGVAL B<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TAGVAL result<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>B<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>B<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    result<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+=</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+=</span>A<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//对向量p应用仿射变换M，变为Mp</span>
POS <span class="token function">affine</span><span class="token punctuation">(</span>POS p<span class="token punctuation">,</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">,</span><span class="token keyword">double</span> c<span class="token punctuation">,</span><span class="token keyword">double</span> d<span class="token punctuation">,</span><span class="token keyword">double</span> e<span class="token punctuation">,</span><span class="token keyword">double</span> g<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//M=[a b c</span>
    <span class="token comment">//   d e g      (f变量名被占用了)</span>
    <span class="token comment">//   0 0 1]     (省略了齐次坐标的第三行)</span>
    <span class="token keyword">return</span> POS<span class="token punctuation">{</span>a<span class="token operator">*</span>p<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token operator">*</span>p<span class="token punctuation">.</span>y<span class="token operator">+</span>c<span class="token punctuation">,</span>d<span class="token operator">*</span>p<span class="token punctuation">.</span>x<span class="token operator">+</span>e<span class="token operator">*</span>p<span class="token punctuation">.</span>y<span class="token operator">+</span>g<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//合并tgv至 &lt;管辖[l,r]区间的f节点> 的tag值，同时更新树上值</span>
<span class="token keyword">void</span> <span class="token function">mergetag</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span>TAGVAL tgv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//原本TAG(M1)，父亲分发下TAG(M2)</span>
    <span class="token comment">//现在TAG(M2*M1)</span>
    <span class="token keyword">int</span> len<span class="token operator">=</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    POS sum<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">,</span>sqs<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token punctuation">;</span>
    <span class="token keyword">double</span> xys<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token punctuation">;</span>
    <span class="token keyword">double</span> a<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token operator">=</span>tgv<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span><span class="token function">affine</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">*</span>len<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>g<span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">=</span><span class="token function">affine</span><span class="token punctuation">(</span>sqs<span class="token punctuation">,</span>a<span class="token operator">*</span>a<span class="token punctuation">,</span>b<span class="token operator">*</span>b<span class="token punctuation">,</span>c<span class="token operator">*</span>c<span class="token operator">*</span>len<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token operator">*</span>b<span class="token operator">*</span>xys<span class="token punctuation">,</span>d<span class="token operator">*</span>d<span class="token punctuation">,</span>e<span class="token operator">*</span>e<span class="token punctuation">,</span>g<span class="token operator">*</span>g<span class="token operator">*</span>len<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">*</span>e<span class="token operator">*</span>xys<span class="token punctuation">)</span>
               <span class="token operator">+</span><span class="token function">affine</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>b<span class="token operator">*</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">*</span>g<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>e<span class="token operator">*</span>g<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">=</span>a<span class="token operator">*</span>d<span class="token operator">*</span>sqs<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token operator">*</span>e<span class="token operator">*</span>sqs<span class="token punctuation">.</span>y<span class="token operator">+</span>c<span class="token operator">*</span>g<span class="token operator">*</span>len<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">*</span>e<span class="token operator">+</span>b<span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token operator">*</span>xys<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">*</span>g<span class="token operator">+</span>c<span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">*</span>g<span class="token operator">+</span>c<span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span>tgv<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//M2*M1</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//用子节点更新 &lt;f节点></span>
<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tree<span class="token punctuation">[</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">=</span>tree<span class="token punctuation">[</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">=</span>tree<span class="token punctuation">[</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//将 &lt;管辖[l,r]区间的f节点> 的tag值下发至子节点</span>
<span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">mergetag</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mergetag</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token operator">=</span>I<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//在tree[f]建立一个管辖[l,r]的节点</span>
<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token operator">=</span>I<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token operator">=</span>POS<span class="token punctuation">{</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">*</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>xys<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//将tgv合并至区间[ql,qr]的tag值，当前在管辖[l,r]区间的f节点</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span>TAGVAL tgv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//当前区间是查询区间的子集，修改</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">mergetag</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问到有标记的节点就下放</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>qr<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//求区间[ql,qr]的和，当前在管辖[l,r]区间的f节点</span>
POS <span class="token function">getsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//当前区间是查询区间的子集，返回</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问到有标记的节点就下放</span>
    POS ans<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsum</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>qr<span class="token operator">></span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsum</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//求区间[ql,qr]的平方和，当前在管辖[l,r]区间的f节点</span>
POS <span class="token function">getsqs</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//当前区间是查询区间的子集，返回</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sqs<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问到有标记的节点就下放</span>
    POS ans<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsqs</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">lc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>qr<span class="token operator">></span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token function">getsqs</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">rc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    cout<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token punctuation">.</span><span class="token function">setf</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>fixed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> q<span class="token punctuation">;</span>
        <span class="token keyword">double</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>theta<span class="token punctuation">,</span>k<span class="token punctuation">,</span>y0<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>q<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">T</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>theta<span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span>I<span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">,</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">R</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旋转</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>k<span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span>I<span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">,</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//缩放</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>theta<span class="token operator">>></span>y0<span class="token punctuation">;</span>
            <span class="token keyword">double</span> t<span class="token operator">=</span><span class="token function">tan</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span><span class="token punctuation">{</span>
                <span class="token number">1</span><span class="token operator">-</span>t<span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>y0<span class="token operator">*</span>t<span class="token punctuation">,</span>
                <span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">,</span>   t<span class="token operator">*</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>y0<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>t<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>theta<span class="token operator">>></span>y0<span class="token punctuation">;</span>
            <span class="token keyword">double</span> t<span class="token operator">=</span><span class="token function">tan</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            TAGVAL tgv<span class="token operator">=</span><span class="token punctuation">{</span>
                <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span>  <span class="token operator">-</span>y0<span class="token operator">*</span>t<span class="token punctuation">,</span>
                t<span class="token punctuation">,</span> t<span class="token operator">*</span>t<span class="token punctuation">,</span> y0
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            tgv<span class="token operator">=</span><span class="token function">mm</span><span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>t<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            POS sum<span class="token operator">=</span><span class="token function">getsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">.</span>x<span class="token operator">/</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">.</span>y<span class="token operator">/</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
            POS sum<span class="token operator">=</span><span class="token function">getsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            POS sqs<span class="token operator">=</span><span class="token function">getsqs</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">double</span> ans<span class="token operator">=</span>sqs<span class="token punctuation">.</span>x<span class="token operator">+</span>sqs<span class="token punctuation">.</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token operator">*</span>sum<span class="token punctuation">.</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>b<span class="token operator">*</span>sum<span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
10 20
26.389153 -31.339463
-98.664509 -58.061567
16.023894 14.489272
-67.840842 -74.793309
19.790708 -87.062719
31.541964 88.441505
-75.918013 24.526470
57.288832 -39.033977
38.274184 -67.446883
-90.906424 -73.528612
3 4 4 32.938694 -6.774595 1.000221
1 2 6 69.965610 -39.563795
4 3 10 -1.399075 38.282976
4 6 7 -1.016301 61.080461
7 9 10 76.549276 22.856189
7 3 7 -96.501727 5.585970
6 8 9
4 2 8 1.215917 -90.918350
7 4 8 55.948842 38.373278
1 5 9 -83.845362 -6.619437
5 6 9 -1.202044 -90.146760
7 1 4 -81.574047 -56.555229
3 1 5 75.690820 60.620104 0.980271
4 5 9 1.512746 89.531420
5 2 5 0.071305 79.784122
6 2 4
1 3 6 90.288492 72.829660
6 4 4
7 1 10 -51.991614 -6.732535
5 5 6 0.087950 71.164056

out:
21029.678359
120220.146461
-14.172376 -63.985055
95006.134951
52111.910474
2.849235 79.987632
35.040886 148.667661
302347.683678
*/</span>
5:[["$","h2",null,{"className":"x-h1","children":"T1 归一化处理"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"用了一下方差的变形："}}],["$","div",null,{"className":"x-formula","dangerouslySetInnerHTML":{"__html":"$d"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"#include <iostream>\n#include <cmath>\nusing namespace std;\nint n,a[1005];\ndouble avg,avg_sq;\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>a[i];\n        avg+=a[i];\n        avg_sq+=a[i]*a[i];\n    }\n    avg/=n,avg_sq/=n;\n    for(int i=0;i<n;i++)\n    {\n        cout<<(a[i]-avg)/sqrt(avg_sq-avg*avg)<<endl;\n    }\n    return 0;\n}\n/*\nin:\n7\n-4 293 0 -22 12 654 1000\n\nout:\n-0.7485510379073613\n0.04504284674812264\n-0.7378629047806881\n-0.7966476369773906\n-0.7057985054006686\n1.0096468614303775\n1.9341703768876082\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T2 寻宝！大冒险！"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$10"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T3 角色授权"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$12"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T4 光线追踪"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"$14"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$15"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T5 PS无限版"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"线段树题，因为涉及到查询平方和，还需要额外维护乘积交叉项；题目中涉及的二维坐标变换可以在齐次坐标下使用三阶矩阵表示，由于第三行总是<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>，在下面代码中省略，只用<code class=\"x-inline-highlight\">mat[6]</code>表示一个三阶矩阵。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$17"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$18"}}]}]]}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"CSP 202206 T1-T5题解 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24a/csp-2022-06/"}]]
1:null
