2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-3464524d86b927fb.js"],""]
3:I[28270,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","931","static/chunks/app/page-e1a086b38e584954.js"],""]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-3464524d86b927fb.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8e85c0ce7e4f5a90.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8e85c0ce7e4f5a90.js"],""]
8:["slug","24a/csp-2018-03","c"]
0:["d2m0sT01PQNRZYawhsF8j",[[["",{"children":[["slug","24a/csp-2018-03","c"],{"children":["__PAGE__?{\"slug\":[\"24a\",\"csp-2018-03\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24a/csp-2018-03","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"CSP 201803 T1-T4题解"}],["$","$L3",null,{"path":"/24a/csp-2018-03/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/125f9fa1c5ad69a1.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0df77261f39dbb70.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-3464524d86b927fb.js"],""]
e:Tba2,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> cur<span class="token punctuation">,</span>score<span class="token punctuation">;</span>
<span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//下一次如果cur=2(跳到中心)，加的分数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>cur<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            score<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
            d<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            score<span class="token operator">+=</span>d<span class="token punctuation">;</span>
            d<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
1 1 2 2 2 1 1 2 2 0

out:
22
*/</span>
f:T4da,#include <iostream>
#include <cstring>
using namespace std;
int n,l,t;
int a[105][2];//a[i][0]表示当前位置，a[i][1]表示当前速度(从1计数)
int visit[1005];//记录坐标对应的小球编号
int main()
{
    cin>>n>>l>>t;
    for(int i=1;i<=n;i++)
    {
        cin>>a[i][0];
        a[i][1]=1;
    }
    for(int i=0;i<t;i++)
    {
        for(int j=1;j<=n;j++)
        {
            a[j][0]+=a[j][1];
            //触碰边界
            if(a[j][0]==l) a[j][1]=-1;
            else if(a[j][0]==0) a[j][1]=1;
        }
        //判断小球碰撞
        //如果有一个整数坐标上存在两个小球，就发生碰撞了
        memset(visit,0,sizeof(visit));
        for(int j=1;j<=n;j++)
        {
            if(!visit[a[j][0]])
            {
                visit[a[j][0]]=j;
            }
            else
            {
                //检测到碰撞了，发生碰撞的球编号是j和visit[a[j][0]]
                a[j][1]=-a[j][1];
                a[visit[a[j][0]]][1]=-a[visit[a[j][0]]][1];
            }
        }
    }
    for(int i=1;i<=n;i++)
    {
        cout<<a[i][0]<<' ';
    }
    return 0;
}
/*
in:
3 10 5
4 6 8

out:
7 9 9

in:
10 22 30
14 12 16 6 10 2 8 20 18 4

out:
6 6 8 2 4 0 4 12 10 2
*/
10:T2a83,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a[i][0]表示当前位置，a[i][1]表示当前速度(从1计数)</span>
<span class="token keyword">int</span> visit<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录坐标对应的小球编号</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>l<span class="token operator">>></span>t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//触碰边界</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>l<span class="token punctuation">)</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//判断小球碰撞</span>
        <span class="token comment">//如果有一个整数坐标上存在两个小球，就发生碰撞了</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>visit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                visit<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//检测到碰撞了，发生碰撞的球编号是j和visit[a[j][0]]</span>
                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                a<span class="token punctuation">[</span>visit<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>a<span class="token punctuation">[</span>visit<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
3 10 5
4 6 8

out:
7 9 9

in:
10 22 30
14 12 16 6 10 2 8 20 18 4

out:
6 6 8 2 4 0 4 12 10 2
*/</span>
11:T10d4,#include <iostream>
#include <vector>
using namespace std;
int n,m;
string pi,ri,qi;
vector<string> p,r,q;//规则和名字
//输入一个字符串，并按斜杠拆分成字符串数组
vector<string> splitSlash(string str)
{
    vector<string> parts;
    string part;
    for(int i=1;i<str.length();i++)//跳过第一位'/'
    {
        if(str[i]=='/') parts.push_back(part),part="";
        else part+=str[i];
    }
    if(part.length()) parts.push_back(part);//最后一位不是'/'的情况
    return parts;
}
bool isInt(string str)
{
    bool ok=true;
    for(auto ch:str) ok&=('0'<=ch&&ch<='9');
    return ok;
}
bool isValid(string str)
{
    bool ok=true;
    for(auto ch:str) ok&=
        ('0'<=ch&&ch<='9')||
        ('a'<=ch&&ch<='z')||
        ('A'<=ch&&ch<='Z')||
        ch=='-'||ch=='_'||ch=='.'||ch=='/';
    return ok;
}
bool isStr(string str)
{
    return isValid(str)&&str.find('/')==-1;
}
//删除字符串前导0
string trimZero(string str)
{
    int i=0;
    for(auto ch:str)
    {
        if(ch=='0') i++;
        else break;
    }
    if(i==str.length()) return "0";//如果全是0，保留一个0
    return str.substr(i);
}
//查询q是否匹配规则p，如果成果就返回r和参数
vector<string> checkMatch(string q,string p,string r)
{
    vector<string> q_parts=splitSlash(q);
    vector<string> p_parts=splitSlash(p);
    vector<string> ans;
    if(!isValid(q)) return ans;//查询路径q不合法
    if(q[q.length()-1]=='/'^p[p.length()-1]=='/') return ans;//规则路径p和查询路径q最后一位，如果一个是'/'另一个不是'/'，认为一定不匹配
    if(p_parts.size()>q_parts.size()) return ans;//规则路径p深度大于查询路径q，显然不匹配
    bool hasPath=false;//规则中存在<path>
    int i;
    for(i=0;i<p_parts.size();i++)
    {
        bool ok=true;
        if(p_parts[i]=="<int>")
        {
            if(isInt(q_parts[i]))
            {
                ans.push_back(trimZero(q_parts[i]));
            }
            else ok=false;
        }
        else if(p_parts[i]=="<str>")
        {
            if(isStr(q_parts[i]))
            {
                ans.push_back(q_parts[i]);
            }
            else ok=false;
        }
        else if(p_parts[i]=="<path>")
        {
            string rest;
            for(int j=i;j<q_parts.size();j++)
            {
                rest+=q_parts[j];
                //特殊处理最后一位的'/'
                if(j!=q_parts.size()-1)
                {
                    rest+="/";
                }
                else if(q[q.length()-1]=='/')
                {
                    rest+="/";
                }
            }
            ans.push_back(rest);
            hasPath=true;
        }
        else
        {
            ok=(q_parts[i]==p_parts[i]);
        }
        if(!ok)
        {
            ans.clear();
            return ans;
        }
    }
    //如果规则不含<path>，则不允许规则路径p深度不等于查询路径q
    if(!hasPath&&p_parts.size()!=q_parts.size())
    {
        ans.clear();
        return ans;
    }
    ans.emplace(ans.begin(),r);
    return ans;
}
int main()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>pi>>ri;
        p.push_back(pi);
        r.push_back(ri);
    }

    for(int i=0;i<m;i++)
    {
        cin>>qi;
        q.push_back(qi);
    }
    for(auto qi:q)
    {
        bool hasMatch=false;
        for(int j=0;j<n;j++)
        {
            vector<string> ans=checkMatch(qi,p[j],r[j]);
            if(ans.size())
            {
                hasMatch=true;
                for(auto s:ans)
                {
                    cout<<s<<' ';
                }
                cout<<endl;
                break;
            }
        }
        if(!hasMatch) cout<<"404

    }
    return 0;
}
/*
in:
5 4
/articles/2003/ special_case_2003
/articles/<int>/ year_archive
/articles/<int>/<int>/ month_archive
/articles/<int>/<int>/<str>/ article_detail
/static/<path> static_serve
/articles/2004/
/articles/1985/09/aloha/
/articles/hello/
/static/js/jquery.js

out:
year_archive 2004
article_detail 1985 9 aloha
404
static_serve js/jquery.js

in:
5 3
/a/<int>/ a_int_slash
/a/<int> a_int
/a/<str> a_str
/b/<str> b_str
/b/<int> b_int
/a/000
/a/000/
/b/000

out:
a_int 0
a_int_slash 0
b_str 000
*/
12:T7208,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
string pi<span class="token punctuation">,</span>ri<span class="token punctuation">,</span>qi<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>string<span class="token operator">></span> p<span class="token punctuation">,</span>r<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token comment">//规则和名字</span>
<span class="token comment">//输入一个字符串，并按斜杠拆分成字符串数组</span>
vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">splitSlash</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> parts<span class="token punctuation">;</span>
    string part<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//跳过第一位'/'</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">)</span> parts<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">,</span>part<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> part<span class="token operator">+=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>part<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> parts<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后一位不是'/'的情况</span>
    <span class="token keyword">return</span> parts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> <span class="token function">isInt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span>str<span class="token punctuation">)</span> ok<span class="token operator">&amp;=</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token operator">&lt;=</span>ch<span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span>str<span class="token punctuation">)</span> ok<span class="token operator">&amp;=</span>
        <span class="token punctuation">(</span><span class="token char">'0'</span><span class="token operator">&lt;=</span>ch<span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token operator">||</span>
        <span class="token punctuation">(</span><span class="token char">'a'</span><span class="token operator">&lt;=</span>ch<span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token punctuation">)</span><span class="token operator">||</span>
        <span class="token punctuation">(</span><span class="token char">'A'</span><span class="token operator">&lt;=</span>ch<span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">)</span><span class="token operator">||</span>
        ch<span class="token operator">==</span><span class="token char">'-'</span><span class="token operator">||</span>ch<span class="token operator">==</span><span class="token char">'_'</span><span class="token operator">||</span>ch<span class="token operator">==</span><span class="token char">'.'</span><span class="token operator">||</span>ch<span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> <span class="token function">isStr</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">isValid</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//删除字符串前导0</span>
string <span class="token function">trimZero</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token comment">//如果全是0，保留一个0</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//查询q是否匹配规则p，如果成果就返回r和参数</span>
vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">checkMatch</span><span class="token punctuation">(</span>string q<span class="token punctuation">,</span>string p<span class="token punctuation">,</span>string r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> q_parts<span class="token operator">=</span><span class="token function">splitSlash</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> p_parts<span class="token operator">=</span><span class="token function">splitSlash</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token comment">//查询路径q不合法</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token operator">^</span>p<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token comment">//规则路径p和查询路径q最后一位，如果一个是'/'另一个不是'/'，认为一定不匹配</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p_parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>q_parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token comment">//规则路径p深度大于查询路径q，显然不匹配</span>
    <span class="token keyword">bool</span> hasPath<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//规则中存在&lt;path></span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p_parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&lt;int>"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isInt</span><span class="token punctuation">(</span>q_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">trimZero</span><span class="token punctuation">(</span>q_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> ok<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&lt;str>"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isStr</span><span class="token punctuation">(</span>q_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>q_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> ok<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&lt;path>"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            string rest<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>q_parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                rest<span class="token operator">+=</span>q_parts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">//特殊处理最后一位的'/'</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>q_parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    rest<span class="token operator">+=</span><span class="token string">"/"</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    rest<span class="token operator">+=</span><span class="token string">"/"</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            hasPath<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            ok<span class="token operator">=</span><span class="token punctuation">(</span>q_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p_parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果规则不含&lt;path>，则不允许规则路径p深度不等于查询路径q</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hasPath<span class="token operator">&amp;&amp;</span>p_parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>q_parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ans<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>pi<span class="token operator">>></span>ri<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>qi<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>qi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> qi<span class="token operator">:</span>q<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">bool</span> hasMatch<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token operator">=</span><span class="token function">checkMatch</span><span class="token punctuation">(</span>qi<span class="token punctuation">,</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                hasMatch<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> s<span class="token operator">:</span>ans<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hasMatch<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>"<span class="token number">404</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
5 4
/articles/2003/ special_case_2003
/articles/&lt;int>/ year_archive
/articles/&lt;int>/&lt;int>/ month_archive
/articles/&lt;int>/&lt;int>/&lt;str>/ article_detail
/static/&lt;path> static_serve
/articles/2004/
/articles/1985/09/aloha/
/articles/hello/
/static/js/jquery.js

out:
year_archive 2004
article_detail 1985 9 aloha
404
static_serve js/jquery.js

in:
5 3
/a/&lt;int>/ a_int_slash
/a/&lt;int> a_int
/a/&lt;str> a_str
/b/&lt;str> b_str
/b/&lt;int> b_int
/a/000
/a/000/
/b/000

out:
a_int 0
a_int_slash 0
b_str 000
*/</span>
13:T93f,#include <iostream>
#include <map>
using namespace std;
int n;
map<string,int> m;
int max(int x,int y){return x>y?x:y;}
int min(int x,int y){return x<y?x:y;}
//判断一个状态是否是终止状态，返回评估得分；如果不是终止状态返回100
int getScore(string state)
{
    int ans=100,cnt_0=0;
    for(auto i:state) cnt_0+=i=='0';
    for(auto ch:"12")
    {
        if(
            (state[0]==ch&&state[1]==ch&&state[2]==ch)||
            (state[3]==ch&&state[4]==ch&&state[5]==ch)||
            (state[6]==ch&&state[7]==ch&&state[8]==ch)||
            (state[0]==ch&&state[3]==ch&&state[6]==ch)||
            (state[1]==ch&&state[4]==ch&&state[7]==ch)||
            (state[2]==ch&&state[5]==ch&&state[8]==ch)||
            (state[0]==ch&&state[4]==ch&&state[8]==ch)||
            (state[2]==ch&&state[4]==ch&&state[6]==ch)
        )
        {
            ans=(cnt_0+1)*(ch=='1'?1:-1);
        }
    }
    if(ans==100&&cnt_0==0) return 0;//没有胜方也没有空格，说明棋盘下满，是平局
    else return ans;
}
int generateTree_dfs(string state,bool isAlice)
{
    int score=getScore(state);
    if(score!=100)
    {
        m[state]=score;
        return score;
    }
    for(int i=0;i<state.length();i++)
    {
        if(state[i]=='0')
        {
            string new_state=state;
            if(isAlice)
            {
                new_state[i]='1';
                //下一步是Bob走，一开始假定Alice必胜，通过DFS逐渐找到Bob的最优解，降低Alice最大期望得分
                m[new_state]=100;
                m[state]=max(m[state],generateTree_dfs(new_state,false));
            }
            else
            {
                new_state[i]='2';
                //同理...
                m[new_state]=-100;
                m[state]=min(m[state],generateTree_dfs(new_state,true));
            }
        }
    }
    return m[state];
}
void generateTree(string init_state)
{
    m[init_state]=-100;
    generateTree_dfs(init_state,true);
    return;
}
int main()
{
    generateTree("000000000");
    cin>>n;
    for(int i=0;i<n;i++)
    {
        char ch;
        string state;
        for(int j=0;j<9;j++)
        {
            cin>>ch;
            state+=ch;
        }
        cout<<m[state]<<endl;
    }
    return 0;
}
/*
in:
3
1 2 1
2 1 2
0 0 0
2 1 1
0 2 1
0 0 2
0 0 0
0 0 0
0 0 0

out:
3
-4
0
*/
14:T4a0c,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">></span>y<span class="token operator">?</span>x<span class="token operator">:</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">&lt;</span>y<span class="token operator">?</span>x<span class="token operator">:</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token comment">//判断一个状态是否是终止状态，返回评估得分；如果不是终止状态返回100</span>
<span class="token keyword">int</span> <span class="token function">getScore</span><span class="token punctuation">(</span>string state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>cnt_0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>state<span class="token punctuation">)</span> cnt_0<span class="token operator">+=</span>i<span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span><span class="token string">"12"</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token operator">||</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token operator">||</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token operator">||</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token operator">||</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token operator">||</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token operator">||</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token operator">||</span>
            <span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">=</span><span class="token punctuation">(</span>cnt_0<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'1'</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">100</span><span class="token operator">&amp;&amp;</span>cnt_0<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//没有胜方也没有空格，说明棋盘下满，是平局</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">generateTree_dfs</span><span class="token punctuation">(</span>string state<span class="token punctuation">,</span><span class="token keyword">bool</span> isAlice<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> score<span class="token operator">=</span><span class="token function">getScore</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">!=</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">=</span>score<span class="token punctuation">;</span>
        <span class="token keyword">return</span> score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            string new_state<span class="token operator">=</span>state<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>isAlice<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                new_state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'1'</span><span class="token punctuation">;</span>
                <span class="token comment">//下一步是Bob走，一开始假定Alice必胜，通过DFS逐渐找到Bob的最优解，降低Alice最大期望得分</span>
                m<span class="token punctuation">[</span>new_state<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
                m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">generateTree_dfs</span><span class="token punctuation">(</span>new_state<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                new_state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'2'</span><span class="token punctuation">;</span>
                <span class="token comment">//同理...</span>
                m<span class="token punctuation">[</span>new_state<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
                m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">generateTree_dfs</span><span class="token punctuation">(</span>new_state<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">generateTree</span><span class="token punctuation">(</span>string init_state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m<span class="token punctuation">[</span>init_state<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">generateTree_dfs</span><span class="token punctuation">(</span>init_state<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">generateTree</span><span class="token punctuation">(</span><span class="token string">"000000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
        string state<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>ch<span class="token punctuation">;</span>
            state<span class="token operator">+=</span>ch<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout<span class="token operator">&lt;&lt;</span>m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
3
1 2 1
2 1 2
0 0 0
2 1 1
0 2 1
0 0 2
0 0 0
0 0 0
0 0 0

out:
3
-4
0
*/</span>
5:[["$","h2",null,{"className":"x-h1","children":"T1 跳一跳"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"#include <iostream>\nusing namespace std;\nint cur,score;\nint d=2;//下一次如果cur=2(跳到中心)，加的分数\nint main()\n{\n    while(1)\n    {\n        cin>>cur;\n        if(!cur) break;\n        if(cur==1)\n        {\n            score+=1;\n            d=2;\n        }\n        else if(cur==2)\n        {\n            score+=d;\n            d+=2;\n        }\n    }\n    cout<<score<<endl;\n    return 0;\n}\n/*\nin:\n1 1 2 2 2 1 1 2 2 0\n\nout:\n22\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T2 碰撞的小球"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$f"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T3 URL映射"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$11"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"T4 棋局评估"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Minimax</code>搜索问题。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$13"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]]}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"CSP 201803 T1-T4题解 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24a/csp-2018-03/"}]]
1:null
