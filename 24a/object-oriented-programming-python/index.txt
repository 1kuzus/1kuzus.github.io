2:I[4500,["2202","static/chunks/2202-efd885462b29519a.js","244","static/chunks/244-0004e52d21d5023f.js","5481","static/chunks/app/(blogs)/24a/object-oriented-programming-python/page-0f270ea1b709b928.js"],""]
d:I[4365,["2202","static/chunks/2202-efd885462b29519a.js","244","static/chunks/244-0004e52d21d5023f.js","5481","static/chunks/app/(blogs)/24a/object-oriented-programming-python/page-0f270ea1b709b928.js"],""]
21:I[5613,[],""]
22:I[1778,[],""]
23:I[9806,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-fb9f21826ec0f23d.js"],""]
24:I[3393,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-fb9f21826ec0f23d.js"],""]
25:I[5694,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-1c768392e1e35a90.js"],"GlobalProvider"]
26:I[397,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-1c768392e1e35a90.js"],""]
3:Tb06,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token comment"># 初始化方法/构造函数</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 实例属性</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token comment"># 实例方法</span>
    <span class="token keyword">def</span> <span class="token function">sayhi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"hi, I'm </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

u1 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
u2 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

u1<span class="token punctuation">.</span>sayhi<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Hi, I'm u1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>hp<span class="token punctuation">)</span>  <span class="token comment"># 100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>damage<span class="token punctuation">)</span>  <span class="token comment"># 20</span>
4:T851,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token comment"># 类属性，占用同一块地址</span>
    utype <span class="token operator">=</span> <span class="token string">"unit"</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 实例属性，独属于每个实例</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token keyword">def</span> <span class="token function">sayhi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hi, I'm %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

u1 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
u2 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
5:T588,<span class="token keyword">print</span><span class="token punctuation">(</span>Unit<span class="token punctuation">.</span>utype<span class="token punctuation">,</span> u1<span class="token punctuation">.</span>utype<span class="token punctuation">,</span> u2<span class="token punctuation">.</span>utype<span class="token punctuation">)</span>  <span class="token comment"># unit unit unit</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>Unit<span class="token punctuation">.</span>utype<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2197356757808</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>utype<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 2197356757808</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>utype<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 2197356757808</span>
6:Tcc3,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"name: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, hp: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>hp<span class="token punctuation">}</span></span><span class="token string">, damage: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>damage<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        unit<span class="token punctuation">.</span>hp <span class="token operator">-=</span> self<span class="token punctuation">.</span>damage
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> attacks </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">.hp = </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>hp<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
7:T10bc,<span class="token keyword">class</span> <span class="token class-name">GroundUnit</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span>
        <span class="token comment"># 子类新增的实例属性</span>
        self<span class="token punctuation">.</span>buff <span class="token operator">=</span> buff

    <span class="token comment"># 重写父类方法</span>
    <span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        unit<span class="token punctuation">.</span>hp <span class="token operator">-=</span> self<span class="token punctuation">.</span>damage <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>buff<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> attacks </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">.hp = </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>hp<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

gu1 <span class="token operator">=</span> GroundUnit<span class="token punctuation">(</span><span class="token string">"gu1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span>
gu2 <span class="token operator">=</span> GroundUnit<span class="token punctuation">(</span><span class="token string">"gu2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span>

gu2<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># name: gu2, hp: 200, damage: 10</span>
gu1<span class="token punctuation">.</span>attack<span class="token punctuation">(</span>gu2<span class="token punctuation">)</span>  <span class="token comment"># gu1 attacks gu2, gu2.hp = 176.0</span>
gu2<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># name: gu2, hp: 176.0, damage: 10</span>
8:T832,u1 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
gu1 <span class="token operator">=</span> GroundUnit<span class="token punctuation">(</span><span class="token string">"gu1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> Unit<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> GroundUnit<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>gu1<span class="token punctuation">,</span> Unit<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>gu1<span class="token punctuation">,</span> GroundUnit<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
9:T474,<span class="token keyword">class</span> <span class="token class-name">EpicRarity</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>level <span class="token operator">=</span> level

    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"This is a lv.</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>level<span class="token punctuation">}</span></span><span class="token string"> epic unit"</span></span><span class="token punctuation">)</span>
a:T782,<span class="token keyword">class</span> <span class="token class-name">EpicGroundUnit</span><span class="token punctuation">(</span>EpicRarity<span class="token punctuation">,</span> GroundUnit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>
        GroundUnit<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">,</span> buff<span class="token punctuation">)</span>
        EpicRarity<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> level<span class="token punctuation">)</span>

egu1 <span class="token operator">=</span> EpicGroundUnit<span class="token punctuation">(</span><span class="token string">"egu1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

egu1<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># This is a lv.1 epic unit</span>
b:T789,<span class="token keyword">class</span> <span class="token class-name">EpicGroundUnit</span><span class="token punctuation">(</span>GroundUnit<span class="token punctuation">,</span> EpicRarity<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>
        GroundUnit<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">,</span> buff<span class="token punctuation">)</span>
        EpicRarity<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> level<span class="token punctuation">)</span>

egu1 <span class="token operator">=</span> EpicGroundUnit<span class="token punctuation">(</span><span class="token string">"egu1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

egu1<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># name: egu1, hp: 100, damage: 20</span>
c:T746,<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

obj <span class="token operator">=</span> D<span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># A</span>
e:Ta6f,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        <span class="token comment"># 私有属性</span>
        self<span class="token punctuation">.</span>__hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>__damage <span class="token operator">=</span> damage

    <span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        unit<span class="token punctuation">.</span>__hp <span class="token operator">-=</span> self<span class="token punctuation">.</span>__damage
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> attacks </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">.__hp = </span><span class="token interpolation"><span class="token punctuation">{</span>unit<span class="token punctuation">.</span>__hp<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token comment"># 通过公有方法访问私有属性</span>
    <span class="token keyword">def</span> <span class="token function">get_hp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__hp
f:T11e6,<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 公有变量</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        <span class="token comment"># 保护变量</span>
        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> y
        <span class="token comment"># 私有变量</span>
        self<span class="token punctuation">.</span>__z <span class="token operator">=</span> z

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">info_x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"x: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>x<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">info_y</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"y: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>_y<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">info_z</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"z: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__z<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>info_x<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># x: 1</span>
b<span class="token punctuation">.</span>info_y<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># y: 2</span>
b<span class="token punctuation">.</span>info_z<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># AttributeError: 'B' object has no attribute '_B__z'. Did you mean: '_A__z'?</span>
10:T10f5,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"name: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, hp: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>hp<span class="token punctuation">}</span></span><span class="token string">, damage: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>damage<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">GroundUnit</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is a ground unit."</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AirUnit</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is an air unit."</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    unit<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>

gu1 <span class="token operator">=</span> GroundUnit<span class="token punctuation">(</span><span class="token string">"gu1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
au1 <span class="token operator">=</span> AirUnit<span class="token punctuation">(</span><span class="token string">"au1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
show_info<span class="token punctuation">(</span>gu1<span class="token punctuation">)</span>  <span class="token comment"># This is a ground unit.</span>
show_info<span class="token punctuation">(</span>au1<span class="token punctuation">)</span>  <span class="token comment"># This is an air unit.</span>
11:T538,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token comment"># 这是一个抽象方法，子类必须重写这个方法，否则在调用时会报错</span>
    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">"Subclasses must implement abstract method."</span><span class="token punctuation">)</span>
12:T539,<span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod

<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
13:T86b,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    utype <span class="token operator">=</span> <span class="token string">"unit"</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">show_type</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 可以访问到类属性</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"This is a </span><span class="token interpolation"><span class="token punctuation">{</span>cls<span class="token punctuation">.</span>utype<span class="token punctuation">}</span></span><span class="token string">."</span></span><span class="token punctuation">)</span>

u1 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span>show_type<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># This is a unit.</span>
14:T1040,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">"unit"</span>
    __unit_num <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 声明为私有类属性</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage
        self<span class="token punctuation">.</span>add_unit_num<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">add_unit_num</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        cls<span class="token punctuation">.</span>__unit_num <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">get_unit_num</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__unit_num

u1 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
u2 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>get_unit_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>get_unit_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>

u3 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u3"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>u3<span class="token punctuation">.</span>get_unit_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Unit<span class="token punctuation">.</span>get_unit_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
15:T9b3,<span class="token keyword">class</span> <span class="token class-name">Unit</span><span class="token punctuation">:</span>
    <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">"unit"</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>hp <span class="token operator">=</span> hp
        self<span class="token punctuation">.</span>damage <span class="token operator">=</span> damage

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">calc_hp_after_attack</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> damage<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 没有隐式的第一参数</span>
        <span class="token keyword">return</span> hp <span class="token operator">-</span> damage

u1 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
u2 <span class="token operator">=</span> Unit<span class="token punctuation">(</span><span class="token string">"u2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>calc_hp_after_attack<span class="token punctuation">(</span>u1<span class="token punctuation">.</span>hp<span class="token punctuation">,</span> u2<span class="token punctuation">.</span>damage<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 90</span>
16:T507,circle <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>radius<span class="token punctuation">)</span>  <span class="token comment"># 5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>diameter<span class="token punctuation">)</span>  <span class="token comment"># 10</span>

circle<span class="token punctuation">.</span>diameter <span class="token operator">=</span> <span class="token number">14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>radius<span class="token punctuation">)</span>  <span class="token comment"># 7.0</span>

circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>diameter<span class="token punctuation">)</span>  <span class="token comment"># 24</span>
17:Tb5b,<span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__radius <span class="token operator">=</span> radius
        self<span class="token punctuation">.</span>__diameter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> radius

    <span class="token comment"># 属性的getter方法</span>
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">radius</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__radius

    <span class="token comment"># 属性的setter方法</span>
    <span class="token decorator annotation punctuation">@radius<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">radius</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__radius <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>__diameter <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">2</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">diameter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__diameter

    <span class="token decorator annotation punctuation">@diameter<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">diameter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__diameter <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>__radius <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">0.5</span>
18:T71c,<span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment"># 属性的deleter方法</span>
    <span class="token decorator annotation punctuation">@radius<span class="token punctuation">.</span>deleter</span>
    <span class="token keyword">def</span> <span class="token function">radius</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"delete radius"</span><span class="token punctuation">)</span>
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>__radius

    <span class="token decorator annotation punctuation">@diameter<span class="token punctuation">.</span>deleter</span>
    <span class="token keyword">def</span> <span class="token function">diameter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"delete diameter"</span><span class="token punctuation">)</span>
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>__diameter

<span class="token keyword">del</span> circle<span class="token punctuation">.</span>diameter  <span class="token comment"># delete diameter</span>
<span class="token comment"># print(circle.diameter)  # AttributeError: 'Circle' object has no attribute '_Circle__diameter'</span>
19:Tb7a,<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
        self<span class="token punctuation">.</span>z <span class="token operator">=</span> z

    <span class="token keyword">def</span> <span class="token function">info_x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"x: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>x<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">info_y</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"y: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>y<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">info_z</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"z: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>z<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
1a:T452,<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"info_x"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"info_w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>
1b:Tbc2,a_to_z <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span>

<span class="token keyword">class</span> <span class="token class-name">A2Z</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

a2z <span class="token operator">=</span> A2Z<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> ch <span class="token keyword">in</span> a_to_z<span class="token punctuation">:</span>
    <span class="token comment"># 动态的创建属性</span>
    <span class="token builtin">setattr</span><span class="token punctuation">(</span>a2z<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment"># 动态的创建方法</span>
    <span class="token keyword">def</span> <span class="token function">info_ch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>ch<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>a2z<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token builtin">setattr</span><span class="token punctuation">(</span>a2z<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"info_</span><span class="token interpolation"><span class="token punctuation">{</span>ch<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> info_ch<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a2z<span class="token punctuation">.</span>d<span class="token punctuation">)</span>  <span class="token comment"># 4</span>
a2z<span class="token punctuation">.</span>info_z<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># z: 26</span>
1c:T567,<span class="token keyword">class</span> <span class="token class-name">Vector3d</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
        self<span class="token punctuation">.</span>z <span class="token operator">=</span> z

v1 <span class="token operator">=</span> Vector3d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
v2 <span class="token operator">=</span> Vector3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
1d:Tbaf,<span class="token keyword">class</span> <span class="token class-name">Vector3d</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Vector3d(</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>x<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>y<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>z<span class="token punctuation">}</span></span><span class="token string">)"</span></span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"(</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>x<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>y<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>z<span class="token punctuation">}</span></span><span class="token string">)"</span></span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># (3, 4, 5)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Vector3d(3, 4, 5)</span>
<span class="token comment"># 会优先调用__str__方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>  <span class="token comment"># (3, 4, 5)</span>
1e:T54a,<span class="token keyword">class</span> <span class="token class-name">Vector3d</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
        self<span class="token punctuation">.</span>z <span class="token operator">=</span> z

v2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>  <span class="token comment"># (2, -2, 1)</span>
1f:T148a,<span class="token keyword">class</span> <span class="token class-name">Vector3d</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment"># 重载加号运算符，obj1+obj2时调用</span>
    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Vector3d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">+</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span> self<span class="token punctuation">.</span>z <span class="token operator">+</span> other<span class="token punctuation">.</span>z<span class="token punctuation">)</span>

    <span class="token comment"># 重载减号运算符，obj1-obj2时调用</span>
    <span class="token keyword">def</span> <span class="token function">__sub__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Vector3d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">-</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">-</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span> self<span class="token punctuation">.</span>z <span class="token operator">-</span> other<span class="token punctuation">.</span>z<span class="token punctuation">)</span>

    <span class="token comment"># 重载乘号运算符</span>
    <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> Vector3d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">*</span> other<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> other<span class="token punctuation">,</span> self<span class="token punctuation">.</span>z <span class="token operator">*</span> other<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token operator">*</span> other<span class="token punctuation">.</span>x <span class="token operator">+</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> other<span class="token punctuation">.</span>y <span class="token operator">+</span> self<span class="token punctuation">.</span>z <span class="token operator">*</span> other<span class="token punctuation">.</span>z

<span class="token keyword">print</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>  <span class="token comment"># (3, 4, 5)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>  <span class="token comment"># (2, -2, 1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span>  <span class="token comment"># (5, 2, 6)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v1 <span class="token operator">-</span> v2<span class="token punctuation">)</span>  <span class="token comment"># (1, 6, 4)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v1 <span class="token operator">*</span> v2<span class="token punctuation">)</span>  <span class="token comment"># 3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v1 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># (6, 8, 10)</span>
20:T10fe,<span class="token keyword">class</span> <span class="token class-name">Vector3d</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x
    <span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>y
    <span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>z
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"index out of range: </span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>x <span class="token operator">=</span> value
        <span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>y <span class="token operator">=</span> value
        <span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>z <span class="token operator">=</span> value
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"index out of range: </span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 18 -24 15</span>
v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>  <span class="token comment"># (2, -24, 15)</span>
0:["haLkzT0wWC4400AMrOscM",[[["",{"children":["(blogs)",{"children":["24a",{"children":["object-oriented-programming-python",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(blogs)",{"children":["24a",{"children":["object-oriented-programming-python",{"children":["__PAGE__",{},["$L1",[["$","h1",null,{"className":"x-title","children":"Python面向对象编程"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"本文对面向对象的基本理论（为什么要有类、什么是属性、什么是方法等）不多做解释，重点在Python中的编程实现。"}}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"基本操作"}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"定义一个类"}]}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 48px, var(--bg-transparent-golden) 48px 168px, transparent 168px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$3"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上面的代码定义了一个<code class=\"x-inline-highlight\">Unit</code>类，这个例子中暂且理解为一个游戏中的作战单位，每个单位具有名字<code class=\"x-inline-highlight\">name</code>、生命值<code class=\"x-inline-highlight\">hp</code>、攻击力<code class=\"x-inline-highlight\">damage</code>这些属性。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">__init__</code>方法称作类的<span class=\"x-inline-strong\">初始化方法</span>/<span class=\"x-inline-strong\">构造函数</span>，实例本身会作为函数的第一个参数<code class=\"x-inline-highlight\">self</code>被传入。从这个角度理解，实际上<code class=\"x-inline-highlight\">__init__</code>方法是将传入的参数“绑定”到新创建的实例上。"}}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"类属性和实例属性"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"我们在类下直接定义了一个属性<code class=\"x-inline-highlight\">utype</code>，它是一个<code class=\"x-inline-highlight\">类属性</code>；与之对应的是<code class=\"x-inline-highlight\">__init__</code>方法为实例创建的属性，我们称之为<code class=\"x-inline-highlight\">实例属性</code>。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 48px, var(--bg-transparent-golden) 48px 72px, transparent 72px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$4"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"访问实例属性时，把它们当作普通变量就好了；实例属性也可以在<code class=\"x-inline-highlight\">__init__</code>方法之外动态的添加。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>hp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>damage<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 20</span>\nu1<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span>\n"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"类属性可以在类上取得，也可以在实例上取得。类属性共享内存地址。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"由于共享内存地址，因此修改类属性具有全局性："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"Unit<span class=\"token punctuation\">.</span>utype <span class=\"token operator\">=</span> <span class=\"token string\">\"spell\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>utype<span class=\"token punctuation\">,</span> u1<span class=\"token punctuation\">.</span>utype<span class=\"token punctuation\">,</span> u2<span class=\"token punctuation\">.</span>utype<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># spell spell spell</span>\n"}}]}]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","h4",null,{"className":"x-h3","children":"注意"}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"u1<span class=\"token punctuation\">.</span>utype <span class=\"token operator\">=</span> <span class=\"token string\">\"hero\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>utype<span class=\"token punctuation\">,</span> u1<span class=\"token punctuation\">.</span>utype<span class=\"token punctuation\">,</span> u2<span class=\"token punctuation\">.</span>utype<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># spell hero spell</span>\n"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果同样的属性名称同时出现在实例和类中，则属性查找会优先选择实例属性。上面的例子相当于给<code class=\"x-inline-highlight\">u1</code>添加了一个与类属性同名实例属性，<code class=\"x-inline-highlight\">u1.utype</code>访问到的不是类属性。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"要想访问<code class=\"x-inline-highlight\">u1</code>的类属性，可以通过<code class=\"x-inline-highlight\">__class__</code>访问："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>utype<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># spell</span>"}}]}]}]]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"继承"}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"实现一个子类"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"我们还是定义一个<code class=\"x-inline-highlight\">Unit</code>类，并实现两个方法：<code class=\"x-inline-highlight\">info</code>用于输出自身基本信息，<code class=\"x-inline-highlight\">attack</code>模拟攻击另一个单位。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$6"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"现在我们希望实现一个<code class=\"x-inline-highlight\">GroundUnit</code>类，表示地面单位，并且地面单位具有特有的伤害加成，用属性<code class=\"x-inline-highlight\">buff</code>定义。显然，会有大量的逻辑与<code class=\"x-inline-highlight\">Unit</code>类是重复的。这时可以通过继承来实现："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 48px, var(--bg-transparent-golden) 48px 72px, transparent 72px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$7"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"定义类时，用<code class=\"x-inline-highlight\">class 子类(父类):</code>表示继承。如果子类有自己的构造函数，会覆盖父类的构造函数；否则会继承父类的构造函数。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"代码中<code class=\"x-inline-highlight\">super()</code>函数可以找到父类，高亮的代码等价于<code class=\"x-inline-highlight\">Unit.__init__(self, name, hp, damage)</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果子类需要对父类的方法进行重写，只需要在子类下定义同名方法，然后重写逻辑。其他父类的方法会被继承到子类中，例如这个例子中的<code class=\"x-inline-highlight\">info()</code>。"}}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"isinstance函数"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">isinstance(实例,类)</code>可以判断一个实例是否属于给定的类。<span class=\"x-inline-strong\">子类的实例同时也是父类的实例</span>。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"多继承"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"假设我们的游戏复杂起来，引入了稀有度系统，每个单位有一个所属的稀有度，例如普通、稀有、史诗、传奇等等。以史诗级为例，假设对于这些不同稀有度的单位有着其他独特的机制，以至于我们不得不新创建一个<code class=\"x-inline-highlight\">EpicRarity</code>类："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"当然，为了便于演示，我们只定义了一个<code class=\"x-inline-highlight\">level</code>属性和<code class=\"x-inline-highlight\">info</code>方法。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"现在，我们想实现<code class=\"x-inline-highlight\">EpicGroundUnit</code>子类，表示史诗级地面单位。显然它需要同时继承父类<code class=\"x-inline-highlight\">EpicRarity</code>和<code class=\"x-inline-highlight\">GroundUnit</code>，这就是<span class=\"x-inline-strong\">多继承</span>。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 48px, var(--bg-transparent-golden) 48px 96px, transparent 96px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$a"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在构造函数中我们需要分别对父类进行初始化。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注意到两个父类都实现了<code class=\"x-inline-highlight\">info</code>方法并且没有被子类重写。调用之后我们发现，子类继承的是<code class=\"x-inline-highlight\">EpicRarity</code>的<code class=\"x-inline-highlight\">info</code>方法。如果代码改写为："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 0px, var(--bg-transparent-golden) 0px 24px, transparent 24px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$b"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"就会发现，调换父类的顺序后，现在子类继承的是<code class=\"x-inline-highlight\">GroundUnit</code>的<code class=\"x-inline-highlight\">info</code>方法。这就引出了下一节的内容：<span class=\"x-inline-strong\">方法解析顺序</span>。"}}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"方法解析顺序MRO"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"对于多继承情况下的同名方法，如何从父类中找应该优先使用哪个父类的方法就叫<span class=\"x-inline-strong\">方法解析顺序</span><code class=\"x-inline-highlight\">(Method Resolution Order, MRO)</code>。 Python采用<a href=\"https://zh.wikipedia.org/zh-cn/C3%E7%BA%BF%E6%80%A7%E5%8C%96\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">C3线性化</a>算法来计算线性化列表，保证继承顺序列表中每个类只出现一次。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上述代码描述了一个如下图所示的复杂继承关系："}}],["$","$Ld",null,{"src":"mro.jpg","width":"300px","invertInDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"可以通过<code class=\"x-inline-highlight\">mro()</code>函数得到类的方法解析顺序："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\"># 注意是类名，不是实例名</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [&lt;class '__main__.D'>, &lt;class '__main__.C'>, &lt;class '__main__.A'>, &lt;class '__main__.B'>, &lt;class 'object'>]</span>\n"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"输出的列表中，从左到右的顺序为查找方法的顺序。上述例子中，<code class=\"x-inline-highlight\">D</code>和<code class=\"x-inline-highlight\">C</code>类都没有定义<code class=\"x-inline-highlight\">test</code>方法，因此顺次使用了<code class=\"x-inline-highlight\">A</code>类的<code class=\"x-inline-highlight\">test</code>方法。"}}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","h4",null,{"className":"x-h3","children":"注意"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"MRO顺序不是简单的深度优先或广度优先！"}}]]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"封装"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在前面<code class=\"x-inline-highlight\">Unit</code>类的例子中，我们可以通过直接访问<code class=\"x-inline-highlight\">u1.hp</code>修改其值，这样并不安全（这岂不是像外挂一样）！<span class=\"x-inline-strong\">封装</span>的目的是为了保护数据，不让外部直接访问和修改。在Python中，约定通过在属性名称前加两个下划线<code class=\"x-inline-highlight\">__</code>来将属性私有化。这种命名约定会使Python解释器修改变量名为<code class=\"x-inline-highlight\">_类名__属性名</code>的形式，使其在类外部变得难以访问。"}}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"将实例属性私有化"}]}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 96px, var(--bg-transparent-golden) 96px 144px, transparent 144px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在定义私有属性后，对外开放一个公有方法<code class=\"x-inline-highlight\">get_hp</code>，通过这个公有方法可以间接的访问到<code class=\"x-inline-highlight\">__hp</code>属性。这样相当于让此属性对外部“只读”。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"u1 <span class=\"token operator\">=</span> Unit<span class=\"token punctuation\">(</span><span class=\"token string\">\"u1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>get_hp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>__hp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># AttributeError: 'Unit' object has no attribute '__hp'</span>\n"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"通过<code class=\"x-inline-highlight\">_类名__属性名</code>的形式可以强制访问私有属性："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>_Unit__hp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 100</span>"}}]}]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","h4",null,{"className":"x-h3","children":"注意"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在类外绑定的双下划线变量是公有的。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"u1<span class=\"token punctuation\">.</span>__var <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">.</span>__var<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span>\n"}}]}]}]]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"类比于C++"}]}],["$","p",null,{"className":"x-p no-margin-bottom","dangerouslySetInnerHTML":{"__html":"C++中的封装有三种：<code class=\"x-inline-highlight\">public</code>、<code class=\"x-inline-highlight\">protected</code>、<code class=\"x-inline-highlight\">private</code>；Python中没有这些关键字，但是可以通过属性名命名约定来实现。"}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">public</code>：公有变量，可以在<span class=\"x-inline-strong\">类的内部和外部</span>访问，正常命名即可。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">protected</code>：保护变量，只能在<span class=\"x-inline-strong\">类内和子类</span>访问，属性名前加单下划线<code class=\"x-inline-highlight\">_</code>。这只是一种命名约定，实际上是可以访问的。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">private</code>：私有变量，只能在<span class=\"x-inline-strong\">类的内部</span>访问，属性名前加双下划线<code class=\"x-inline-highlight\">__</code>，这样会使Python解释器修改变量名为<code class=\"x-inline-highlight\">_类名__属性名</code>的形式。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","h4",null,{"className":"x-h3","children":"注意"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"C++中的<code class=\"x-inline-highlight\">protected</code>关键字是一种严格的访问控制机制，而Python中的单下划线变量只是一种命名约定，不具有强制性，实际上是可以访问的。只不过有时违反了这样的约定时，有些代码编辑器会给出警告。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>_y<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>"}}]}]}]]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"多态"}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"举个例子"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"多态是当一个类继承自另一个类并重写了其方法时，可以在不改变原有接口的情况下，根据对象的实际类型来调用不同的方法实现。这听起来有些复杂，我们来举一个具体的例子："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这个例子中，<code class=\"x-inline-highlight\">show_info</code>函数接受一个<code class=\"x-inline-highlight\">Unit</code>类型的参数，但是我们传入的是其子类<code class=\"x-inline-highlight\">GroundUnit</code>和<code class=\"x-inline-highlight\">AirUnit</code>类型的实例。子类重写了父类的<code class=\"x-inline-highlight\">info</code>方法，相当于共用了父类的接口，但是子类又通过继承重写了接口，从而实现了不同的功能。"}}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"通过抽象类实现多态"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"x-inline-strong\">抽象类</span>是指包含<span class=\"x-inline-strong\">抽象方法</span>的类；抽象类只能被继承，不能被实例化。<br/> 抽象方法是指只有声明，没有实现的方法，它存在的意义是让子类重写这个方法。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上面的例子中，如果我们将<code class=\"x-inline-highlight\">Unit</code>类的<code class=\"x-inline-highlight\">info</code>方法定义为："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 168px, var(--bg-transparent-golden) 168px 216px, transparent 216px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这时子类如果没有重写<code class=\"x-inline-highlight\">info</code>方法，就会继承父类中的方法，在调用的时候就会报错。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">UnitWithoutInfo</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\nu <span class=\"token operator\">=</span> UnitWithoutInfo<span class=\"token punctuation\">(</span><span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nu<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># NotImplementedError: Subclasses must implement abstract method.</span>\n"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"Python中的abc模块"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"Python的<code class=\"x-inline-highlight\">abc</code>模块中定义了<span class=\"x-inline-strong\">抽象基类</span><code class=\"x-inline-highlight\">ABC (Abstract Base Classes)</code>，可以强制其子类必须实现某些方法。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上面的例子使用<code class=\"x-inline-highlight\">abc</code>模块可以改写为："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 0px, var(--bg-transparent-golden) 0px 24px, transparent 24px, transparent 48px, var(--bg-transparent-golden) 48px 72px, transparent 72px, transparent 192px, var(--bg-transparent-golden) 192px 264px, transparent 264px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这时子类如果没有重写<code class=\"x-inline-highlight\">info</code>方法，在实例化时就会报错！"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">UnitWithoutInfo</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># 在实例化时就会报错</span>\nu <span class=\"token operator\">=</span> UnitWithoutInfo<span class=\"token punctuation\">(</span><span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># TypeError: Can't instantiate abstract class UnitWithoutInfo with abstract method info</span>\n"}}]}]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"三大方法"}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"类方法"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"类方法用修饰器<code class=\"x-inline-highlight\">@classmethod</code>定义，传入的第一个参数是类本身而不是实例，通常命名为<code class=\"x-inline-highlight\">cls</code>。通过它可以访问到类属性。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 192px, var(--bg-transparent-golden) 192px 288px, transparent 288px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]}],["$","h4",null,{"className":"x-h3","children":"类方法的应用：自动计算实例数"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"假如我们希望每创建一个类时，都可以自动计数当前类的实例数量。这个功能可以由类方法实现。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 192px, var(--bg-transparent-golden) 192px 216px, transparent 216px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"我们在<code class=\"x-inline-highlight\">__init__</code>方法中调用一次类方法<code class=\"x-inline-highlight\">add_unit_num()</code>，就可以把总实例数统计到类属性<code class=\"x-inline-highlight\">__unit_num</code>中。"}}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"静态方法"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"静态方法用修饰器<code class=\"x-inline-highlight\">@staticmethod</code>定义。静态方法不能访问类属性，也不能访问实例属性。静态方法可以在类的命名空间内定义一些功能性代码，通常用于实现一些与类相关的工具函数。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 192px, var(--bg-transparent-golden) 192px 264px, transparent 264px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$15"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"属性方法"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"属性方法以方法的形式定义，但是可以像属性一样进行访问，其作用是支持对属性的灵活操作。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"属性方法相当于允许更细致的设置一个属性的<span class=\"x-inline-strong\">访问</span>、<span class=\"x-inline-strong\">更改</span>、<span class=\"x-inline-strong\">删除</span>操作，具体的做法是：实现属性的<code class=\"x-inline-highlight\">getter</code>、<code class=\"x-inline-highlight\">setter</code>、<code class=\"x-inline-highlight\">deleter</code>方法。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"假设我们有这样的需求：定义一个<code class=\"x-inline-highlight\">Circle</code>类，它具有直径<code class=\"x-inline-highlight\">diameter</code>和半径<code class=\"x-inline-highlight\">radius</code>两个属性。我们希望修改其中一个属性时，另外一个属性也随之变化。也就是："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"用此前的知识似乎无法实现这样的功能，但属性方法可以解决："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$17"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"将访问、修改属性的操作定义为函数，就允许了我们除了获取、修改变量本身之外，还可以做一些其他的手脚。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上面的例子没有体现属性的<code class=\"x-inline-highlight\">deleter</code>方法。它的一般实现可以是："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$18"}}]}]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"反射"}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"Python中的反射"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在计算机科学中<span class=\"x-inline-strong\">反射</span><code class=\"x-inline-highlight\">(reflection)</code>是指计算机程序在运行时可以检查、访问、和修改它本身状态或行为的一种能力。表现在Python面向对象编程中有四个内置函数：<code class=\"x-inline-highlight\">getattr()</code>、<code class=\"x-inline-highlight\">setattr()</code>、<code class=\"x-inline-highlight\">hasattr()</code>和<code class=\"x-inline-highlight\">delattr()</code>，可以通过字符串的形式操作对象的属性和方法。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$19"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">hasattr()</code>函数用于判断对象是否包含对应的属性或方法："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1a"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">getattr()</code>函数用于获取对象的属性或方法："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\ninfo_x <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"info_x\"</span><span class=\"token punctuation\">)</span>\ninfo_x<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># x: 10</span>\n"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">setattr()</code>函数用于设置对象的属性或方法："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 100</span>\n"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">delattr()</code>函数用于删除对象的属性或方法："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token builtin\">delattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># AttributeError: 'A' object has no attribute 'y'</span>\n"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"反射的应用"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"假如我们现在想创建一个类<code class=\"x-inline-highlight\">A2Z</code>，它具有<code class=\"x-inline-highlight\">a</code>-<code class=\"x-inline-highlight\">z</code><code class=\"x-inline-highlight\">26</code>个属性与<code class=\"x-inline-highlight\">info_a()</code>到<code class=\"x-inline-highlight\">info_z()</code><code class=\"x-inline-highlight\">26</code>个方法，手动创建这些属性和方法是非常繁琐的。这时我们可以利用反射来动态的创建它们："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 216px, var(--bg-transparent-golden) 216px 240px, transparent 240px, transparent 360px, var(--bg-transparent-golden) 360px 384px, transparent 384px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1b"}}]}]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"魔术方法"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"魔术方法通常以双下划线包围，用于实现类的特殊行为。下面以一个<code class=\"x-inline-highlight\">Vector3d</code>类为例，介绍一些常用的魔术方法。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1c"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"__len__"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">len(obj)</code>时调用。<code class=\"x-inline-highlight\">__len__</code>方法的返回值只能是整数。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">Vector3d</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span>\n"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"__repr__和__str__"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">__repr__</code>方法的返回值应该是一个<span class=\"x-inline-strong\">可以用来重新创建对象</span>的字符串。<br/> <code class=\"x-inline-highlight\">__str__</code>方法在<code class=\"x-inline-highlight\">str(obj)</code>时调用，应当返回实例格式良好、可读性强的字符串表示。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在<code class=\"x-inline-highlight\">print(obj)</code>时会优先使用<code class=\"x-inline-highlight\">__str__</code>方法的返回值，如果没有定义<code class=\"x-inline-highlight\">__str__</code>方法，则会使用<code class=\"x-inline-highlight\">__repr__</code>方法。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1d"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"__call__"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">__call__</code>方法使得实例可以像函数一样被调用。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这个例子中我们约定，调用<code class=\"x-inline-highlight\">obj(x, y, z)</code>时设置向量的<code class=\"x-inline-highlight\">x</code>，<code class=\"x-inline-highlight\">y</code>，<code class=\"x-inline-highlight\">z</code>分量。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1e"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"运算符重载"}]}],["$","p",null,{"className":"x-p no-margin-bottom","dangerouslySetInnerHTML":{"__html":"我们为<code class=\"x-inline-highlight\">Vector3d</code>类定义加法、减法、乘法操作。这个例子中我们约定，加减法就是普通的按元素加减，而乘法满足："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">obj*常数</code>时返回缩放后的向量"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">obj1*obj2</code>时返回点乘数值"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1f"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"反运算（右侧运算）"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果只有上述运算符重载，下面的代码会报错："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> v1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># TypeError: unsupported operand type(s) for *: 'int' and 'Vector3d'</span>"}}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这是因为整数类型的乘法不适用。解决这个问题需要定义<code class=\"x-inline-highlight\">Vector3d</code>类的右侧乘法<code class=\"x-inline-highlight\">__rmul__</code>："}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">Vector3d</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__rmul__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__mul__<span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> v1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (6, 8, 10)</span>\n"}}]}]}],["$","h3",null,{"className":"x-h2","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"__getitem__和__setitem__"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">__getitem__</code>在取<code class=\"x-inline-highlight\">obj[key]</code>时调用，这个例子中我们约定<code class=\"x-inline-highlight\">obj[key]</code>返回向量第<code class=\"x-inline-highlight\">i</code>个分量；"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">__setitem__</code>在设置<code class=\"x-inline-highlight\">obj[key]=value</code>时调用，这个例子中我们约定<code class=\"x-inline-highlight\">obj[key]=value</code>设置向量第<code class=\"x-inline-highlight\">i</code>个分量。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$20"}}]}]}]],null]]},["$","$L21",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24a","children","object-oriented-programming-python","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fba9667a74f033ff.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L21",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24a","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"id":"blog-layout","children":[["$","div",null,{"id":"main","children":["$","$L21",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$L23",null,{}],["$","$L24",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}]]}],["$","body",null,{"children":["$","$L25",null,{"children":[["$","$L26",null,{}],["$","$L21",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/eccd2e7a1149e571.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/391c9d793ecdcfc9.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/963497083e9e5594.css","precedence":"next","crossOrigin":""}]],"$L27"]]]]
27:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Python面向对象编程 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24a/object-oriented-programming-python/"}]]
1:null
