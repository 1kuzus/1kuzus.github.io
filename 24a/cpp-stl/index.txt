2:I[10579,["2202","static/chunks/2202-c94dd0688c9a9cf1.js","7197","static/chunks/7197-fbfe003e0dc31b13.js","4560","static/chunks/app/(posts)/24a/cpp-stl/page-4ec3aa65213250c6.js"],""]
3:I[62029,["2202","static/chunks/2202-c94dd0688c9a9cf1.js","7197","static/chunks/7197-fbfe003e0dc31b13.js","4560","static/chunks/app/(posts)/24a/cpp-stl/page-4ec3aa65213250c6.js"],""]
31:I[5613,[],""]
32:I[31778,[],""]
33:I[30389,["2202","static/chunks/2202-c94dd0688c9a9cf1.js","5250","static/chunks/5250-9192d080d30d8ff7.js","7197","static/chunks/7197-fbfe003e0dc31b13.js","1993","static/chunks/app/(posts)/layout-2f62fef6436e4255.js"],""]
34:I[25694,["5250","static/chunks/5250-9192d080d30d8ff7.js","3185","static/chunks/app/layout-5a8cc49a6681c694.js"],"GlobalProvider"]
35:I[30397,["5250","static/chunks/5250-9192d080d30d8ff7.js","3185","static/chunks/app/layout-5a8cc49a6681c694.js"],""]
4:T89d,string str1<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>
string <span class="token function">str2</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>

<span class="token comment">//string类型可以用等号判断值相等，char数组不能</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>str3<span class="token operator">==</span>str4<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str4<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
5:T41f,<span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>str1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//h e l l o</span>
6:T51d,<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>str1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//用法和指针一样</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span><span class="token punctuation">(</span>it<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//l l o</span>
7:T4e0,cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>

<span class="token comment">//转成int类型就可以比了</span>
<span class="token keyword">int</span> s1<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>s1<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
8:T521,cout<span class="token operator">&lt;&lt;</span><span class="token string">"*"</span><span class="token operator">&lt;&lt;</span>str1<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>str1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//*hello 0</span>
str1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token string">"*"</span><span class="token operator">&lt;&lt;</span>str1<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>str1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//* 1</span>
9:T4c2,cout<span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//hello</span>
str2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//hello world</span>
a:T5a1,cout<span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//hello world</span>
str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//hello000world</span>
str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//hello1111world</span>
b:Ta81,cout<span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//helloworld</span>
cout<span class="token operator">&lt;&lt;</span>str2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//5 (5是'w'的在str2中的下标)</span>

<span class="token comment">//没找到会返回string::npos，在int类型下是-1</span>
cout<span class="token operator">&lt;&lt;</span>str2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>string<span class="token double-colon punctuation">::</span>npos<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//18446744073709551615 18446744073709551615</span>
<span class="token keyword">int</span> idx<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>idx<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//-1</span>

<span class="token comment">//指定查找起点</span>
cout<span class="token operator">&lt;&lt;</span>str2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//4</span>
cout<span class="token operator">&lt;&lt;</span>str2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//6</span>
c:T656,cout<span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//helloworld</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>idx<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>idx<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'l'</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str2[%d]=%s\n"</span><span class="token punctuation">,</span>idx<span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
str2[2]=l
str2[3]=l
str2[8]=l
*/</span>
d:T488,cout<span class="token operator">&lt;&lt;</span><span class="token function">stoi</span><span class="token punctuation">(</span><span class="token string">"234"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//235</span>
cout<span class="token operator">&lt;&lt;</span><span class="token function">stoi</span><span class="token punctuation">(</span><span class="token string">"-234.8"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//-233</span>
cout<span class="token operator">&lt;&lt;</span><span class="token function">stoi</span><span class="token punctuation">(</span><span class="token string">"00012"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//12</span>
e:Tb1b,vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"one"</span><span class="token punctuation">,</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"three"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//也可以是vector&lt;string> v2{"one","two","three"};</span>
<span class="token comment">//也可以是vector&lt;string> v2({"one","two","three"});</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建20个元素，它们的默认初始值都为0</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v4</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建20个元素，它们的初始值都为-1</span>

cout<span class="token operator">&lt;&lt;</span>v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//two 0 -1</span>
cout<span class="token operator">&lt;&lt;</span>v2<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//three</span>
f:T408,v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v1<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//123 456</span>
10:T1065,v1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">auto</span> it<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>v1<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">//0 1 99 2 3 4 5 6</span>
cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//99</span>

it<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>v1<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">//0 1 99 2 -1 -1 -1 -1 -1 3 4 5 6</span>
cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//-1</span>

v1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//5 5</span>
11:T607,vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v5<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    v5<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
1 1
2 2
3 4
4 4
5 8
6 8
*/</span>
12:Td77,it<span class="token operator">=</span>v5<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//假设我们保存了容器首部的迭代器</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//v[0]=0</span>
cout<span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//6 8</span>

v5<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//原来size=6，capacity=8，插入3个会引起扩容</span>
cout<span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//9 12</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//14032400 失效了</span>

<span class="token comment">//使用shrink_to_fit释放没有使用的内存(同样会完全重新分配内存)</span>
v5<span class="token punctuation">.</span><span class="token function">shrink_to_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v5<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//9 9</span>
13:T160c,v1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

v1<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//10 14</span>

it<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>v1<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">//0 1 2 3 4 6 7 8 9</span>
cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//6</span>
cout<span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//9 14</span>

it<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>v1<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">//0 1 2 7 8 9</span>
cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//7</span>
cout<span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//6 14</span>
14:T495,v1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
cout<span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0 14</span>
15:T5e8,v1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">sort</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>v1<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">//1 2 4 5 6 8</span>
16:T6dc,pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> p1<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0 0</span>

pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//也可以是pair&lt;int,double> p2{1,3.14};</span>
<span class="token comment">//也可以是pair&lt;int,double> p2={1,3.14};</span>
<span class="token comment">//也可以是pair&lt;int,double> p2({1,3.14});</span>
cout<span class="token operator">&lt;&lt;</span>p2<span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>p2<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1 3.14</span>
17:Tdcf,pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">p4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>p2<span class="token operator">==</span>p3<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>p3<span class="token operator">==</span>p4<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>

pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p5</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p6</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p7</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>p7<span class="token operator">></span>p6<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>p6<span class="token operator">></span>p5<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
18:T47b,string name<span class="token punctuation">;</span>
<span class="token keyword">double</span> value<span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">p8</span><span class="token punctuation">(</span><span class="token string">"pi"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">tie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token operator">=</span>p8<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>name<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//pi 3.14</span>
19:T474,<span class="token comment">//获取tuple大小</span>
cout<span class="token operator">&lt;&lt;</span>tuple_size<span class="token operator">&lt;</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token double-colon punctuation">::</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//3</span>
<span class="token comment">//decltype(t1)实际是取了t1的类型</span>
cout<span class="token operator">&lt;&lt;</span>tuple_size<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//4</span>
1a:T468,<span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
<span class="token keyword">double</span> d<span class="token punctuation">;</span>
<span class="token function">tie</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token operator">=</span>t1<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1 2 3 9.99</span>
1b:T121d,map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> m1<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> m2<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">"one"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">"three"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//也可以是map&lt;string,double> m2{{"one",1},{"two",2},{"three",3}};</span>
<span class="token comment">//也可以是map&lt;string,double> m2({{"one",1},{"two",2},{"three",3}});</span>

m1<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//这里相当于创建了m1["d"]</span>
m1<span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//这里相当于修改</span>
<span class="token comment">//实际上只要使用[key]取值，并且传入的key是新键，就会创建一个新键值对，值为类型默认值</span>

cout<span class="token operator">&lt;&lt;</span>m1<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//4</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it1<span class="token operator">!=</span>m1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it1<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
a 6
b 5
c 4
d 1
e 2
*/</span>
1c:T10cb,<span class="token keyword">auto</span> it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> res<span class="token punctuation">;</span>

res<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it1<span class="token operator">=</span>res<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token punctuation">;</span> <span class="token comment">//f 99</span>
cout<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>res<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>

res<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it1<span class="token operator">=</span>res<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token punctuation">;</span> <span class="token comment">//f 99</span>
cout<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>res<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>

res<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it1<span class="token operator">=</span>res<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token punctuation">;</span> <span class="token comment">//g 55</span>
cout<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>res<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
1d:T85b,cout<span class="token operator">&lt;&lt;</span>m1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//7</span>

m1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>m1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//6</span>
cout<span class="token operator">&lt;&lt;</span>m1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>

m1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>m1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>
cout<span class="token operator">&lt;&lt;</span>m1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
1e:Tda1,m1<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>

it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>it1<span class="token operator">!=</span>m1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"not found."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//a 100</span>

it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>it1<span class="token operator">!=</span>m1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"not found."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//not found.</span>
1f:T12dd,m1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
m1<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>

it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//b 2</span>
it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//c 3</span>
it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//x 4</span>
it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//x 4</span>
it1<span class="token operator">=</span>m1<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>it1<span class="token operator">==</span>m1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//1</span>
20:Tb52,<span class="token keyword">struct</span> <span class="token class-name">POINT</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token comment">//假如想按照平方距离从大到小排序</span>
    <span class="token comment">//默认的排序方式是从小到大，把小于号重载成"大于"的含义相当于打破这种默认</span>
    <span class="token comment">//或者理解为，排序方式是从小到大，那么我们就要把期望的结果定义为"小"的</span>
    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>POINT a<span class="token punctuation">,</span>POINT b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">double</span> da<span class="token operator">=</span>a<span class="token punctuation">.</span>x<span class="token operator">*</span>a<span class="token punctuation">.</span>x<span class="token operator">+</span>a<span class="token punctuation">.</span>y<span class="token operator">*</span>a<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">double</span> db<span class="token operator">=</span>b<span class="token punctuation">.</span>x<span class="token operator">*</span>b<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token punctuation">.</span>y<span class="token operator">*</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token comment">//我们期望"平方距离大"的元素在这种含义下是"小的"</span>
        <span class="token comment">//因此返回(da>db)的值，也就是这个条件为1的时候，我们认为前者是"小的"</span>
        <span class="token keyword">return</span> da<span class="token operator">></span>db<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">POINTDETAIL</span><span class="token punctuation">{</span>
    string name<span class="token punctuation">;</span> <span class="token comment">//点的名字</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span> <span class="token comment">//假设每个点还对应了一些需要用vector储存的信息</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
21:T209f,map<span class="token operator">&lt;</span>POINT<span class="token punctuation">,</span>POINTDETAIL<span class="token operator">></span> m3<span class="token punctuation">;</span>

<span class="token comment">//不同的插入方式</span>
m3<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"A点"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
m3<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>
    <span class="token function">make_pair</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>POINT<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>POINTDETAIL<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"B点"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
m3<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"C点"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
m3<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>POINT<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>POINTDETAIL<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"D点"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it1<span class="token operator">=</span>m3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it1<span class="token operator">!=</span>m3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it1<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//it1指向一个键值对(key,val)</span>
    <span class="token comment">//it1->first是键key，key是一个POINT类型，具有x,y属性</span>
    <span class="token comment">//it1->second是值val，val是一个POINTDETAIL类型，具有name属性和v向量</span>
    cout<span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>second<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token punctuation">.</span>x<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it1<span class="token operator">-></span>first<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"   v=["</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>it1<span class="token operator">-></span>second<span class="token punctuation">.</span>v<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">','</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"\b]"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
B点: 4 5   v=[4,5,6]
D点: 4 4   v=[2,3,5,7]
C点: 1 5   v=[7,8,9,10]
A点: 3 4   v=[1,2,3]
*/</span>

m3<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"E点"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//E点</span>
cout<span class="token operator">&lt;&lt;</span>m3<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//因为定义的是平方和作为判断依据，{3,4}和{4,3}被视为同一个键而发生了重新赋值</span>
22:T753,multimap<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mm1<span class="token punctuation">;</span>
<span class="token comment">//multimap没有重载[]方法</span>
mm1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mm1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mm1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mm1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mm1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
23:T596,<span class="token keyword">auto</span> it2<span class="token operator">=</span>mm1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>it2<span class="token operator">!=</span>mm1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>it2<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it2<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"not found."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//a 3</span>
24:T667,mm1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it2<span class="token operator">=</span>mm1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>it2<span class="token operator">!=</span>mm1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>it2<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>it2<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"not found."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//not found.</span>
25:T706,set<span class="token operator">&lt;</span>string<span class="token operator">></span> s1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//也可以是set&lt;string> s1{"a","world","b","hello","a"};</span>
<span class="token comment">//也可以是set&lt;string> s1({"a","world","b","hello","a"});</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
a
b
hello
world
*/</span>
26:T8e9,<span class="token keyword">auto</span> it1<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> res<span class="token punctuation">;</span>

res<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it1<span class="token operator">=</span>res<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it1<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>res<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//c 1</span>

res<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it1<span class="token operator">=</span>res<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it1<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>res<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//c 0</span>
27:T85f,cout<span class="token operator">&lt;&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//5</span>

s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//4</span>
cout<span class="token operator">&lt;&lt;</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>

s1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>
cout<span class="token operator">&lt;&lt;</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
28:Tc55,s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

it1<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>it1<span class="token operator">!=</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"not found."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//a</span>

it1<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>it1<span class="token operator">!=</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"not found."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//not found.</span>
29:Tf1e,vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>arr1<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">//2 1 3 2 5 1 4 2 3 6 2 1 5 2 3 6 1</span>
cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">s_arr1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arr1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arr2</span><span class="token punctuation">(</span>s_arr1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s_arr1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>arr2<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">//1 2 3 4 5 6</span>
cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
2a:T562,multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ms1<span class="token punctuation">;</span>
ms1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ms1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ms1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ms1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ms1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
2b:Ta29,cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ms1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>ms1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//0</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ms1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">==</span>ms1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//1</span>
cout<span class="token operator">&lt;&lt;</span>ms1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//3</span>
cout<span class="token operator">&lt;&lt;</span>ms1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//5</span>
ms1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>ms1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//2</span>
2c:T7a1,stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
3
2
1
*/</span>
2d:T7a3,queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
1
2
3
*/</span>
2e:Tb71,priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q1<span class="token punctuation">;</span>
q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token operator">=</span>q1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
7
6
5
4
3
2
1
*/</span>
2f:T7fc,<span class="token keyword">struct</span> <span class="token class-name">DATE</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">;</span>
    <span class="token comment">//默认的优先队列是大根堆，把小于号重载成"大于"的含义相当于打破这种默认，变成小根堆</span>
    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>DATE a<span class="token punctuation">,</span>DATE b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">!=</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y<span class="token operator">></span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>m<span class="token operator">!=</span>b<span class="token punctuation">.</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>m<span class="token operator">></span>b<span class="token punctuation">.</span>m<span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span>d<span class="token operator">></span>b<span class="token punctuation">.</span>d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
30:Tf88,priority_queue<span class="token operator">&lt;</span>DATE<span class="token operator">></span> q2<span class="token punctuation">;</span>
q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2028</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2028</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2035</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2029</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2028</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    DATE date<span class="token operator">=</span>q2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>date<span class="token punctuation">.</span>y<span class="token operator">&lt;&lt;</span><span class="token char">'-'</span><span class="token operator">&lt;&lt;</span>date<span class="token punctuation">.</span>m<span class="token operator">&lt;&lt;</span><span class="token char">'-'</span><span class="token operator">&lt;&lt;</span>date<span class="token punctuation">.</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
2028-11-28
2028-12-23
2028-12-25
2029-1-1
2035-1-1
*/</span>
0:["oyehzzwNlcOmRVJbYAqfV",[[["",{"children":["(posts)",{"children":["24a",{"children":["cpp-stl",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(posts)",{"children":["24a",{"children":["cpp-stl",{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","h1",null,{"className":"x-title","children":"C++中STL的基本使用"}],["$","h2",null,{"className":"x-h1","children":"string 字符串"}],["$","h3",null,{"className":"x-h2","children":"初始化"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"string str1=\"hello\";\nstring str2(\"hello\");\nchar str3[10]=\"hello\";\nchar str4[10]=\"hello\";\n\n//string类型可以用等号判断值相等，char数组不能\ncout<<(str1==str2)<<endl; //1\ncout<<(str3==str4)<<endl; //0\ncout<<(str1==str3)<<endl; //1\ncout<<(str1==str4)<<endl; //1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$4"}}]}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"字符串常量不能相加。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<\"a\"+\"b\";\n//[Error] invalid operands of types 'const char [2]' and 'const char [2]' to binary 'operator+'\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[Error] invalid operands of types 'const char [2]' and 'const char [2]' to binary 'operator+'</span>\n"}}]}]]}]]}],["$","h3",null,{"className":"x-h2","children":"访问与遍历"}],["$","h4",null,{"className":"x-h3","children":"下标访问"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str1[1]<<endl; //e"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span>str1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//e</span>"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"访问最后一位"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str1.back()<<endl; //o"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//o</span>"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"下标遍历"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"for(int i=0;i<str1.size();i++)\n{\n    cout<<str1[i]<<' ';\n}\n//h e l l o\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>str1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//h e l l o</span>\n"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"迭代器遍历"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"for(string::iterator it=str1.begin();it!=str1.end();it++)\n{\n    cout<<*it<<' ';\n}\n//h e l l o\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"可以使用auto关键字简化编码，省略迭代器的类型。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"for(auto it=str1.begin();it!=str1.end()-2;it++)\n{\n    //用法和指针一样\n    cout<<*(it+2)<<' ';\n}\n//l l o\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$6"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"使用auto关键字"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"for(auto ch:str1)\n{\n    cout<<ch<<' ';\n}\n//h e l l o\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ch<span class=\"token operator\">:</span>str1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>ch<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//h e l l o</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"获取长度：length()和size()"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">length()</code>是沿用C语言的习惯，<code class=\"x-inline-highlight\">size()</code>是考虑到兼容STL容器，二者作用一致。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str1.size()<<endl; //5\ncout<<str1.length()<<endl; //5\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span>\ncout<span class=\"token operator\">&lt;&lt;</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span>\n"}}]}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这两个函数的返回值是无符号整数，直接和负数比较可能导致潜在问题。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<(str1.size()>-1)<<endl; //0\n\n//转成int类型就可以比了\nint s1=str1.size();\ncout<<(s1>-1)<<endl; //1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$7"}}]}]]}]]}],["$","h3",null,{"className":"x-h2","children":"清空、判断空串：clear()和empty()"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<\"*\"<<str1<<' '<<str1.empty()<<endl; //*hello 0\nstr1.clear();\ncout<<\"*\"<<str1<<' '<<str1.empty()<<endl; //* 1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"插入：insert()"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str.insert(pos,n,ch)</code>：向<code class=\"x-inline-highlight\">str</code>中插入<code class=\"x-inline-highlight\">n</code>个字符<code class=\"x-inline-highlight\">ch</code>，第一个字符的下标是<code class=\"x-inline-highlight\">pos</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str1.insert(pos,str2)</code>：向<code class=\"x-inline-highlight\">str</code>中插入字符串<code class=\"x-inline-highlight\">str2</code>，<code class=\"x-inline-highlight\">str2</code>的首位在<code class=\"x-inline-highlight\">str1</code>中下标是<code class=\"x-inline-highlight\">pos</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str2<<endl; //hello\nstr2.insert(str2.size(),\"world\");\nstr2.insert(5,1,' ');\ncout<<str2<<endl; //hello world\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"替换：replace()"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str.replace(pos,n1,n2,ch)</code>：将<code class=\"x-inline-highlight\">str</code>从下标<code class=\"x-inline-highlight\">pos</code>开始连续的<code class=\"x-inline-highlight\">n1</code>个字符替换成<code class=\"x-inline-highlight\">n2</code>个<code class=\"x-inline-highlight\">ch</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str1.replace(pos,n,str2)</code>：将<code class=\"x-inline-highlight\">str1</code>从下标<code class=\"x-inline-highlight\">pos</code>开始连续的<code class=\"x-inline-highlight\">n</code>个字符替换成<code class=\"x-inline-highlight\">str2</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str2<<endl; //hello world\nstr2.replace(5,1,3,'0');\ncout<<str2<<endl; //hello000world\nstr2.replace(5,3,\"1111\");\ncout<<str2<<endl; //hello1111world\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$a"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"删除：erase()"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str.erase(pos,n)</code>：将<code class=\"x-inline-highlight\">str</code>从下标<code class=\"x-inline-highlight\">pos</code>开始的<code class=\"x-inline-highlight\">n</code>个字符删除。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str2<<endl; //hello1111world\nstr2.erase(5,4);\ncout<<str2<<endl; //helloworld\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span>str2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//hello1111world</span>\nstr2<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout<span class=\"token operator\">&lt;&lt;</span>str2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//helloworld</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"切片：substr()"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str.substr(pos)</code>：取<code class=\"x-inline-highlight\">str</code>从下标<code class=\"x-inline-highlight\">pos</code>开始到结尾的字符串。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str.substr(pos,n)</code>：取<code class=\"x-inline-highlight\">str</code>从下标<code class=\"x-inline-highlight\">pos</code>开始的<code class=\"x-inline-highlight\">n</code>个字符。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str2.substr(2)<<endl; //lloworld\ncout<<str2.substr(2,6)<<endl; //llowor\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//lloworld</span>\ncout<span class=\"token operator\">&lt;&lt;</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//llowor</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"查找：find()"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str.find(sub)</code>：在<code class=\"x-inline-highlight\">str</code>中查找<code class=\"x-inline-highlight\">sub</code>第一次出现的位置。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">str.find(sub,pos)</code>：在<code class=\"x-inline-highlight\">str</code>中从下标<code class=\"x-inline-highlight\">pos</code>开始查找<code class=\"x-inline-highlight\">sub</code>第一次出现的位置。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str2<<endl; //helloworld\ncout<<str2.find(\"world\")<<endl; //5 (5是'w'的在str2中的下标)\n\n//没找到会返回string::npos，在int类型下是-1\ncout<<str2.find(\"abc\")<<' '<<string::npos<<endl; //18446744073709551615 18446744073709551615\nint idx=str2.find(\"abc\");\ncout<<idx<<endl; //-1\n\n//指定查找起点\ncout<<str2.find(\"o\")<<endl; //4\ncout<<str2.find(\"o\",5)<<endl; //6\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$b"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"应用：查找所有的字母'l'"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<str2<<endl; //helloworld\nfor(int idx=str2.find('l');idx!=-1;idx=str2.find('l',idx+1))\n{\n    printf(\"str2[%d]=%s\\n\",idx,\"l\");\n}\n/*\nstr2[2]=l\nstr2[3]=l\nstr2[8]=l\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"类型转换"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<stoi(\"234\")+1<<endl; //235\ncout<<stoi(\"-234.8\")+1<<endl; //-233\ncout<<stoi(\"00012\")<<endl; //12\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"应用：删去字符串前导0"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"手写时需要注意一个细节：如果字符串是全<code class=\"x-inline-highlight\">0</code>，则需要至少保留一个<code class=\"x-inline-highlight\">0</code>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<to_string(stoi(\"-00001\"))<<endl; //-1\ncout<<to_string(stoi(\"00000\"))<<endl; //0\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-00001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//-1</span>\ncout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"00000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span>\n"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"序列式容器：vector 动态数组"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//需要引入vector\n#include <vector>\n...\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//需要引入vector</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"初始化、访问、遍历"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"vector<int> v1;\nvector<string> v2={\"one\",\"two\",\"three\"};\n//也可以是vector<string> v2{\"one\",\"two\",\"three\"};\n//也可以是vector<string> v2({\"one\",\"two\",\"three\"});\n\nvector<int> v3(20); //创建20个元素，它们的默认初始值都为0\nvector<int> v4(20,-1); //创建20个元素，它们的初始值都为-1\n\ncout<<v2[1]<<' '<<v3[1]<<' '<<v4[1]<<endl; //two 0 -1\ncout<<v2.back()<<endl; //three\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"也可以与<code class=\"x-inline-highlight\">string</code>一样使用下标、迭代器和<code class=\"x-inline-highlight\">auto</code>关键字访问。"}}],["$","h3",null,{"className":"x-h2","children":"尾部添加元素"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">push_back()</code>和C++11新增加的<code class=\"x-inline-highlight\">emplace_back()</code>作用相同，但是底层实现的机制不同，<code class=\"x-inline-highlight\">emplace_back()</code>效率更高。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"v1.push_back(123);\nv1.emplace_back(456);\ncout<<v1[0]<<' '<<v1[1]<<endl; //123 456\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"插入元素"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">insert(it,x)</code>：在迭代器<code class=\"x-inline-highlight\">it</code>指定的位置之前插入新元素<code class=\"x-inline-highlight\">x</code>，并返回新插入元素位置的迭代器。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">insert(it,n,x)</code>：在迭代器<code class=\"x-inline-highlight\">it</code>指定的位置之前插入<code class=\"x-inline-highlight\">n</code>个新元素<code class=\"x-inline-highlight\">x</code>，并返回第一个新插入元素位置的迭代器。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">emplace(it,...args)</code>：和<code class=\"x-inline-highlight\">insert(it,x)</code>用法类似，<code class=\"x-inline-highlight\">...args</code>是与新插入元素的构造函数相对应的多个参数。同样效率更高，不过<code class=\"x-inline-highlight\">emplace()</code>每次只能插入一个元素。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"v1={0,1,2,3,4,5,6};\n\nauto it=v1.insert(v1.begin()+2,99);\nfor(auto v:v1) cout<<v<<' '; //0 1 99 2 3 4 5 6\ncout<<endl<<*it<<endl; //99\n\nit=v1.insert(v1.begin()+4,5,-1);\nfor(auto v:v1) cout<<v<<' '; //0 1 99 2 -1 -1 -1 -1 -1 3 4 5 6\ncout<<endl<<*it<<endl; //-1\n\nv1.emplace(v1.begin(),5);\ncout<<v1[0]<<' '<<*it<<endl; //5 5\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"关于内存管理和shrink_to_fit"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"vector可以看作是一个动态数组，会动态的申请内存空间。<code class=\"x-inline-highlight\">size</code>是容器的实际大小，<code class=\"x-inline-highlight\">capacity</code>是大小的上限。当<code class=\"x-inline-highlight\">vector</code>满载需要进行扩容时，会完全弃用旧空间，申请更大的新空间，再将元素复制到新空间中。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"vector<int> v5;\nfor(int i=0;i<6;i++)\n{\n    v5.push_back(i);\n    cout<<v5.size()<<' '<<v5.capacity()<<endl;\n}\n/*\n1 1\n2 2\n3 4\n4 4\n5 8\n6 8\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"因此，此前保存的迭代器可能在重新分配后失效！"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"it=v5.begin(); //假设我们保存了容器首部的迭代器\ncout<<*it<<endl; //v[0]=0\ncout<<v5.size()<<' '<<v5.capacity()<<endl; //6 8\n\nv5.insert(it,3,0); //原来size=6，capacity=8，插入3个会引起扩容\ncout<<v5.size()<<' '<<v5.capacity()<<endl; //9 12\ncout<<*it<<endl; //14032400 失效了\n\n//使用shrink_to_fit释放没有使用的内存(同样会完全重新分配内存)\nv5.shrink_to_fit();\ncout<<v5.size()<<' '<<v5.capacity()<<endl; //9 9\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"删除元素与清空、判空"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">pop_back()</code>：删除<code class=\"x-inline-highlight\">vector</code>容器中最后一个元素。该容器的大小<code class=\"x-inline-highlight\">size</code>会减<code class=\"x-inline-highlight\">1</code>，但容量<code class=\"x-inline-highlight\">capacity</code>不变。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">erase(it)</code>：删除<code class=\"x-inline-highlight\">vector</code>容器中迭代器<code class=\"x-inline-highlight\">it</code>指定的元素，并返回指向被删除元素下一个位置元素的迭代器。<code class=\"x-inline-highlight\">size</code>会减<code class=\"x-inline-highlight\">1</code>，但<code class=\"x-inline-highlight\">capacity</code>不变。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">erase(it1,it2)</code>：删除<code class=\"x-inline-highlight\">vector</code>容器中位于迭代器<code class=\"x-inline-highlight\">[it1,it2)</code>指定区域内的所有元素，并返回指向被删除区域下一个位置元素的迭代器。<code class=\"x-inline-highlight\">size</code>会减小，但<code class=\"x-inline-highlight\">capacity</code>不变。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">clear()</code>：删除<code class=\"x-inline-highlight\">vector</code>容器中所有的元素。<code class=\"x-inline-highlight\">size</code>变为<code class=\"x-inline-highlight\">0</code>，但<code class=\"x-inline-highlight\">capacity</code>不变。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"v1={0,1,2,3,4,5,6,7,8,9,10};\n\nv1.pop_back();\ncout<<v1.size()<<' '<<v1.capacity()<<endl; //10 14\n\nit=v1.erase(v1.begin()+5);\nfor(auto v:v1) cout<<v<<' '; //0 1 2 3 4 6 7 8 9\ncout<<endl<<*it<<endl; //6\ncout<<v1.size()<<' '<<v1.capacity()<<endl; //9 14\n\nit=v1.erase(v1.begin()+3,v1.begin()+6);\nfor(auto v:v1) cout<<v<<' '; //0 1 2 7 8 9\ncout<<endl<<*it<<endl; //7\ncout<<v1.size()<<' '<<v1.capacity()<<endl; //6 14\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"同样可以用<code class=\"x-inline-highlight\">empty()</code>判空。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"v1.clear();\ncout<<v1.empty()<<endl; //1\ncout<<v1.size()<<' '<<v1.capacity()<<endl; //0 14\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"排序"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"严格来说不属于C++ STL的范畴，需要用到<code class=\"x-inline-highlight\">sort()</code>函数。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//需要引入algorithm\n#include <algorithm>\n...\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//需要引入algorithm</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"v1={1,4,5,2,6,8};\nsort(v1.begin(),v1.end());\nfor(auto v:v1) cout<<v<<' '; //1 2 4 5 6 8\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$15"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"关于元组"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//需要引入tuple\n#include <tuple>\n...\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//需要引入tuple</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"pair 二元组"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">pair</code>将两个数据组合，它是由结构体实现，元素分别为<code class=\"x-inline-highlight\">first</code>和<code class=\"x-inline-highlight\">second</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"定义和初始化："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"pair<int,int> p1;\ncout<<p1.first<<' '<<p1.second<<endl; //0 0\n\npair<int,double> p2(1,3.14);\n//也可以是pair<int,double> p2{1,3.14};\n//也可以是pair<int,double> p2={1,3.14};\n//也可以是pair<int,double> p2({1,3.14});\ncout<<p2.first<<' '<<p2.second<<endl; //1 3.14\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"进行比较时，先比较<code class=\"x-inline-highlight\">pair.first</code>元素的大小，如果相等则继续比较<code class=\"x-inline-highlight\">pair.second</code>元素的大小："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"pair<int,double> p3(1,3.14);\npair<int,double> p4(1,2);\ncout<<(p2==p3)<<endl; //1\ncout<<(p3==p4)<<endl; //0\n\npair<int,int> p5(1,1);\npair<int,int> p6(1,2);\npair<int,int> p7(2,0);\ncout<<(p7>p6)<<endl; //1\ncout<<(p6>p5)<<endl; //1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$17"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"C++中可以对元组进行解构赋值："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"string name;\ndouble value;\npair<string,double> p8(\"pi\",3.14);\n\ntie(name,value)=p8;\ncout<<name<<' '<<value<<endl; //pi 3.14\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$18"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"应用：让函数返回多个值"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//输入(x,y)，输出(y,x)\npair<int,int> swapxy(pair<int,int> p)\n{\n    return make_pair(p.second,p.first);\n}\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//输入(x,y)，输出(y,x)</span>\npair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">swapxy</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//make_pair可以直接生成一个pair常量值\np1=swapxy(make_pair(2,7));\ncout<<p1.first<<' '<<p1.second<<endl; //7 2\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//make_pair可以直接生成一个pair常量值</span>\np1<span class=\"token operator\">=</span><span class=\"token function\">swapxy</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout<span class=\"token operator\">&lt;&lt;</span>p1<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span>p1<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//7 2</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"tuple 多元组"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">tuple</code>的用法类似，但不限制元素数量。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"tuple<int,int,int,double> t1(1,2,3,9.99);"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"取第<code class=\"x-inline-highlight\">i</code>个元素："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//取第i个元素使用get<i>(t)\ncout<<get<0>(t1)<<' '<<get<3>(t1)<<endl; //1 9.99\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//取第i个元素使用get&lt;i>(t)</span>\ncout<span class=\"token operator\">&lt;&lt;</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 9.99</span>\n"}}]}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上述方法的<code class=\"x-inline-highlight\">i</code>必须传入一个常量！"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"获取元组的大小："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//获取tuple大小\ncout<<tuple_size<tuple<int,int,int>>::value<<endl; //3\n//decltype(t1)实际是取了t1的类型\ncout<<tuple_size<decltype(t1)>::value<<endl; //4\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$19"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"解构的操作是一样的："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"int a,b,c;\ndouble d;\ntie(a,b,c,d)=t1;\ncout<<a<<' '<<b<<' '<<c<<' '<<d<<endl; //1 2 3 9.99\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1a"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"关联式容器：map 映射"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"序列式容器<code class=\"x-inline-highlight\">vector</code>储存的元素都是“值”的概念，关联式容器储存的元素是“键值对”的概念。如果已知目标元素的键值，则直接通过键就可以找到目标元素，不需要遍历整个容器。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"关联式容器存储的元素，默认会根据键值做升序排序。STL标准库在实现时底层选用的数据结构是<code class=\"x-inline-highlight\">红黑树</code>。"}}],["$","h3",null,{"className":"x-h2","children":"初始化、访问、遍历"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">map</code>中的元素默认按照键的顺序进行<span class=\"x-inline-strong\">从小到大</span>排序"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"map<string,double> m1;\nmap<string,double> m2={\n    {\"one\",1},\n    {\"two\",2},\n    {\"three\",3},\n};\n//也可以是map<string,double> m2{{\"one\",1},{\"two\",2},{\"three\",3}};\n//也可以是map<string,double> m2({{\"one\",1},{\"two\",2},{\"three\",3}});\n\nm1[\"a\"]=6;\nm1[\"b\"]=5;\nm1[\"c\"]=4;\nm1[\"d\"]=3; //这里相当于创建了m1[\"d\"]\nm1[\"e\"]=2;\nm1[\"d\"]=1; //这里相当于修改\n//实际上只要使用[key]取值，并且传入的key是新键，就会创建一个新键值对，值为类型默认值\n\ncout<<m1[\"c\"]<<endl; //4\n\nfor(auto it1=m1.begin();it1!=m1.end();it1++)\n{\n    cout<<it1->first<<' '<<it1->second<<endl;\n}\n/*\na 6\nb 5\nc 4\nd 1\ne 2\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1b"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"插入元素"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">insert(pair)</code>：插入一个键值对<code class=\"x-inline-highlight\">pair=(key,value)</code>。<br/>如果成功，返回<code class=\"x-inline-highlight\">(新插入的val的迭代器,true)</code>；<br/>如果失败，说明已经有键为<code class=\"x-inline-highlight\">key</code>的键值对，返回<code class=\"x-inline-highlight\">(此元素的迭代器,false)</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">emplace(...args)</code>：传入键值对的构造参数即可。同样效率更高，不过<code class=\"x-inline-highlight\">emplace()</code>每次只能插入一个元素。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"auto it1=m1.begin();\npair<decltype(m1)::iterator,bool> res;\n\nres=m1.insert(make_pair(\"f\",99));\nit1=res.first;\ncout<<it1->first<<' '<<it1->second; //f 99\ncout<<' '<<res.second<<endl; //1\n\nres=m1.insert({\"f\",88});\nit1=res.first;\ncout<<it1->first<<' '<<it1->second; //f 99\ncout<<' '<<res.second<<endl; //0\n\nres=m1.emplace(\"g\",55);\nit1=res.first;\ncout<<it1->first<<' '<<it1->second; //g 55\ncout<<' '<<res.second<<endl; //1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1c"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"删除元素与清空、判空"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">erase(key)</code>：删除<code class=\"x-inline-highlight\">key</code>键对应的键值对。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">clear()</code>：清空<code class=\"x-inline-highlight\">map</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<m1.size()<<endl; //7\n\nm1.erase(\"g\");\ncout<<m1.size()<<endl; //6\ncout<<m1.empty()<<endl; //0\n\nm1.clear();\ncout<<m1.size()<<endl; //0\ncout<<m1.empty()<<endl; //1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1d"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"查找"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">find(key)</code>：查找键为<code class=\"x-inline-highlight\">key</code>的元素，返回该元素的迭代器，找不到则返回迭代器<code class=\"x-inline-highlight\">end()</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"m1[\"a\"]=100;\nm1[\"b\"]=200;\nm1[\"c\"]=300;\n\nit1=m1.find(\"a\");\nif(it1!=m1.end())\n{\n    cout<<it1->first<<' '<<it1->second<<endl;\n}\nelse\n{\n    cout<<\"not found.\"<<endl;\n}//a 100\n\nit1=m1.find(\"d\");\nif(it1!=m1.end())\n{\n    cout<<it1->first<<' '<<it1->second<<endl;\n}\nelse\n{\n    cout<<\"not found.\"<<endl;\n}//not found.\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1e"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"二分查找"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">lower_bound(key)</code>返回指向第一个键值<span class=\"x-inline-strong\">大于等于</span><code class=\"x-inline-highlight\">key</code>的位置的迭代器，找不到则返回迭代器<code class=\"x-inline-highlight\">end()</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">upper_bound(key)</code>返回指向第一个键值<span class=\"x-inline-strong\">大于</span><code class=\"x-inline-highlight\">key</code>的位置的迭代，找不到则返回迭代器<code class=\"x-inline-highlight\">end()</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"m1.clear();\nm1[\"a\"]=1;\nm1[\"b\"]=2;\nm1[\"c\"]=3;\nm1[\"x\"]=4;\nm1[\"y\"]=5;\n\nit1=m1.lower_bound(\"b\");\ncout<<it1->first<<' '<<it1->second<<endl;//b 2\nit1=m1.upper_bound(\"b\");\ncout<<it1->first<<' '<<it1->second<<endl;//c 3\nit1=m1.lower_bound(\"j\");\ncout<<it1->first<<' '<<it1->second<<endl;//x 4\nit1=m1.upper_bound(\"j\");\ncout<<it1->first<<' '<<it1->second<<endl;//x 4\nit1=m1.upper_bound(\"y\");\ncout<<(it1==m1.end())<<endl;//1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1f"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"对于结构体类型"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果<code class=\"x-inline-highlight\">key</code>是结构体类型，需要定义比较函数。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"struct POINT{\n    double x,y;\n    //假如想按照平方距离从大到小排序\n    //默认的排序方式是从小到大，把小于号重载成\"大于\"的含义相当于打破这种默认\n    //或者理解为，排序方式是从小到大，那么我们就要把期望的结果定义为\"小\"的\n    friend bool operator <(POINT a,POINT b)\n    {\n        double da=a.x*a.x+a.y*a.y;\n        double db=b.x*b.x+b.y*b.y;\n        //我们期望\"平方距离大\"的元素在这种含义下是\"小的\"\n        //因此返回(da>db)的值，也就是这个条件为1的时候，我们认为前者是\"小的\"\n        return da>db;\n    }\n};\nstruct POINTDETAIL{\n    string name; //点的名字\n    vector<int> v; //假设每个点还对应了一些需要用vector储存的信息\n};\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$20"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"map<POINT,POINTDETAIL> m3;\n\n//不同的插入方式\nm3[{3,4}]={\"A点\",{1,2,3}};\nm3.insert(\n    make_pair(\n        (POINT){4,5},\n        (POINTDETAIL){\"B点\",{4,5,6}}\n    )\n);\nm3.insert(\n    { {1,5},{\"C点\",{7,8,9,10}} }\n);\nm3.emplace(\n    (POINT){4,4},\n    (POINTDETAIL){\"D点\",{2,3,5,7}}\n);\n\nfor(auto it1=m3.begin();it1!=m3.end();it1++)\n{\n    //it1指向一个键值对(key,val)\n    //it1->first是键key，key是一个POINT类型，具有x,y属性\n    //it1->second是值val，val是一个POINTDETAIL类型，具有name属性和v向量\n    cout<<it1->second.name<<\": \"<<it1->first.x<<' '<<it1->first.y;\n    cout<<\"   v=[\";\n    for(auto v:it1->second.v) cout<<v<<',';\n    cout<<\"\\b]\"<<endl;\n}\n/*\nB点: 4 5   v=[4,5,6]\nD点: 4 4   v=[2,3,5,7]\nC点: 1 5   v=[7,8,9,10]\nA点: 3 4   v=[1,2,3]\n*/\n\nm3[{4,3}]={\"E点\",{5,6,7}};//E点\ncout<<m3[{3,4}].name<<endl;\n//因为定义的是平方和作为判断依据，{3,4}和{4,3}被视为同一个键而发生了重新赋值\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$21"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"multimap"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">multimap</code>允许键值重复。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"multimap<string,int> mm1;\n//multimap没有重载[]方法\nmm1.emplace(\"a\",3);\nmm1.emplace(\"a\",1);\nmm1.emplace(\"a\",2);\nmm1.emplace(\"b\",4);\nmm1.emplace(\"b\",5);\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$22"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">find(key)</code>返回找到的第一个值。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"auto it2=mm1.find(\"a\");\nif(it2!=mm1.end())\n{\n    cout<<it2->first<<' '<<it2->second<<endl;\n}\nelse\n{\n    cout<<\"not found.\"<<endl;\n}//a 3\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$23"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">count(key)</code>返回键的数量（这个普通的<code class=\"x-inline-highlight\">map</code>也可以用）。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<mm1.count(\"a\")<<endl; //3"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"cout<span class=\"token operator\">&lt;&lt;</span>mm1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">erase(key)</code>会擦除<code class=\"x-inline-highlight\">key</code>对应的所有值。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"mm1.erase(\"b\");\nit2=mm1.find(\"b\");\nif(it2!=mm1.end())\n{\n    cout<<it2->first<<' '<<it2->second<<endl;\n}\nelse\n{\n    cout<<\"not found.\"<<endl;\n}//not found.\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$24"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"关联式容器：set 集合"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"使用<code class=\"x-inline-highlight\">set</code>容器存储的各个键值对，要求键<code class=\"x-inline-highlight\">key</code>和值<code class=\"x-inline-highlight\">value</code>必须相等。实际上这可以看作，<code class=\"x-inline-highlight\">set</code>容器只需要一个<code class=\"x-inline-highlight\">key</code>信息，即可成功将元素存储起来。同样的，<code class=\"x-inline-highlight\">set</code>也会对元素进行默认从小到大的排序。"}}],["$","h3",null,{"className":"x-h2","children":"初始化、访问、遍历"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"set<string> s1={\"a\",\"world\",\"b\",\"hello\",\"a\"};\n//也可以是set<string> s1{\"a\",\"world\",\"b\",\"hello\",\"a\"};\n//也可以是set<string> s1({\"a\",\"world\",\"b\",\"hello\",\"a\"});\n\nfor(auto it=s1.begin();it!=s1.end();it++)\n{\n    cout<<*it<<endl;\n}\n/*\na\nb\nhello\nworld\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$25"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"插入元素"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">insert(x)</code>：插入一个元素<code class=\"x-inline-highlight\">x</code>。<br/>如果成功，返回<code class=\"x-inline-highlight\">(新插入的x的迭代器,true)</code>；<br/>如果失败，说明已经有元素<code class=\"x-inline-highlight\">x</code>，返回<code class=\"x-inline-highlight\">(x的迭代器,false)</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">emplace(...args)</code>：传入键值对的构造参数即可。同样效率更高，不过<code class=\"x-inline-highlight\">emplace()</code>每次只能插入一个元素。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"auto it1=s1.begin();\npair<decltype(s1)::iterator,bool> res;\n\nres=s1.insert(\"c\");\nit1=res.first;\ncout<<*it1<<' '<<res.second<<endl; //c 1\n\nres=s1.emplace(\"c\");\nit1=res.first;\ncout<<*it1<<' '<<res.second<<endl; //c 0\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$26"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"删除元素与清空、判空"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">erase(x)</code>：删除元素<code class=\"x-inline-highlight\">x</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">clear()</code>：清空<code class=\"x-inline-highlight\">set</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<s1.size()<<endl; //5\n\ns1.erase(\"hello\");\ncout<<s1.size()<<endl; //4\ncout<<s1.empty()<<endl; //0\n\ns1.clear();\ncout<<s1.size()<<endl; //0\ncout<<s1.empty()<<endl; //1\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$27"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"查找"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">find(x)</code>：查找元素<code class=\"x-inline-highlight\">x</code>，返回该元素的迭代器，找不到则返回迭代器<code class=\"x-inline-highlight\">end()</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"s1.insert(\"a\");\ns1.insert(\"b\");\ns1.insert(\"c\");\n\nit1=s1.find(\"a\");\nif(it1!=s1.end())\n{\n    cout<<*it1<<endl;\n}\nelse\n{\n    cout<<\"not found.\"<<endl;\n}//a\n\nit1=s1.find(\"d\");\nif(it1!=s1.end())\n{\n    cout<<*it1<<endl;\n}\nelse\n{\n    cout<<\"not found.\"<<endl;\n}//not found.\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$28"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"二分查找"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"用法与<code class=\"x-inline-highlight\">map</code>一致，见<code class=\"x-inline-highlight\">map</code>。"}}],["$","h3",null,{"className":"x-h2","children":"应用：数组去重"}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这个方法去重顺便还排了序，注意效率！"}}]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"vector<int> arr1={2,1,3,2,5,1,4,2,3,6,2,1,5,2,3,6,1};\nfor(auto v:arr1) cout<<v<<' '; //2 1 3 2 5 1 4 2 3 6 2 1 5 2 3 6 1\ncout<<endl;\nset<int> s_arr1(arr1.begin(),arr1.end());\nvector<int> arr2(s_arr1.begin(),s_arr1.end());\nfor(auto v:arr2) cout<<v<<' '; //1 2 3 4 5 6\ncout<<endl;\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$29"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"multiset"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">multiset</code>允许元素重复。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"multiset<int> ms1;\nms1.emplace(1);\nms1.emplace(2);\nms1.emplace(2);\nms1.emplace(2);\nms1.emplace(3);\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2a"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">find()</code>、<code class=\"x-inline-highlight\">count()</code>、<code class=\"x-inline-highlight\">erase()</code>与<code class=\"x-inline-highlight\">multimap</code>类似。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"cout<<(ms1.find(1)==ms1.end())<<endl; //0\ncout<<(ms1.find(5)==ms1.end())<<endl; //1\ncout<<ms1.count(2)<<endl; //3\ncout<<ms1.size()<<endl; //5\nms1.erase(2);\ncout<<ms1.size()<<endl; //2\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2b"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"无序容器"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"无序容器也使用“键值对”的方式存储数据。由于不需要维持有序，无序容器的底层实现采用的是<code class=\"x-inline-highlight\">哈希表</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"无序容器包括无序映射<code class=\"x-inline-highlight\">unordered_map</code>和无序集合<code class=\"x-inline-highlight\">unordered_set</code>等。它们用法与<code class=\"x-inline-highlight\">map</code>和<code class=\"x-inline-highlight\">set</code>类似，但是不会维持键值有序。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果使用自定义结构体作为键值，需要提供一个哈希函数。C++标准库提供了<code class=\"x-inline-highlight\">hash</code>模板类，可以用于自定义类型的哈希函数。本文不对无序容器进行展开介绍。"}}],["$","h2",null,{"className":"x-h1","children":"stack 栈"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//需要引入stack\n#include <stack>\n...\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//需要引入stack</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">size()</code>：获取元素数量。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">empty()</code>：判空。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">push(x)</code>：压入一个元素<code class=\"x-inline-highlight\">x</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">top()</code>：返回栈顶元素。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">pop()</code>：弹出栈顶元素。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"stack<int> s;\ns.push(1);\ns.push(2);\ns.push(3);\n\nwhile(!s.empty())\n{\n    int x=s.top();\n    s.pop();\n    cout<<x<<endl;\n}\n/*\n3\n2\n1\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2c"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"queue 队列"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//需要引入queue\n#include <queue>\n...\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//需要引入queue</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">size()</code>：获取元素数量。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">empty()</code>：判空。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">push(x)</code>：压入一个元素<code class=\"x-inline-highlight\">x</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">front()</code>：返回队首元素。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">back()</code>：返回队尾元素。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">pop()</code>：弹出队首元素。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"queue<int> q;\nq.push(1);\nq.push(2);\nq.push(3);\n\nwhile(!q.empty())\n{\n    int x=q.front();\n    q.pop();\n    cout<<x<<endl;\n}\n/*\n1\n2\n3\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2d"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"priority_queue 优先队列"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"优先队列是一种特殊的队列，它的出队顺序是按照元素的优先级来的。优先队列默认是<code class=\"x-inline-highlight\">大根堆</code>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"//需要引入queue\n#include <queue>\n...\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">//需要引入queue</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">size()</code>：获取元素数量。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">empty()</code>：判空。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">push(x)</code>：压入一个元素<code class=\"x-inline-highlight\">x</code>。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">top()</code>：返回堆顶元素。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">pop()</code>：弹出堆顶元素。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"priority_queue<int> q1;\nq1.push(7);\nq1.push(2);\nq1.push(5);\nq1.push(6);\nq1.push(4);\nq1.push(1);\nq1.push(3);\n\nwhile(!q1.empty())\n{\n    int x=q1.top();\n    q1.pop();\n    cout<<x<<endl;\n}\n/*\n7\n6\n5\n4\n3\n2\n1\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2e"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"对于结构体类型"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"struct DATE {\n    int y,m,d;\n    //默认的优先队列是大根堆，把小于号重载成\"大于\"的含义相当于打破这种默认，变成小根堆\n    friend bool operator <(DATE a,DATE b)\n    {\n        if(a.y!=b.y) return a.y>b.y;\n        if(a.m!=b.m) return a.m>b.m;\n        return a.d>b.d;\n    }\n};\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$2f"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"C++"}],["$","$L3",null,{"className":"x-codeblock-header-copy","text":"priority_queue<DATE> q2;\nq2.push({2028,12,23});\nq2.push({2028,11,28});\nq2.push({2035,1,1});\nq2.push({2029,1,1});\nq2.push({2028,12,25});\n\nwhile(!q2.empty())\n{\n    DATE date=q2.top();\n    q2.pop();\n    cout<<date.y<<'-'<<date.m<<'-'<<date.d<<endl;\n}\n/*\n2028-11-28\n2028-12-23\n2028-12-25\n2029-1-1\n2035-1-1\n*/\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$30"}}]}]]}]],null]]},["$","$L31",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","24a","children","cpp-stl","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L32",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/55722f4e6a890f7d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L31",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","24a","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L32",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"y-center-wrapper","children":["$","$L31",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L32",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$L33",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$L34",null,{"children":[["$","$L35",null,{}],["$","$L31",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L32",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0f7cce8b0dae9908.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c85f1c0b36ab1cfc.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/54d581b7516b52b4.css","precedence":"next","crossOrigin":""}]],"$L36"]]]]
36:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"C++中STL的基本使用 - string vector map set queue stack priority_queue - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24a/cpp-stl/"}]]
1:null
