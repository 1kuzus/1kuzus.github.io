2:I[4500,["2202","static/chunks/2202-efd885462b29519a.js","244","static/chunks/244-cd228004bd8a77c9.js","5524","static/chunks/app/(blogs)/24a/csp-2023-09/page-42541947708d535d.js"],""]
7:I[5613,[],""]
8:I[1778,[],""]
9:I[9806,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-f0f62162d7e2bce9.js"],""]
a:I[3393,["8792","static/chunks/8792-72030bcaaad25c8d.js","9135","static/chunks/app/(blogs)/layout-f0f62162d7e2bce9.js"],""]
b:I[5694,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-7a07309042b190b6.js"],"GlobalProvider"]
c:I[397,["8792","static/chunks/8792-72030bcaaad25c8d.js","3185","static/chunks/app/layout-7a07309042b190b6.js"],""]
3:Tc02,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">;</span>
<span class="token keyword">int</span> dxi<span class="token punctuation">,</span>dyi<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>dxi<span class="token operator">>></span>dyi<span class="token punctuation">;</span>
        dx<span class="token operator">+=</span>dxi<span class="token punctuation">,</span>dy<span class="token operator">+=</span>dyi<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">+</span>dx<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>y<span class="token operator">+</span>dy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
3 2
10 10
0 0
10 -20
1 -1
0 0

out:
21 -11
20 -10
*/</span>
4:T1e9d,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>opt<span class="token punctuation">;</span>
<span class="token keyword">double</span> vi<span class="token punctuation">;</span>
<span class="token keyword">double</span> k<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>theta<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>opt<span class="token operator">>></span>vi<span class="token punctuation">;</span>
        <span class="token comment">//拉伸</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>vi<span class="token punctuation">;</span>
            theta<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>theta<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//旋转</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            theta<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>theta<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>vi<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> qi<span class="token punctuation">,</span>qj<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>qi<span class="token operator">>></span>qj<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>
        <span class="token keyword">double</span> kij<span class="token operator">=</span>k<span class="token punctuation">[</span>qj<span class="token punctuation">]</span><span class="token operator">/</span>k<span class="token punctuation">[</span>qi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> thetaij<span class="token operator">=</span>theta<span class="token punctuation">[</span>qj<span class="token punctuation">]</span><span class="token operator">-</span>theta<span class="token punctuation">[</span>qi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> new_x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>thetaij<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>thetaij<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> new_y<span class="token operator">=</span>x<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>thetaij<span class="token punctuation">)</span><span class="token operator">+</span>y<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>thetaij<span class="token punctuation">)</span><span class="token punctuation">;</span>
        new_x<span class="token operator">*=</span>kij<span class="token punctuation">;</span>
        new_y<span class="token operator">*=</span>kij<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span>"<span class="token operator">%</span><span class="token number">.6lf</span> <span class="token operator">%</span><span class="token number">.6lf</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
10 5
2 0.59
2 4.956
1 0.997
1 1.364
1 1.242
1 0.82
2 2.824
1 0.716
2 0.178
2 4.094
1 6 -953188 -946637
1 9 969538 848081
4 7 -114758 522223
1 9 -535079 601597
8 8 159430 -511187

out:
-1858706.758 -83259.993
-1261428.46 201113.678
-75099.123 -738950.159
-119179.897 -789457.532
114151.88 -366009.892
*/</span>
5:T63fe,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOD</span> <span class="token expression"><span class="token number">1000000007</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">POLYNODE</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> type<span class="token punctuation">;</span><span class="token comment">//0:运算符 1:xi 2:常数</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//常数值</span>
    <span class="token keyword">int</span> xid<span class="token punctuation">;</span><span class="token comment">//xi的i</span>
    string opt<span class="token punctuation">;</span><span class="token comment">//运算符</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token comment">//前向传播节点值</span>
    POLYNODE <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>xid<span class="token punctuation">;</span>
string poly<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span>string sep<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>
    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">=</span>i<span class="token operator">+=</span>sep<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sep<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>i<span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
POLYNODE <span class="token operator">*</span><span class="token function">makePolyTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> parts<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>poly<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">&lt;</span>POLYNODE<span class="token operator">*</span><span class="token operator">></span> s<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p<span class="token operator">:</span>parts<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        POLYNODE <span class="token operator">*</span>node<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">(</span>POLYNODE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//运算符</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token string">"+"</span><span class="token operator">||</span>p<span class="token operator">==</span><span class="token string">"-"</span><span class="token operator">||</span>p<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            POLYNODE <span class="token operator">*</span>lc<span class="token punctuation">,</span><span class="token operator">*</span>rc<span class="token punctuation">;</span>
            lc<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rc<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>type<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>opt<span class="token operator">=</span>p<span class="token punctuation">;</span>
            node<span class="token operator">-></span>lchild<span class="token operator">=</span>lc<span class="token punctuation">;</span>
            node<span class="token operator">-></span>rchild<span class="token operator">=</span>rc<span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//xi</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'x'</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            node<span class="token operator">-></span>type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>xid<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//常数</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            node<span class="token operator">-></span>type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>c<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">forward</span><span class="token punctuation">(</span>POLYNODE <span class="token operator">*</span>root<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-></span>val<span class="token operator">=</span>a<span class="token punctuation">[</span>root<span class="token operator">-></span>xid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>type<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        root<span class="token operator">-></span>val<span class="token operator">=</span>root<span class="token operator">-></span>c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        POLYNODE <span class="token operator">*</span>lc<span class="token operator">=</span>root<span class="token operator">-></span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rc<span class="token operator">=</span>root<span class="token operator">-></span>rchild<span class="token punctuation">;</span>
        <span class="token function">forward</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">forward</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>opt<span class="token operator">==</span><span class="token string">"+"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            root<span class="token operator">-></span>val<span class="token operator">=</span><span class="token punctuation">(</span>lc<span class="token operator">-></span>val<span class="token operator">+</span>rc<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>opt<span class="token operator">==</span><span class="token string">"-"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            root<span class="token operator">-></span>val<span class="token operator">=</span><span class="token punctuation">(</span>rc<span class="token operator">-></span>val<span class="token operator">-</span>lc<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>opt<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            root<span class="token operator">-></span>val<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>lc<span class="token operator">-></span>val<span class="token operator">*</span>rc<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">grad</span><span class="token punctuation">(</span>POLYNODE <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">int</span> xid<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>xid<span class="token operator">==</span>xid<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>type<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        POLYNODE <span class="token operator">*</span>lc<span class="token operator">=</span>root<span class="token operator">-></span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rc<span class="token operator">=</span>root<span class="token operator">-></span>rchild<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>opt<span class="token operator">==</span><span class="token string">"+"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">grad</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span>xid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">grad</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span>xid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>opt<span class="token operator">==</span><span class="token string">"-"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">grad</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span>xid<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">grad</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span>xid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>opt<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> lgrad<span class="token operator">=</span><span class="token function">grad</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> rgrad<span class="token operator">=</span><span class="token function">grad</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>lgrad<span class="token operator">*</span>rc<span class="token operator">-></span>val<span class="token operator">+</span>rgrad<span class="token operator">*</span>lc<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>poly<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读回车</span>
    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>poly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    POLYNODE <span class="token operator">*</span>root<span class="token operator">=</span><span class="token function">makePolyTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>xid<span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">forward</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token function">grad</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>xid<span class="token punctuation">)</span><span class="token operator">+</span>MOD<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
2 2
x1 x1 x1 * x2 + *
1 2 3
2 3 4

out:
15
3

in:
3 5
x2 x2 * x2 * 0 + -100000 -100000 * x2 * -
3 100000 100000 100000
2 0 0 0
2 0 -1 0
2 0 1 0
2 0 100000 0

out:
0
70
73
73
999999867
*/</span>
6:T74c4,<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token comment">/*
    3     2     1
     \    |    /
      \   |   /
       \  |  /
        \ | /
_________\|/_________0
*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span>
<span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cos<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sin<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> changes<span class="token punctuation">;</span><span class="token comment">//需要变换的员工的id</span>
unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> dirs<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">addPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dirs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>  <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>id<span class="token punctuation">;</span>
    dirs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>id<span class="token punctuation">;</span>
    dirs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>  <span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>id<span class="token punctuation">;</span>
    dirs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>id<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">deletePos</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dirs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dirs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dirs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dirs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> dx<span class="token operator">=</span>x<span class="token operator">-</span>u<span class="token punctuation">,</span>dy<span class="token operator">=</span>y<span class="token operator">-</span>v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> new_dx<span class="token operator">=</span>dx<span class="token operator">*</span>cos<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-</span>dy<span class="token operator">*</span>sin<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>new_dy<span class="token operator">=</span>dx<span class="token operator">*</span>sin<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>dy<span class="token operator">*</span>cos<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//非90度整数倍方向旋转非90度整数倍角单独修正</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&amp;&amp;</span>dy<span class="token punctuation">)</span> new_dx<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">,</span>new_dy<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>u<span class="token operator">+</span>new_dx<span class="token punctuation">,</span>v<span class="token operator">+</span>new_dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//检查一个新找到的员工能不能更新k</span>
<span class="token keyword">void</span> <span class="token function">checkDirectionUpdate</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">,</span><span class="token keyword">int</span> pos_val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>it<span class="token operator">-></span>first<span class="token operator">-</span>pos_val<span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        changes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>it<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>it<span class="token operator">-></span>first<span class="token operator">-</span>pos_val<span class="token punctuation">)</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        changes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        k<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>it<span class="token operator">-></span>first<span class="token operator">-</span>pos_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        changes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>it<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//检查四个方向上能不能找到员工</span>
<span class="token keyword">void</span> <span class="token function">checkDirection</span><span class="token punctuation">(</span><span class="token keyword">int</span> dir_id<span class="token punctuation">,</span><span class="token keyword">int</span> locator<span class="token punctuation">,</span><span class="token keyword">int</span> pos_val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dirs<span class="token punctuation">[</span>dir_id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token operator">!=</span>dirs<span class="token punctuation">[</span>dir_id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> it<span class="token operator">=</span>dirs<span class="token punctuation">[</span>dir_id<span class="token punctuation">]</span><span class="token punctuation">[</span>locator<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>pos_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>dirs<span class="token punctuation">[</span>dir_id<span class="token punctuation">]</span><span class="token punctuation">[</span>locator<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">checkDirectionUpdate</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>pos_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token operator">=</span>dirs<span class="token punctuation">[</span>dir_id<span class="token punctuation">]</span><span class="token punctuation">[</span>locator<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>pos_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>dirs<span class="token punctuation">[</span>dir_id<span class="token punctuation">]</span><span class="token punctuation">[</span>locator<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            it<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token function">checkDirectionUpdate</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>pos_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    k<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">;</span>
    changes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkDirection</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>v  <span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkDirection</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token operator">-</span>u<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkDirection</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>u  <span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkDirection</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>v<span class="token operator">+</span>u<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//k不能大于到(u,v)到边界的位置</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">-</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> id<span class="token operator">:</span>changes<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> old_x<span class="token operator">=</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>old_y<span class="token operator">=</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">deletePos</span><span class="token punctuation">(</span>old_x<span class="token punctuation">,</span>old_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> id<span class="token operator">:</span>changes<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> old_x<span class="token operator">=</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>old_y<span class="token operator">=</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> new_x<span class="token punctuation">,</span>new_y<span class="token punctuation">;</span>
            <span class="token function">tie</span><span class="token punctuation">(</span>new_x<span class="token punctuation">,</span>new_y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">nextPos</span><span class="token punctuation">(</span>old_x<span class="token punctuation">,</span>old_y<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>new_x<span class="token punctuation">,</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>new_y<span class="token punctuation">;</span>
            <span class="token function">addPos</span><span class="token punctuation">(</span>new_x<span class="token punctuation">,</span>new_y<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>p<span class="token operator">>></span>q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>id<span class="token operator">&lt;</span>p<span class="token punctuation">;</span>id<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>
        pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
        <span class="token function">addPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>u<span class="token operator">>></span>v<span class="token operator">>></span>t<span class="token punctuation">;</span>
        <span class="token function">work</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>id<span class="token operator">&lt;</span>p<span class="token punctuation">;</span>id<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token operator">^=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>pos<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
in:
3 3 9 1
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
2 2 1

out:
20
*/</span>
0:["Z88cIXpAGJTeT4Lmz41Ex",[[["",{"children":["(blogs)",{"children":["24a",{"children":["csp-2023-09",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(blogs)",{"children":["24a",{"children":["csp-2023-09",{"children":["__PAGE__",{},["$L1",[["$","h1",null,{"className":"x-title","children":"CSP 202309 T1-T4题解"}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"T1 坐标变换（其一）"}]}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$3"}}]}]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"T2 坐标变换（其二）"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"维护前缀和、前缀积。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$4"}}]}]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"T3 梯度求解"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"可以就把后缀表达式原封不动的存在一颗树上，然后对每个节点记录前向传播值，前向传播过程和接下来求梯度都可以递归实现。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}]}],["$","h2",null,{"className":"x-h1","children":["$","$L2",null,{"excludeFromContents":"$undefined","children":"T4 阴阳龙"}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"看到员工数量级是比较小的，想到去维护行、列、正反对角线四个方向上的员工位置，利用C++ STL的<code class=\"x-inline-highlight\">map</code>存储，键值对为<code class=\"x-inline-highlight\">(pos_val,id)</code>，其中这个<code class=\"x-inline-highlight\">pos_val</code>在竖直方向是员工的<code class=\"x-inline-highlight\">y</code>坐标，其他方向是<code class=\"x-inline-highlight\">x</code>坐标（其实两条对角线方向上取哪个都行），<code class=\"x-inline-highlight\">id</code>是员工的编号。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">map</code>提供了<code class=\"x-inline-highlight\">lower_bound</code>和<code class=\"x-inline-highlight\">upper_bound</code>函数，可以二分找到第一个键值<span class=\"x-inline-strong\">大于等于</span>和<span class=\"x-inline-strong\">大于</span>给定键的元素；如果想找到第一个键值<span class=\"x-inline-strong\">小于</span>给定键的元素，可以在判断<code class=\"x-inline-highlight\">lower_bound</code>返回的不指向容器首部后，再移到前一个位置（<code class=\"x-inline-highlight\">it--</code>）。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在每个方向上我们都需要若干个这样的<code class=\"x-inline-highlight\">map</code>，具体地说，我们需要<code class=\"x-inline-highlight\">n</code>个存储垂直方向的、<code class=\"x-inline-highlight\">m</code>个存储水平方向的、<code class=\"x-inline-highlight\">2</code>*<code class=\"x-inline-highlight\">n+m-1</code>个存储两条对角线方向的。提前开好的话占空间比较大，考虑用<code class=\"x-inline-highlight\">unordered_map</code>存储这些<code class=\"x-inline-highlight\">map</code>。以对角线方向为例，可以用<code class=\"x-inline-highlight\">x+y</code>和<code class=\"x-inline-highlight\">y-x</code>作为定位到具体<code class=\"x-inline-highlight\">map</code>的键，我们并不需要这些键是有序的，所以用<code class=\"x-inline-highlight\">unordered_map</code>就可以了。"}}],["$","div",null,{"className":"x-codeblock","children":["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$6"}}]}]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24a","children","csp-2023-09","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99d35e134c5cca0c.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children","24a","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"id":"blog-layout","children":[["$","div",null,{"id":"main","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(blogs)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$L9",null,{}],["$","$La",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}]]}],["$","body",null,{"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","div",null,{"id":"notfound-404","children":"404"}],["$","div",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/eccd2e7a1149e571.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/391c9d793ecdcfc9.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bbd99870a93ab979.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"CSP 202309 T1-T4题解 - 坐标变换（其一） 坐标变换（其二） 梯度求解 阴阳龙 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24a/csp-2023-09/"}]]
1:null
