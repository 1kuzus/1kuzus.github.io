2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-c055ea9888416fd7.js"],""]
3:I[86510,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-c055ea9888416fd7.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-c055ea9888416fd7.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-832d9b697ba819a6.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-832d9b697ba819a6.js"],""]
8:["slug","24c/assembly-4","c"]
0:["5OJUqVj6x1bNC-OuxXRYQ",[[["",{"children":[["slug","24c/assembly-4","c"],{"children":["__PAGE__?{\"slug\":[\"24c\",\"assembly-4\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24c/assembly-4","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"【汇编语言】流程转移与子程序"}],["$","$L3",null,{"path":"/24c/assembly-4/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9687af492632970b.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9dc17cfeb42615f9.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-c055ea9888416fd7.js"],""]
f:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-c055ea9888416fd7.js"],""]
e:T7bb,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">3
</span>           <span class="token function">mov</span> <span class="token register variable">bx</span>,<span class="token number">2
</span>           <span class="token function">jmp</span> <span class="token keyword">short</span> s1
           <span class="token function">mov</span> <span class="token register variable">cx</span>,<span class="token number">1
</span>    s1:    <span class="token function">add</span> <span class="token register variable">ax</span>,<span class="token number">1
</span>           <span class="token function">jmp</span> <span class="token keyword">near</span> <span class="token keyword">ptr</span> s2
           <span class="token keyword">db</span>  <span class="token number">176h </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
    s2:    <span class="token function">add</span> <span class="token register variable">bx</span>,<span class="token number">1
</span>           <span class="token function">jmp</span> <span class="token keyword">far</span> <span class="token keyword">ptr</span> s3
           <span class="token keyword">db</span>  <span class="token number">234h </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
    s3:    <span class="token function">add</span> <span class="token register variable">cx</span>,<span class="token number">1
</span>
           <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span> <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
10:Tb4f,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ss</span>:stcksg

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">2
</span>           <span class="token function">push</span> <span class="token register variable">ax</span>
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">5
</span>           <span class="token function">push</span> <span class="token register variable">ax</span>
           <span class="token function">call</span> cube
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>
    cube:  <span class="token function">push</span> <span class="token register variable">bp</span>           <span class="token comment">;保存BP</span>
           <span class="token function">mov</span>  <span class="token register variable">bp</span>,<span class="token register variable">sp</span>
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token operator">[</span><span class="token register variable">bp</span><span class="token operator">+</span><span class="token number">4]</span>
           <span class="token function">add</span>  <span class="token register variable">ax</span>,<span class="token operator">[</span><span class="token register variable">bp</span><span class="token operator">+</span><span class="token number">6]</span>
           <span class="token function">mov</span>  <span class="token register variable">bp</span>,<span class="token register variable">ax</span>        <span class="token comment">;再次利用BP，把x+y的结果保存在BP中</span>
           <span class="token function">mul</span>  <span class="token register variable">bp</span>
           <span class="token function">mul</span>  <span class="token register variable">bp</span>
           <span class="token function">pop</span>  <span class="token register variable">bp</span>           <span class="token comment">;恢复BP</span>
           <span class="token function">ret</span>  <span class="token number">4 </span>           <span class="token comment">;返回时清除参数</span>
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
11:T100f,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token string">'abcdefg'</span>,<span class="token number">9 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
           <span class="token keyword">db</span> <span class="token string">'hello'</span>,<span class="token number">11 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
           <span class="token keyword">db</span> <span class="token string">'conversation'</span>,<span class="token number">4 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
           <span class="token keyword">db</span> <span class="token string">'masm'</span>,<span class="token number">12 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>

           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">4
</span>    s:     <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token register variable">bx</span>
           <span class="token function">call</span> func
           <span class="token function">add</span>  <span class="token register variable">bx</span>,<span class="token number">10h
</span>           <span class="token function">loop</span> s

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>
    func:
           <span class="token function">push</span> <span class="token register variable">cx</span>
           <span class="token function">push</span> <span class="token register variable">si</span>
           <span class="token function">mov</span>  <span class="token register variable">ch</span>,<span class="token number">0
</span>    w:     <span class="token function">mov</span>  <span class="token register variable">cl</span>,<span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>                    <span class="token comment">;遇到0就停止</span>
           <span class="token function">jcxz</span> return
           <span class="token function">and</span>  <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>,<span class="token number">11011111b
</span>           <span class="token function">inc</span>  <span class="token register variable">si</span>
           <span class="token function">jmp</span>  w
    return:
           <span class="token function">pop</span>  <span class="token register variable">si</span>
           <span class="token function">pop</span>  <span class="token register variable">cx</span>
           <span class="token function">ret</span>
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
5:[["$","h2",null,{"className":"x-h1","children":"nop指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">nop</code>指令的机器码占一个字节，起占位作用。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"nop"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">nop</span>"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"用offset取得标号的偏移地址"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"例如下例，由于有共<code class=\"x-inline-highlight\">2</code>字节的<code class=\"x-inline-highlight\">nop</code>占位指令，<code class=\"x-inline-highlight\">offset s</code>相当于<code class=\"x-inline-highlight\">2</code>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n    start:\n           nop\n           nop\n    s:     mov ax, offset s    ;相当于mov ax,2\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">assume</span> <span class=\"token register variable\">cs</span>:codesg\ncodesg <span class=\"token keyword\">segment</span>\n    start:\n           <span class=\"token function\">nop</span>\n           <span class=\"token function\">nop</span>\n    s:     <span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>, <span class=\"token keyword\">offset</span> s    <span class=\"token comment\">;相当于mov ax,2</span>\ncodesg <span class=\"token keyword\">ends</span>\n<span class=\"token keyword\">end</span> start\n"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"jmp指令高级用法"}],["$","h3",null,{"className":"x-h2","children":"段内转移"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"短转移：<code class=\"x-inline-highlight\">short</code>指明此处位移为<code class=\"x-inline-highlight\">8</code>位位移，范围为<code class=\"x-inline-highlight\">-128</code>~<code class=\"x-inline-highlight\">127</code>；"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"jmp short s  ;(ip)=(ip)+8位位移"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">jmp</span> <span class=\"token keyword\">short</span> s  <span class=\"token comment\">;(ip)=(ip)+8位位移</span>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"近转移：<code class=\"x-inline-highlight\">near ptr</code>指明此处位移为<code class=\"x-inline-highlight\">16</code>位位移，范围为<code class=\"x-inline-highlight\">-32768</code>~<code class=\"x-inline-highlight\">32767</code>。"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"jmp near ptr s  ;(ip)=(ip)+16位位移"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">jmp</span> <span class=\"token keyword\">near</span> <span class=\"token keyword\">ptr</span> s  <span class=\"token comment\">;(ip)=(ip)+16位位移</span>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"段间转移"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"远转移："}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"jmp far ptr s"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">jmp</span> <span class=\"token keyword\">far</span> <span class=\"token keyword\">ptr</span> s"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"段内转移指明<span class=\"x-inline-strong\">转移位移</span>，而段间转移指明<span class=\"x-inline-strong\">目的地址</span>，这一区别要在汇编指令中才能体现出来，考虑如下程序："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n    start:\n           mov ax,3\n           mov bx,2\n           jmp short s1\n           mov cx,1\n    s1:    add ax,1\n           jmp near ptr s2\n           db  176h dup(0)\n    s2:    add bx,1\n           jmp far ptr s3\n           db  234h dup(0)\n    s3:    add cx,1\n\n           mov ax,4c00h\n           int 21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"看前两个段内转移，注意到机器码包含的数值是偏移值<code class=\"x-inline-highlight\">03h</code>和<code class=\"x-inline-highlight\">176h</code>；（这与程序中定义的<code class=\"x-inline-highlight\">0</code>字节数量是一致的）"}}],["$","$Lf",null,{"src":"fig1.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"然后看第三个段间转移指令，机器码中包含的数值就是目的地址。"}}],["$","$Lf",null,{"src":"fig2.jpg","width":"100%"}],["$","h3",null,{"className":"x-h2","children":"转移地址在寄存器中"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"jmp bx  ;(ip)=(bx)"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">jmp</span> <span class=\"token register variable\">bx</span>  <span class=\"token comment\">;(ip)=(bx)</span>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"转移地址在内存中（段内）"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"从内存单元地址处开始，存放一个字，是转移的<span class=\"x-inline-strong\">目的偏移地址</span>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"jmp word ptr [...]"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">jmp</span> <span class=\"token keyword\">word</span> <span class=\"token keyword\">ptr</span> <span class=\"token operator\">[</span>...<span class=\"token operator\">]</span>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"转移地址在内存中（段间）"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"从内存单元地址处开始，存放两个字，高地址的字是转移的<span class=\"x-inline-strong\">目的段地址</span>，低地址的字是转移的<span class=\"x-inline-strong\">目的偏移地址</span>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"jmp dword ptr [...]"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">jmp</span> <span class=\"token keyword\">dword</span> <span class=\"token keyword\">ptr</span> <span class=\"token operator\">[</span>...<span class=\"token operator\">]</span>"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"jcxz指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"有条件转移指令，格式同样为<code class=\"x-inline-highlight\">jcxz 标号</code>，功能为：如果<code class=\"x-inline-highlight\">(CX)=0</code>则转移到标号处执行，功能也是<code class=\"x-inline-highlight\">(IP)=(IP)+8位位移</code>；否则什么也不做，程序向下执行。"}}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">jcxz</code>和前面提到的<code class=\"x-inline-highlight\">jmp</code>段内转移中的<code class=\"x-inline-highlight\">8</code>位位移和<code class=\"x-inline-highlight\">16</code>位位移都是编译阶段由编译器计算的，也都是偏移地址，不是目的地址。"}}]}],["$","h2",null,{"className":"x-h1","children":"call指令和ret指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"汇编语言中可以通过<code class=\"x-inline-highlight\">call</code>指令调用一个过程，过程中可以通过<code class=\"x-inline-highlight\">ret</code>指令返回到调用点，可以利用它们实现模块化编程。它们的实质也是流程转移指令，都是修改<code class=\"x-inline-highlight\">IP</code>、或同时修改<code class=\"x-inline-highlight\">CS</code>和<code class=\"x-inline-highlight\">IP</code>。"}}],["$","h3",null,{"className":"x-h2","children":"段内转移"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"call s\n\n;逻辑上相当于：\n;push ip\n;jmp near ptr s\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">call</span> s\n\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;push ip</span>\n<span class=\"token comment\">;jmp near ptr s</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"段间转移"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"call far ptr s\n\n;逻辑上相当于：\n;push cs\n;push ip\n;jmp far ptr s\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">call</span> <span class=\"token keyword\">far</span> <span class=\"token keyword\">ptr</span> s\n\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;push cs</span>\n<span class=\"token comment\">;push ip</span>\n<span class=\"token comment\">;jmp far ptr s</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"转移地址在寄存器中"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"call bx\n\n;逻辑上相当于：\n;push ip\n;jmp bx\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">call</span> <span class=\"token register variable\">bx</span>\n\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;push ip</span>\n<span class=\"token comment\">;jmp bx</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"转移地址在内存中（段内）"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"call word ptr [...]\n\n;逻辑上相当于：\n;push ip\n;jmp word ptr [...]\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">call</span> <span class=\"token keyword\">word</span> <span class=\"token keyword\">ptr</span> <span class=\"token operator\">[</span>...<span class=\"token operator\">]</span>\n\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;push ip</span>\n<span class=\"token comment\">;jmp word ptr [...]</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"转移地址在内存中（段间）"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"call dword ptr [...]\n\n;逻辑上相当于：\n;push cs\n;push ip\n;jmp dword ptr [...]\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">call</span> <span class=\"token keyword\">dword</span> <span class=\"token keyword\">ptr</span> <span class=\"token operator\">[</span>...<span class=\"token operator\">]</span>\n\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;push cs</span>\n<span class=\"token comment\">;push ip</span>\n<span class=\"token comment\">;jmp dword ptr [...]</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"ret指令"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"ret\n\n;逻辑上相当于：\n;pop ip\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">ret</span>\n\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;pop ip</span>\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">ret</code>指令还可以后接一个数值，例如："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"ret 5\n\n;逻辑上相当于：\n;pop ip\n;add sp,5\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">ret</span> <span class=\"token number\">5\n</span>\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;pop ip</span>\n<span class=\"token comment\">;add sp,5</span>\n"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"retf指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">f</code>就是<code class=\"x-inline-highlight\">far</code>的意思。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"retf\n\n;逻辑上相当于：\n;pop ip\n;pop cs\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">retf</span>\n\n<span class=\"token comment\">;逻辑上相当于：</span>\n<span class=\"token comment\">;pop ip</span>\n<span class=\"token comment\">;pop cs</span>\n"}}]}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注意<code class=\"x-inline-highlight\">call</code>和<code class=\"x-inline-highlight\">ret</code>指令都用到了栈，所以使用它们时需要初始化栈空间。"}}]}],["$","h2",null,{"className":"x-h1","children":"mul指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">mul</code>指令的格式为<code class=\"x-inline-highlight\">mul 寄存器</code>或<code class=\"x-inline-highlight\">mul [...]</code>，其中被乘数默认存储在<code class=\"x-inline-highlight\">AX</code>中，乘法指令分为<code class=\"x-inline-highlight\">8</code>位乘法和<code class=\"x-inline-highlight\">16</code>位乘法："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":""}}]}],["$","th","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">8</code>位乘法"}}]}],["$","th","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">16</code>位乘法"}}]}]]}],["$","tr","1",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"被乘数（默认）"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">AL</code>"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">AX</code>"}}]}]]}],["$","tr","2",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"乘数"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">8</code>位寄存器或内存单元"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">16</code>位寄存器或内存单元"}}]}]]}],["$","tr","3",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"结果"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">AX</code>"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"高位<code class=\"x-inline-highlight\">DX</code>，低位<code class=\"x-inline-highlight\">AX</code>"}}]}]]}]]}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"例："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mul bl               ;(ax)=(al)*(bl)\nmul byte ptr ds:[0]  ;(ax)=(al)*((ds)*16+0)\n\nmul word ptr [bx+si+8]\n;乘积ANS=(ax)*((ds)*16+(bx)+(si)+8)\n;(dx)=ANS的高16位\n;(ax)=ANS的低16位\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mul</span> <span class=\"token register variable\">bl</span>               <span class=\"token comment\">;(ax)=(al)*(bl)</span>\n<span class=\"token function\">mul</span> <span class=\"token keyword\">byte</span> <span class=\"token keyword\">ptr</span> <span class=\"token register variable\">ds</span>:<span class=\"token operator\">[</span><span class=\"token number\">0]</span>  <span class=\"token comment\">;(ax)=(al)*((ds)*16+0)</span>\n\n<span class=\"token function\">mul</span> <span class=\"token keyword\">word</span> <span class=\"token keyword\">ptr</span> <span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">+</span><span class=\"token register variable\">si</span><span class=\"token operator\">+</span><span class=\"token number\">8]</span>\n<span class=\"token comment\">;乘积ANS=(ax)*((ds)*16+(bx)+(si)+8)</span>\n<span class=\"token comment\">;(dx)=ANS的高16位</span>\n<span class=\"token comment\">;(ax)=ANS的低16位</span>\n"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"用栈传递参数和保护数据"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"前面说到的<code class=\"x-inline-highlight\">call</code>和<code class=\"x-inline-highlight\">ret</code>指令可以实现类似C语言函数的效果，但并没有参数传递的功能，而参数传递可以使用栈来实现。同时，汇编编程中寄存器是非常宝贵的资源，而编写子程序时原则上不应该知晓调用者的寄存器使用情况，但又需要保护调用者的数据不被覆盖，这时也可以使用栈来保护数据。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"下面的代码实现计算<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ss:stcksg\n\nstcksg segment\n           db 16 dup(0)\nstcksg ends\n\ncodesg segment\n    start:\n           mov  ax,2\n           push ax\n           mov  ax,5\n           push ax\n           call cube\n           mov  ax,4c00h\n           int  21h\n\n    cube:  push bp           ;保存BP\n           mov  bp,sp\n           mov  ax,[bp+4]\n           add  ax,[bp+6]\n           mov  bp,ax        ;再次利用BP，把x+y的结果保存在BP中\n           mul  bp\n           mul  bp\n           pop  bp           ;恢复BP\n           ret  4            ;返回时清除参数\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"首先分两次把参数<code class=\"x-inline-highlight\">x</code>和<code class=\"x-inline-highlight\">y</code>入栈。在<code class=\"x-inline-highlight\">cube</code>子程序中，取出参数时，栈顶是<code class=\"x-inline-highlight\">BP</code>的旧值，栈顶下一个元素是<code class=\"x-inline-highlight\">call</code>指令入栈的<code class=\"x-inline-highlight\">IP</code>，所以<code class=\"x-inline-highlight\">(bp+4)</code>是<code class=\"x-inline-highlight\">x</code>，<code class=\"x-inline-highlight\">(bp+6)</code>是<code class=\"x-inline-highlight\">y</code>。"}}],["$","$Lf",null,{"src":"fig3.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">343</span></span></span></span>也就是<code class=\"x-inline-highlight\">157h</code>。"}}],["$","h2",null,{"className":"x-h1","children":"练习"}],["$","h3",null,{"className":"x-h2","children":"将字符串全部转大写"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编程操作数据段中的字符串，把所有字母都改为大写。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"datasg segment\n           db 'abcdefg',9 dup(0)\n           db 'hello',11 dup(0)\n           db 'conversation',4 dup(0)\n           db 'masm',12 dup(0)\ndatasg ends\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"datasg <span class=\"token keyword\">segment</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'abcdefg'</span>,<span class=\"token number\">9 </span><span class=\"token keyword\">dup</span>(<span class=\"token number\">0)</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'hello'</span>,<span class=\"token number\">11 </span><span class=\"token keyword\">dup</span>(<span class=\"token number\">0)</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'conversation'</span>,<span class=\"token number\">4 </span><span class=\"token keyword\">dup</span>(<span class=\"token number\">0)</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'masm'</span>,<span class=\"token number\">12 </span><span class=\"token keyword\">dup</span>(<span class=\"token number\">0)</span>\ndatasg <span class=\"token keyword\">ends</span>\n"}}]}]]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg,ss:stcksg\n\ndatasg segment\n           db 'abcdefg',9 dup(0)\n           db 'hello',11 dup(0)\n           db 'conversation',4 dup(0)\n           db 'masm',12 dup(0)\ndatasg ends\n\nstcksg segment\n           db 16 dup(0)\nstcksg ends\n\ncodesg segment\n    start:\n           mov  ax,datasg\n           mov  ds,ax\n\n           mov  bx,0\n           mov  cx,4\n    s:     mov  si,bx\n           call func\n           add  bx,10h\n           loop s\n\n           mov  ax,4c00h\n           int  21h\n\n    func:\n           push cx\n           push si\n           mov  ch,0\n    w:     mov  cl,[si]                    ;遇到0就停止\n           jcxz return\n           and  byte ptr [si],11011111b\n           inc  si\n           jmp  w\n    return:\n           pop  si\n           pop  cx\n           ret\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在字符串长度不定时，仿照C语言以<code class=\"x-inline-highlight\">\\0</code>作为结束符，读到<code class=\"x-inline-highlight\">0</code>值就利用<code class=\"x-inline-highlight\">jcxz</code>指令进入返回阶段。"}}],["$","$Lf",null,{"src":"fig4.jpg","width":"100%"}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"【汇编语言】流程转移与子程序 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24c/assembly-4/"}]]
1:null
