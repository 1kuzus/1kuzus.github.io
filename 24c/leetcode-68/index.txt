2:I[55329,["481","static/chunks/457b8330-69f8bab043e7caf2.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-bbc33dbeb20f4aed.js"],""]
3:I[93334,["481","static/chunks/457b8330-69f8bab043e7caf2.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","931","static/chunks/app/page-fdd4c3156cea1bb0.js"],""]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-69f8bab043e7caf2.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-bbc33dbeb20f4aed.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-884d0394d353bd4f.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-884d0394d353bd4f.js"],""]
8:["slug","24c/leetcode-68","c"]
0:["7LjKDOS3m49yoEyK4Hs34",[[["",{"children":[["slug","24c/leetcode-68","c"],{"children":["__PAGE__?{\"slug\":[\"24c\",\"leetcode-68\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24c/leetcode-68","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"x-title","children":"LeetCode 68.文本左右对齐"}],["$","$L3",null,{"path":"/24c/leetcode-68/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading..."}],"children":["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/606e38edca29c81f.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/6151b9c70d53df83.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[62029,["481","static/chunks/457b8330-69f8bab043e7caf2.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-c60a65f28e774a61.js","548","static/chunks/548-617600d488b129da.js","877","static/chunks/app/%5B...slug%5D/page-bbc33dbeb20f4aed.js"],""]
e:T507,/**
 * @param {string[]} words
 * @param {number} maxWidth
 * @return {string[]}
 */
var fullJustifyLine = function (words, maxWidth, last = false) {
    //最后一行左对齐、仅剩一个单词则直接返回
    if (last || words.length === 1) return words.join(" ").padEnd(maxWidth, " ");
    const wordsWidth = words.reduce((s, cur) => s + cur.length, 0);
    const sp = maxWidth - wordsWidth, n = words.length - 1;//总空格数sp，空位数n
    const pad = parseInt(sp / n);
    let line = words[0];
    for (let i = 1; i < words.length; i++) {
        //左侧放置的空格数要多于右侧的空格数，所以前sp%n个空位放pad+1个空格
        line += Array(pad + (i <= sp % n) + 1).join(" ") + words[i];
    }
    return line;
}
var fullJustify = function (words, maxWidth) {
    if (words.length === 0) return [];
    let i = 0, lineWidth = 0;
    for (; i < words.length; i++) {
        lineWidth += words[i].length + 1;//至每个单词后最少填充1个空格
        if (lineWidth - 1 > maxWidth) break;//去掉最后一个空格（最后一个单词不用填充），已经超过行宽
    }
    return [
        fullJustifyLine(words.slice(0, i), maxWidth, i === words.length/*最后一行*/),
        ...fullJustify(words.slice(i), maxWidth)
    ];
};
f:T214d,<span class="token comment">/**
 * @param {string[]} words
 * @param {number} maxWidth
 * @return {string[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">fullJustifyLine</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">words<span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//最后一行左对齐、仅剩一个单词则直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">||</span> words<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> words<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> wordsWidth <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> s <span class="token operator">+</span> cur<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> sp <span class="token operator">=</span> maxWidth <span class="token operator">-</span> wordsWidth<span class="token punctuation">,</span> n <span class="token operator">=</span> words<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//总空格数sp，空位数n</span>
    <span class="token keyword">const</span> pad <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>sp <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> line <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//左侧放置的空格数要多于右侧的空格数，所以前sp%n个空位放pad+1个空格</span>
        line <span class="token operator">+=</span> <span class="token function">Array</span><span class="token punctuation">(</span>pad <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> sp <span class="token operator">%</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> line<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">fullJustify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">words<span class="token punctuation">,</span> maxWidth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lineWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lineWidth <span class="token operator">+=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//至每个单词后最少填充1个空格</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lineWidth <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> maxWidth<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//去掉最后一个空格（最后一个单词不用填充），已经超过行宽</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token function">fullJustifyLine</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span> i <span class="token operator">===</span> words<span class="token punctuation">.</span>length<span class="token comment">/*最后一行*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token function">fullJustify</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
5:[["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"原题链接：<a href=\"https://leetcode.cn/problems/text-justification/description/\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">文本左右对齐</a>"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"可以递归求解，详见注释。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"JavaScript"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$e"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"LeetCode 68.文本左右对齐 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24c/leetcode-68/"}]]
1:null
