2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-c03187ba4ff9d908.js"],""]
3:I[86510,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","931","static/chunks/app/page-57d30771b1cbfe90.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-c03187ba4ff9d908.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-d8cba6107e479473.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-d8cba6107e479473.js"],""]
8:["slug","24c/assembly-2","c"]
0:["Lx0kjXLHL2jAl98DK0Kdf",[[["",{"children":[["slug","24c/assembly-2","c"],{"children":["__PAGE__?{\"slug\":[\"24c\",\"assembly-2\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24c/assembly-2","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"【汇编语言】汇编语言编程"}],["$","$L3",null,{"path":"/24c/assembly-2/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8b190de8dd109412.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cd6b648520195f61.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-c03187ba4ff9d908.js"],""]
f:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-c03187ba4ff9d908.js"],""]
e:T448,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
           <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">0123h
</span>           <span class="token function">mov</span> <span class="token register variable">bx</span>,<span class="token number">0456h
</span>           <span class="token function">add</span> <span class="token register variable">ax</span>,<span class="token register variable">bx</span>
           <span class="token function">add</span> <span class="token register variable">ax</span>,<span class="token register variable">ax</span>

    <span class="token comment">;程序返回的套路</span>
           <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span> <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span>
10:T421,<span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token operator">[</span><span class="token number">7]</span>     <span class="token comment">;(ax)=7</span>
<span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">7]</span>  <span class="token comment">;(ax)=((ds)*16+7)</span>

<span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>    <span class="token comment">;(ax)=((ds)*16+(bx))</span>
<span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span> <span class="token comment">;(ax)=((ds)*16+(bx))</span>
11:Td4a,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
           <span class="token keyword">dw</span>   <span class="token number">3412h,</span><span class="token number">7856h,</span><span class="token number">0ab90h,</span><span class="token number">0efcdh,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>           <span class="token keyword">dw</span>   <span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>           <span class="token keyword">dw</span>   <span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token register variable">cs</span>
           <span class="token function">mov</span>  <span class="token register variable">ss</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>  <span class="token register variable">sp</span>,<span class="token number">30h
</span>
    <span class="token comment">;入栈</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">4
</span>    s1:    <span class="token function">push</span> <span class="token register variable">cs</span>:<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>
           <span class="token function">add</span>  <span class="token register variable">bx</span>,<span class="token number">2
</span>           <span class="token function">loop</span> s1

    <span class="token comment">;出栈</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">10h
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">4
</span>    s2:    <span class="token function">pop</span>  <span class="token register variable">cs</span>:<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>
           <span class="token function">add</span>  <span class="token register variable">bx</span>,<span class="token number">2
</span>           <span class="token function">loop</span> s2

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span>
12:T865,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
           <span class="token keyword">dw</span>   <span class="token number">3412h,</span><span class="token number">7856h,</span><span class="token number">0ab90h,</span><span class="token number">0efcdh,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>           <span class="token keyword">dw</span>   <span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>           <span class="token keyword">dw</span>   <span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token register variable">cs</span>
           <span class="token function">mov</span>  <span class="token register variable">ss</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>  <span class="token register variable">sp</span>,<span class="token number">30h
</span>
    <span class="token comment">;入栈</span>
           <span class="token comment">;...</span>

    <span class="token comment">;出栈</span>
           <span class="token comment">;...</span>

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
13:T104e,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">dw</span> <span class="token number">3412h,</span><span class="token number">7856h,</span><span class="token number">0ab90h,</span><span class="token number">0efcdh,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>           <span class="token keyword">dw</span> <span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">dw</span> <span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
    <span class="token comment">;初始化寄存器</span>
    <span class="token comment">;由于程序至少要有一个代码段，所以会自动给CS赋值</span>
    <span class="token comment">;此处不需要手动初始化CS</span>
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,stcksg
           <span class="token function">mov</span>  <span class="token register variable">ss</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>  <span class="token register variable">sp</span>,<span class="token number">10h
</span>
    <span class="token comment">;入栈</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">4
</span>    s1:    <span class="token function">push</span> <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>
           <span class="token function">add</span>  <span class="token register variable">bx</span>,<span class="token number">2
</span>           <span class="token function">loop</span> s1

    <span class="token comment">;出栈</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">10h
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">4
</span>    s2:    <span class="token function">pop</span>  <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>
           <span class="token function">add</span>  <span class="token register variable">bx</span>,<span class="token number">2
</span>           <span class="token function">loop</span> s2

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
14:T6ba,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0ffffh
</span>           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">bx</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">6
</span>           <span class="token function">mov</span>  <span class="token register variable">ah</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>

           <span class="token function">mov</span>  <span class="token register variable">dx</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">3
</span>    s:     <span class="token function">add</span>  <span class="token register variable">dx</span>,<span class="token register variable">ax</span>
           <span class="token function">loop</span> s

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span>
15:T849,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0ffffh
</span>           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">bx</span>

           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0 </span>        <span class="token comment">;第i个数</span>
           <span class="token function">mov</span>  <span class="token register variable">dx</span>,<span class="token number">0 </span>        <span class="token comment">;总和</span>
           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">0ch </span>      <span class="token comment">;注意边界，(cx)=0bh+1=0ch</span>
    s:     <span class="token function">mov</span>  <span class="token register variable">ah</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>      <span class="token comment">;取出8位数据</span>
           <span class="token function">add</span>  <span class="token register variable">dx</span>,<span class="token register variable">ax</span>        <span class="token comment">;计算16位数据</span>
           <span class="token function">inc</span>  <span class="token register variable">bx</span>
           <span class="token function">loop</span> s

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span>
16:T8ef,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0ffffh
</span>           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">bx</span>
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">20h
</span>           <span class="token function">mov</span>  <span class="token register variable">es</span>,<span class="token register variable">ax</span>         <span class="token comment">;使用附加段寄存器</span>

           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0 </span>         <span class="token comment">;第i个数</span>
           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">0ch </span>       <span class="token comment">;注意边界，(cx)=0bh+1=0ch</span>
    s:     <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>       <span class="token comment">;默认DS为段地址</span>
           <span class="token function">mov</span>  <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>,<span class="token register variable">al</span>    <span class="token comment">;这里使用ES做段前缀</span>
           <span class="token function">inc</span>  <span class="token register variable">bx</span>
           <span class="token function">loop</span> s

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span>
5:[["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"本章将开始介绍汇编语言编程。与上一章<a href=\"/24c/assembly-1/\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">【汇编语言】访问寄存器和内存</a>不同的是，上一章的汇编代码是直接在DOSBox终端中，通过<code class=\"x-inline-highlight\">debug</code>交互输入的，数据默认为<code class=\"x-inline-highlight\">16</code>进制数；而本章将使用文本编辑器编写汇编代码，然后通过汇编器生成可执行文件，数据默认为<code class=\"x-inline-highlight\">10</code>进制数，在编程时需要结尾以<code class=\"x-inline-highlight\">h</code>标明，请注意区分！"}}]}],["$","h2",null,{"className":"x-h1","children":"基本结构示例"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n           mov ax,0123h\n           mov bx,0456h\n           add ax,bx\n           add ax,ax\n\n    ;程序返回的套路\n           mov ax,4c00h\n           int 21h\ncodesg ends\nend\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 24px, var(--bg-transparent-golden) 24px 72px, transparent 72px, transparent 264px, var(--bg-transparent-golden) 264px 312px, transparent 312px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"伪指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上面的示例代码高亮部分为<span class=\"x-inline-strong\">伪指令</span>，剩下的主体部分为汇编指令。伪指令没有对应的机器指令，最终不被CPU执行，而是由汇编器处理的指令。上面的示例代码出现了三种伪指令："}}],["$","h4",null,{"className":"x-h3","children":"段定义"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"一个汇编程序是由多个段组成的，这些段被用来存放代码、数据或当作栈空间来使用。一个有意义的汇编程序至少要有一个用来存放代码的段。每个段都需要有段名，段定义的格式如下："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"segname segment\n    ;...\nsegname ends\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"segname <span class=\"token keyword\">segment</span>\n    <span class=\"token comment\">;...</span>\nsegname <span class=\"token keyword\">ends</span>\n"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"end"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"汇编程序的结束标记。"}}],["$","h4",null,{"className":"x-h3","children":"assume"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">assume</code>伪指令用来指定段寄存器和段名之间的关系。在这个例子中，<code class=\"x-inline-highlight\">assume cs:codesg</code>表示<code class=\"x-inline-highlight\">CS</code>寄存器与<code class=\"x-inline-highlight\">codesg</code>段相关联，将定义的<code class=\"x-inline-highlight\">codesg</code>当作程序的代码段使用。"}}],["$","h2",null,{"className":"x-h1","children":"运行一个汇编程序"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"写好一个汇编程序（文本文件）<code class=\"x-inline-highlight\">1.asm</code>后，在终端执行："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"masm 1.asm;"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"masm 1.asm;"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"其中的分号表示使用默认文件名，此操作会得到<code class=\"x-inline-highlight\">1.obj</code>文件；然后执行："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"link 1.obj;"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"link 1.obj;"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"分号含义同上，此操作会得到<code class=\"x-inline-highlight\">1.exe</code>，如果想在终端直接运行，输入<code class=\"x-inline-highlight\">1.exe</code>即可："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"1.exe"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"1.exe"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果想借助<code class=\"x-inline-highlight\">debug</code>跟踪程序的执行，则输入命令："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"debug 1.exe"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"debug 1.exe"}}]}]]}],["$","$Lf",null,{"src":"fig1.jpg","width":"100%"}],["$","h2",null,{"className":"x-h1","children":"一些符号约定"}],["$","h3",null,{"className":"x-h2","children":"[...]和(...)"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">[...]</code>是汇编语法，表示一个内存单元，段地址在<code class=\"x-inline-highlight\">DS</code>中，偏移地址由<code class=\"x-inline-highlight\">...</code>给出；<br/><code class=\"x-inline-highlight\">(...)</code>是为了学习方便做出的约定，表示一个内存单元或寄存器中的内容。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"例如，<code class=\"x-inline-highlight\">pop ax</code>的功能可以描述为："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">(ax)=((ss)*16+(sp))</code>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">(sp)=(sp)+2</code>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"idata"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"用符号<code class=\"x-inline-highlight\">idata</code>表示常量。（也就是立即数，<code class=\"x-inline-highlight\">immediate data</code>）"}}],["$","h2",null,{"className":"x-h1","children":"loop指令"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n           mov  ax,2\n           mov  cx,7\n    s:     add  ax,ax\n           loop s\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">assume</span> <span class=\"token register variable\">cs</span>:codesg\ncodesg <span class=\"token keyword\">segment</span>\n           <span class=\"token function\">mov</span>  <span class=\"token register variable\">ax</span>,<span class=\"token number\">2\n</span>           <span class=\"token function\">mov</span>  <span class=\"token register variable\">cx</span>,<span class=\"token number\">7\n</span>    s:     <span class=\"token function\">add</span>  <span class=\"token register variable\">ax</span>,<span class=\"token register variable\">ax</span>\n           <span class=\"token function\">loop</span> s\n\n           <span class=\"token function\">mov</span>  <span class=\"token register variable\">ax</span>,<span class=\"token number\">4c00h\n</span>           <span class=\"token function\">int</span>  <span class=\"token number\">21h\n</span>codesg <span class=\"token keyword\">ends</span>\n<span class=\"token keyword\">end</span>\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">loop</code>指令功能是实现计数型循环，会<span class=\"x-inline-strong\">默认使用</span><code class=\"x-inline-highlight\">CX</code>寄存器的值作为循环计数器，当执行<code class=\"x-inline-highlight\">loop</code>指令时会进行操作："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">(CX)=(CX)-1</code>；"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"判断<code class=\"x-inline-highlight\">(CX)</code>是否为<code class=\"x-inline-highlight\">0</code>，如果不为<code class=\"x-inline-highlight\">0</code>，则跳转到标号处继续执行循环体；如果为<code class=\"x-inline-highlight\">0</code>，则继续执行下一条指令。"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"inc指令"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"inc ax  ;(ax)=(ax)+1"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">inc</span> <span class=\"token register variable\">ax</span>  <span class=\"token comment\">;(ax)=(ax)+1</span>"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">inc</code>指令的功能是自增。"}}],["$","h2",null,{"className":"x-h1","children":"段前缀"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在<code class=\"x-inline-highlight\">debug</code>中使用<code class=\"x-inline-highlight\">-a</code>编写汇编代码访问内存时，可以直接使用<code class=\"x-inline-highlight\">mov ax,[idata]</code>，但在汇编程序中，需要使用段前缀，写为<code class=\"x-inline-highlight\">mov ax,ds:[idata]</code>。例如在汇编程序中，<code class=\"x-inline-highlight\">mov ax,[7]</code>等同于<code class=\"x-inline-highlight\">mov ax,7</code>，如果是想访问<code class=\"x-inline-highlight\">ds:7</code>则需要改写为<code class=\"x-inline-highlight\">mov ax,ds:[7]</code>。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"汇编程序也可以间接访问内存，例如<code class=\"x-inline-highlight\">mov ax,[bx]</code>是没问题的，同时和<code class=\"x-inline-highlight\">mov ax,ds:[bx]</code>也是等价的。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov ax,[7]     ;(ax)=7\nmov ax,ds:[7]  ;(ax)=((ds)*16+7)\n\nmov ax,[bx]    ;(ax)=((ds)*16+(bx))\nmov ax,ds:[bx] ;(ax)=((ds)*16+(bx))\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"在代码段中使用数据"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"此前的演示中，在汇编程序中直接访问物理地址其实是危险的，因为原处可能有其他的重要数据。规范的做法是在程序的段中存放数据，运行时会由操作系统分配空间。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n           dw   3412h,7856h,0ab90h,0efcdh,0,0,0,0\n           dw   0,0,0,0,0,0,0,0\n           dw   0,0,0,0,0,0,0,0\n\n           mov  ax,cs\n           mov  ss,ax\n           mov  sp,30h\n\n    ;入栈\n           mov  bx,0\n           mov  cx,4\n    s1:    push cs:[bx]\n           add  bx,2\n           loop s1\n\n    ;出栈\n           mov  bx,10h\n           mov  cx,4\n    s2:    pop  cs:[bx]\n           add  bx,2\n           loop s2\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 72px, var(--bg-transparent-golden) 72px 144px, transparent 144px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上面的代码希望将数据通过栈倒序存放。使用<code class=\"x-inline-highlight\">dw(define word)</code>关键字定义了一片数据空间，类似的操作还有："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">db</code>：定义一个字节的数据"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">dw</code>：定义一个字的数据"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">dd</code>：定义一个双字的数据"}}]}]]}],["$","$Lf",null,{"src":"fig6.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"通过<code class=\"x-inline-highlight\">-u</code>指令反汇编发现CPU将<code class=\"x-inline-highlight\">dw</code>定义的数据当成了指令，通过<code class=\"x-inline-highlight\">-d</code>命令能够清楚的看到指令应该从<code class=\"x-inline-highlight\">076a:0030</code>处开始。因此还需要定义一个标号，指示代码开始的位置："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n           dw   3412h,7856h,0ab90h,0efcdh,0,0,0,0\n           dw   0,0,0,0,0,0,0,0\n           dw   0,0,0,0,0,0,0,0\n\n    start:\n           mov  ax,cs\n           mov  ss,ax\n           mov  sp,30h\n\n    ;入栈\n           ;...\n\n    ;出栈\n           ;...\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 168px, var(--bg-transparent-golden) 168px 192px, transparent 192px, transparent 480px, var(--bg-transparent-golden) 480px 504px, transparent 504px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]]}],["$","$Lf",null,{"src":"fig7.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"可以看到<code class=\"x-inline-highlight\">IP</code>的初值是<code class=\"x-inline-highlight\">30</code>，是正确的指令开始的位置；结果也正确的保存在<code class=\"x-inline-highlight\">076a:0010</code>开始的空间中。"}}],["$","h2",null,{"className":"x-h1","children":"将数据、代码、栈放入不同段"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"下面是一种实用的程序结构，将数据、代码、栈放入不同段中，仍然使用上一节的例子："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg,ss:stcksg\n\ndatasg segment\n           dw 3412h,7856h,0ab90h,0efcdh,0,0,0,0\n           dw 0,0,0,0,0,0,0,0\ndatasg ends\n\nstcksg segment\n           dw 0,0,0,0,0,0,0,0\nstcksg ends\n\ncodesg segment\n    start:\n    ;初始化寄存器\n    ;由于程序至少要有一个代码段，所以会自动给CS赋值\n    ;此处不需要手动初始化CS\n           mov  ax,datasg\n           mov  ds,ax\n           mov  ax,stcksg\n           mov  ss,ax\n           mov  sp,10h\n\n    ;入栈\n           mov  bx,0\n           mov  cx,4\n    s1:    push ds:[bx]\n           add  bx,2\n           loop s1\n\n    ;出栈\n           mov  bx,10h\n           mov  cx,4\n    s2:    pop  ds:[bx]\n           add  bx,2\n           loop s2\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 624px, var(--bg-transparent-golden) 624px 648px, transparent 648px, transparent 792px, var(--bg-transparent-golden) 792px 816px, transparent 816px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注意现在入栈、出栈操作时段地址寄存器是<code class=\"x-inline-highlight\">DS</code>。"}}],["$","$Lf",null,{"src":"fig8.jpg","width":"100%"}],["$","h2",null,{"className":"x-h1","children":"练习"}],["$","h3",null,{"className":"x-h2","children":"loop指令实现乘法"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编程计算<code class=\"x-inline-highlight\">ffff:6</code>字节单元的数值乘以<code class=\"x-inline-highlight\">3</code>（连加三次），结果保存在<code class=\"x-inline-highlight\">DX</code>中。"}}]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n           mov  bx,0ffffh\n           mov  ds,bx\n           mov  bx,6\n           mov  ah,0\n           mov  al,[bx]\n\n           mov  dx,0\n           mov  cx,3\n    s:     add  dx,ax\n           loop s\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]]}],["$","$Lf",null,{"src":"fig2.jpg","width":"100%"}],["$","$Lf",null,{"src":"fig3.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注：在汇编程序中数据不能以字母开头，因此<code class=\"x-inline-highlight\">ffffh</code>要写为<code class=\"x-inline-highlight\">0ffffh</code>。"}}],["$","h3",null,{"className":"x-h2","children":"计算连续内存单元之和"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编程计算<code class=\"x-inline-highlight\">ffff:0</code>~<code class=\"x-inline-highlight\">ffff:b</code>字节单元的数据之和，结果保存在<code class=\"x-inline-highlight\">DX</code>中。"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注意我们要计算的字节单元（<code class=\"x-inline-highlight\">8</code>位），每个单元最大为<code class=\"x-inline-highlight\">255</code>，理论上总和一定不会超过<code class=\"x-inline-highlight\">DX</code>的上限值（<code class=\"x-inline-highlight\">16</code>位），但单次相加时要注意需要取出<code class=\"x-inline-highlight\">8</code>位的数据，同时加到<code class=\"x-inline-highlight\">16</code>位的寄存器，以保证结果正确且单次相加不会溢出。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n           mov  bx,0ffffh\n           mov  ds,bx\n\n           mov  bx,0         ;第i个数\n           mov  dx,0         ;总和\n           mov  cx,0ch       ;注意边界，(cx)=0bh+1=0ch\n    s:     mov  ah,0\n           mov  al,[bx]      ;取出8位数据\n           add  dx,ax        ;计算16位数据\n           inc  bx\n           loop s\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$15"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"结果是<code class=\"x-inline-highlight\">405h</code>。"}}],["$","$Lf",null,{"src":"fig4.jpg","width":"100%"}],["$","h3",null,{"className":"x-h2","children":"复制内存（使用loop和段前缀）"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编程实现将<code class=\"x-inline-highlight\">ffff:0</code>~<code class=\"x-inline-highlight\">ffff:b</code>的数据复制到<code class=\"x-inline-highlight\">0:200</code>~<code class=\"x-inline-highlight\">0:20b</code>。"}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在本题中需要两个段的数据，默认的段前缀是<code class=\"x-inline-highlight\">DS</code>，我们再使用附加段寄存器<code class=\"x-inline-highlight\">ES</code>，使得<code class=\"x-inline-highlight\">(ds)=ffffh</code>，<code class=\"x-inline-highlight\">(es)=20h</code>，这样就可以对齐两个段的数据（<code class=\"x-inline-highlight\">ds:[bx]</code>直接对应<code class=\"x-inline-highlight\">es:[bx]</code>），可以使得程序更简明。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n           mov  bx,0ffffh\n           mov  ds,bx\n           mov  ax,20h\n           mov  es,ax         ;使用附加段寄存器\n\n           mov  bx,0          ;第i个数\n           mov  cx,0ch        ;注意边界，(cx)=0bh+1=0ch\n    s:     mov  al,[bx]       ;默认DS为段地址\n           mov  es:[bx],al    ;这里使用ES做段前缀\n           inc  bx\n           loop s\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]]}],["$","$Lf",null,{"src":"fig5.jpg","width":"100%"}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"【汇编语言】汇编语言编程 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24c/assembly-2/"}]]
1:null
