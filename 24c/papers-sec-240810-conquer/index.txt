2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
3:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","842","static/chunks/842-812b9489b5c7f4d9.js","931","static/chunks/app/page-8a7b32c8a4befa3e.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","842","static/chunks/842-812b9489b5c7f4d9.js","931","static/chunks/app/page-8a7b32c8a4befa3e.js"],"LikeButton"]
7:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
8:I[5613,[],""]
a:I[31778,[],""]
b:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-9af8316721e2155d.js"],"GlobalProvider"]
c:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-9af8316721e2155d.js"],""]
9:["slug","24c/papers-sec-240810-conquer","c"]
0:["TQbl9DWDgb-w7WxOOip5t",[[["",{"children":[["slug","24c/papers-sec-240810-conquer","c"],{"children":["__PAGE__?{\"slug\":[\"24c\",\"papers-sec-240810-conquer\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24c/papers-sec-240810-conquer","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"论文阅读：Do Not Give A Dog Bread Every Time He Wags His Tail: Stealing Passwords through Content Queries (CONQUER) Attack (NDSS 2023)"}],["$","$L3",null,{"path":"/24c/papers-sec-240810-conquer/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}],["$","$L6",null,{"path":"/24c/papers-sec-240810-conquer/"}]]}],["$","$L7",null,{}]]}]],null]]},["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f0e9ea0d1087a412.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/17b3c4485edf7c41.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
12:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
14:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","842","static/chunks/842-812b9489b5c7f4d9.js","877","static/chunks/app/%5B...slug%5D/page-9c96bf7312b427f1.js"],""]
e:T5d7,首先得到描述的字符集是<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mclose">}</span></span></span></span>，记为<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；f:T5d9,输入密码时在补集<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9701em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>中查找，显然密码的前三位<code class="x-inline-highlight">t</code>、<code class="x-inline-highlight">e</code>、<code class="x-inline-highlight">n</code>都找不到；10:T97a,再输入第四位<code class="x-inline-highlight">d</code>时，<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9701em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>命中；此时遍历<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的字符回推上一位，也就是查询<code class="x-inline-highlight">ed</code>、<code class="x-inline-highlight">nd</code>、<code class="x-inline-highlight">rd</code>、<code class="x-inline-highlight">td</code>，找到<code class="x-inline-highlight">nd</code>；11:Tf43,每个人的输入习惯都有很大差别，因此很难设定一个绝对的时间间隙作为标准；因此研究使用相对指标<code class="x-inline-highlight">z score</code>，如果向量<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6349em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">t</span></span></span></span></span></span>代表所有按键的时间间隔，那么<code class="x-inline-highlight">z score</code>为<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3357em;vertical-align:-0.4451em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8906em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3105em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight">t</span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight">t</span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3105em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight">t</span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，即“与均值相差几个标准差”。然后进一步定义了一个<code class="x-inline-highlight">z score</code>的阈值，使得大小写切换<code class="x-inline-highlight">(case switches)</code>真阳性率<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TRPCS</span></span></span></span>和非大小写切换<code class="x-inline-highlight">(non case switches)</code>真阳性率<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TPRNCS</span></span></span></span>的乘积最大。13:T7d0,要注意的是，状态机的初始状态不确定，检测到大小写切换后可能转移的状态也不唯一，为此会给每一种可能的状态都创建一个副本（类似树形增长）。论文在此处用数学方法证明了随着大小写切换被检测到的次数<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>增加，总的可能性增长规律符合斐波那契数列；不过此处想表达的中心思想是：尽管总的可能性呈指数增长，但前人关于密码习惯的调查表明通常大写字母是很少的，也就是<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>其实并不会很大。15:T48f,private void findAccessibilityNodeInfosByTextUiThread(Message message) {
    final int flags = message.arg1;
    // ...
    // ...
    final int accessibilityViewId = args.argi1;
    final int virtualDescendantId = args.argi2;
    // ...
    List<AccessibilityNodeInfo> infos = null;
    try {
        // ...
        final View root = findViewByAccessibilityId(accessibilityViewId);
        if (root != null && isShown(root)) {
            AccessibilityNodeProvider provider = root.getAccessibilityNodeProvider();
            if (provider != null) {
                infos = provider.findAccessibilityNodeInfosByText(text, virtualDescendantId);
            } else if (virtualDescendantId == AccessibilityNodeProvider.HOST_VIEW_ID) {
                ArrayList<View> foundViews = mTempArrayList;
                foundViews.clear();
                root.findViewsWithText(foundViews, text,
                        View.FIND_VIEWS_WITH_TEXT |
                        View.FIND_VIEWS_WITH_CONTENT_DESCRIPTION |
                        View.FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS);
                // ...
            }
        }
    } finally {
        // ...
    }
}
16:T1677,<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findAccessibilityNodeInfosByTextUiThread</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> flags <span class="token operator">=</span> message<span class="token punctuation">.</span>arg1<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> accessibilityViewId <span class="token operator">=</span> args<span class="token punctuation">.</span>argi1<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> virtualDescendantId <span class="token operator">=</span> args<span class="token punctuation">.</span>argi2<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessibilityNodeInfo</span><span class="token punctuation">></span></span> infos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">final</span> <span class="token class-name">View</span> root <span class="token operator">=</span> <span class="token function">findViewByAccessibilityId</span><span class="token punctuation">(</span>accessibilityViewId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isShown</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">AccessibilityNodeProvider</span> provider <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getAccessibilityNodeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                infos <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">findAccessibilityNodeInfosByText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> virtualDescendantId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>virtualDescendantId <span class="token operator">==</span> <span class="token class-name">AccessibilityNodeProvider</span><span class="token punctuation">.</span><span class="token constant">HOST_VIEW_ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">View</span><span class="token punctuation">></span></span> foundViews <span class="token operator">=</span> mTempArrayList<span class="token punctuation">;</span>
                foundViews<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                root<span class="token punctuation">.</span><span class="token function">findViewsWithText</span><span class="token punctuation">(</span>foundViews<span class="token punctuation">,</span> text<span class="token punctuation">,</span>
                        <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">FIND_VIEWS_WITH_TEXT</span> <span class="token operator">|</span>
                        <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">FIND_VIEWS_WITH_CONTENT_DESCRIPTION</span> <span class="token operator">|</span>
                        <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// ...</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
5:[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"相关链接："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<a href=\"https://www.ndss-symposium.org/wp-content/uploads/2023/02/ndss2023_f5_paper.pdf\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">Do Not Give A Dog Bread Every Time He Wags His Tail: Stealing Passwords through Content Queries (CONQUER) Attack</a>"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"1.Introduction"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"论文提出了一种攻击方法：CONQUER<code class=\"x-inline-highlight\">(<span class=\"x-inline-strong\">Con</span>tent <span class=\"x-inline-strong\">Quer</span>ies)</code>，利用Android系统辅助模式的<code class=\"x-inline-highlight\">findAccessibilityNodeInfosByText(text)</code>API来查询密码输入框节点包含的文本，从而逐位枚举出用户输入的密码。"}}],["$","h2",null,{"className":"x-h1","children":"2.Background"}],["$","h3",null,{"className":"x-h2","children":"Android Accessibility Service"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"Android系统提供的辅助功能，本意是帮助残障人士使用手机，但是也可以被恶意应用利用。其中提供的一个API是<code class=\"x-inline-highlight\">findAccessibilityNodeInfosByText(text)</code>，该API会返回一系列<code class=\"x-inline-highlight\">AccessibilityNodeInfo</code>对象，代表包含<code class=\"x-inline-highlight\">text</code>的UI组件。"}}],["$","h3",null,{"className":"x-h2","children":"关于Accessibility Service的攻击与防御"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"被动攻击：被动地嗅探无障碍事件，并收集泄露的凭证；被动攻击往往对环境要求较高，一般性受限。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"主动攻击：攻击者主动与系统或应用程序交互，甚至诱导用户在攻击者控制的环境下输入敏感信息。这类攻击通常涉及更多的操作，如劫持输入输出通道，或用精心构造的组件覆盖在输入框的上层；通常更易被用户察觉。"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"3.Observation and Threat Model"}],["$","h3",null,{"className":"x-h2","children":"关键发现"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"Android并没有阻止<code class=\"x-inline-highlight\">findAccessibilityNodeInfosByText(text)</code>搜索密码输入框，也没有向用户发出警报。攻击者可以检查API返回的列表是否包含密码输入框来查询<code class=\"x-inline-highlight\">text</code>是否在用户的密码中。"}}],["$","h3",null,{"className":"x-h2","children":"威胁模型和假设"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"攻击目标是窃取密码；假设用户已经安装了恶意软件，并已经授予其无障碍服务的权限；用户使用最新安卓系统（旧版存在一些更易实现的攻击手段）；假设用户关闭了“使密码可见”（否则可以通过无障碍事件直接访问到密码）。"}}],["$","h2",null,{"className":"x-h1","children":"4.Overview of CONQUER Attack"}],["$","h3",null,{"className":"x-h2","children":"攻击流程"}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"恶意软件注册无障碍服务来获取目标事件；（事件由输入密码触发）"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"用户输入密码时恶意软件将收到通知，并能够确定相关事件；"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"当恶意软件确定用户输入了密码的特定字符，将会尽可能枚举可能的组合来推断该字符；"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"4."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"用户点击“登录”时恶意软件能够感知到，并知晓此时用户输入已结束。"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"挑战和解决"}],["$","h4",null,{"className":"x-h3","children":"区别密码和描述"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"无障碍服务提供了一些内容描述标签，查询结果同样会考虑这些标签，因此可能会与密码字符混淆在一起；解决方案是论文提出的<span class=\"x-inline-strong\">惰性查询</span><code class=\"x-inline-highlight\">(Lazy Queries)</code>算法。"}}],["$","h4",null,{"className":"x-h3","children":"绕过防御机制"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"某些应用程序通过阻止与密码输入相关的辅助功能事件来防御攻击，使得攻击者无法被动接收密码输入的通知；解决方案是只需找到密码输入框，然后主动监控长度的变化来确定用户是否输入了密码。"}}],["$","h4",null,{"className":"x-h3","children":"区分大小写"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"前文提到的API在查询时不区分大小写；解决方案是利用其他的侧信道来重放用户的行为（如大小写切换），例如时间维度上输入一个大写字母后往往需要花费更多时间输入下一个字符。"}}],["$","h2",null,{"className":"x-h1","children":"5.Detail Design of CONQUER"}],["$","h3",null,{"className":"x-h2","children":"惰性查询算法"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这里举一个例子来解释，考虑输入的密码是<code class=\"x-inline-highlight\">tendollar</code>，有干扰的描述是<code class=\"x-inline-highlight\">enter</code>："}}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"4."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"重复此过程，最终找到<code class=\"x-inline-highlight\">tend</code>。"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注：仍需考虑一些罕见情况（如密码是描述的子串），此处略。"}}],["$","h3",null,{"className":"x-h2","children":"主动查询以绕过防御"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"首先找到密码输入框并获取视图ID，然后通过<code class=\"x-inline-highlight\">findAccessibilityNodeInfosByViewId(id)</code>找到，然后对这个节点（假设是<code class=\"x-inline-highlight\">n</code>）重复调用<code class=\"x-inline-highlight\">n.getText().length()</code>来判断用户输入。"}}],["$","h3",null,{"className":"x-h2","children":"侧信道"}],["$","h4",null,{"className":"x-h3","children":"基于时间的侧信道 - 检测大小写切换"}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"考虑密码是<code class=\"x-inline-highlight\">dot#COM</code>，<code class=\"x-inline-highlight\">#</code>和<code class=\"x-inline-highlight\">C</code>之间的切换间隔会干扰到期望得到的最一般情况下的输入间隔，因此计算<code class=\"x-inline-highlight\">z score</code>时只包括字母输入的间隔，以进一步提高稳定性。"}}]}]]}],["$","h4",null,{"className":"x-h3","children":"基于状态机的侧信道 - 恢复用户行为"}],["$","$L12",null,{"src":"1.jpg","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"总体而言本节介绍一个利用有限自动机来恢复包含大小写切换的用户输入的方法。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"基于时间维度的检测仍然有一些功能无法实现，例如无法区分是使用<code class=\"x-inline-highlight\">CapsLock</code>还是<code class=\"x-inline-highlight\">Shift</code>做切换。自动机设计了三种状态："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"小写状态<code class=\"x-inline-highlight\">(Lowercase State)</code>：默认状态"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"切换状态<code class=\"x-inline-highlight\">(Switching State)</code>：单击<code class=\"x-inline-highlight\">Shift</code>，下一个输入字符为大写，但输入完成后立即变为小写状态"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"大写状态<code class=\"x-inline-highlight\">(Uppercase State)</code>：双击<code class=\"x-inline-highlight\">Shift</code>/按下<code class=\"x-inline-highlight\">CapsLock</code>，后续输入的字符均为大写"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上图中的红色箭头标识一个键盘切换<code class=\"x-inline-highlight\">(keyboard switches)</code>（有些复杂的密码可能需要在字母键盘和符合键盘等等之间反复切换），每次检测到键盘切换后，会为相同的当前密码创建三个不同状态的副本以覆盖所有的可能性。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"论文在<a href=\"https://www.skullsecurity.org/wiki/Passwords\" target=\"_blank\" rel=\"noreferrer\" class=\"x-inline-link\">Rockyou</a>数据集上观察到，对于<code class=\"x-inline-highlight\">99.65%</code>的用户密码，大小写切换和键盘切换的次数都很少。此外，对于那些包含字母的密码，其中有<code class=\"x-inline-highlight\">99.55%</code>都符合以下三个简单模式："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全是小写字母"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"全是大写字母"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"仅首字母是大写的"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这些观察到的结果也被用于改善攻击的效率。"}}],["$","h2",null,{"className":"x-h1","children":"6.Evaluation"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"略。"}}],["$","h2",null,{"className":"x-h1","children":"7.Discussion"}],["$","h3",null,{"className":"x-h2","children":"源码级别的根因分析"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"论文参考了<code class=\"x-inline-highlight\">findAccessibilityNodeInfosByText</code>的请求处理器Android源码："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Java"}],["$","$L14",null,{"className":"x-codeblock-header-copy","text":"$15"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"默认情况下<code class=\"x-inline-highlight\">View</code>的<code class=\"x-inline-highlight\">getAccessibilityNodeProvider()</code>会返回<code class=\"x-inline-highlight\">null</code>，此时会调用<code class=\"x-inline-highlight\">findViewsWithText()</code>。对于<code class=\"x-inline-highlight\">View</code>，这个函数是仅在描述标签中搜索的，因此不会受到本文提出的攻击；然而其子类<code class=\"x-inline-highlight\">TextView</code>重写了这个函数，使得其可以搜索自身的文本，并且<code class=\"x-inline-highlight\">TextView</code>并没有重写<code class=\"x-inline-highlight\">getAccessibilityNodeProvider()</code>（所以会进入<code class=\"x-inline-highlight\">else if</code>逻辑），因此<code class=\"x-inline-highlight\">TextView</code>和所有<code class=\"x-inline-highlight\">TextView</code>的子类都会收到CONQUER攻击的影响。"}}],["$","h3",null,{"className":"x-h2","children":"可能的对策"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"系统级：一种选择是在API中强制进行安全检查，不允许一个<code class=\"x-inline-highlight\">password</code>节点被搜索，但由于存在自定义密码输入框，这种限制通常有遗漏；另一种是使得此API仅搜索内容描述标签，然而这种限制可能会阻碍无障碍的部分功能。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"应用级：开发人员不使用基于<code class=\"x-inline-highlight\">TextView</code>的类作为密码字段。或者，如果密码字段是从<code class=\"x-inline-highlight\">TextView</code>直接或间接继承的，则应该重写<code class=\"x-inline-highlight\">findViewsWithText()</code>以确保不会在密码文本中搜索；或重写<code class=\"x-inline-highlight\">getAccessibilityNodeProvider()</code>让其返回一个自定义的基于<code class=\"x-inline-highlight\">AccessibilityNodeProvider</code>类的对象。"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"一些局限"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"意外输入错误、特殊的打字习惯、使用密码管理器自动填写密码等。"}}],["$","h2",null,{"className":"x-h1","children":"8.Related Work"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Android无障碍服务利用"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"基于无障碍服务的密码窃取攻击"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"Android无障碍服务防御"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"基于侧信道的按键推断"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"9.Conclusion"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"论文提出了一种基于内容查询的密码窃取攻击，并克服了区分密码和描述、区分大小写等难点。"}}]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"论文阅读：Do Not Give A Dog Bread Every Time He Wags His Tail: Stealing Passwords through Content Queries (CONQUER) Attack (NDSS 2023) - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24c/papers-sec-240810-conquer/"}]]
1:null
