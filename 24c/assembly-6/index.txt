2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],""]
3:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],"LikeButton"]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[89806,["250","static/chunks/250-0ef8476c0fa8ee24.js","372","static/chunks/372-d4ef474e704f1afd.js","993","static/chunks/app/(posts)/layout-e15e5287e741ad91.js"],""]
b:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8f33aca7be8ff34b.js"],"GlobalProvider"]
c:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8f33aca7be8ff34b.js"],""]
8:["slug","24c/assembly-6","c"]
0:["0wU0bGg-i0jYBeP716xqR",[[["",{"children":["(posts)",{"children":[["slug","24c/assembly-6","c"],{"children":["__PAGE__?{\"slug\":[\"24c\",\"assembly-6\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["(posts)",{"children":[["slug","24c/assembly-6","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],false,["$","h1",null,{"className":"x-post-title","children":"【汇编语言】中断及外部设备操作"}],["$","$L3",null,{"path":"/24c/assembly-6/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}],["$","$L6",null,{"path":"/24c/assembly-6/"}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/82b97b807ab55020.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","div",null,{"id":"post-layout","children":[["$","div",null,{"id":"main","className":"center-wrapper","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$La",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3bc7e8f21884ab46.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/268aef745a7b3740.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
e:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],""]
10:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],""]
f:T914,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg

datasg <span class="token keyword">segment</span>
    arr    <span class="token keyword">db</span> <span class="token number">1,</span><span class="token number">2,</span><span class="token number">3,</span><span class="token number">4,</span><span class="token number">5,</span><span class="token number">6,</span><span class="token number">7,</span><span class="token number">8
</span>    x      <span class="token keyword">dw</span> <span class="token number">0
</span>datasg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>

           <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">8
</span>    s:     <span class="token function">mov</span>  <span class="token register variable">ah</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">al</span>,arr<span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>    <span class="token comment">;使用数据标号</span>
           <span class="token function">add</span>  x,<span class="token register variable">ax</span>          <span class="token comment">;使用数据标号</span>
           <span class="token function">inc</span>  <span class="token register variable">si</span>
           <span class="token function">loop</span> s

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
11:Tb8d,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token string">'misunderstanding'</span>,<span class="token number">0
</span>datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token number">0 </span>                      <span class="token comment">;设置DS:SI为字符串首地址</span>
           <span class="token function">call</span> i7ch

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>
    i7ch:
           <span class="token function">push</span> <span class="token register variable">cx</span>
           <span class="token function">push</span> <span class="token register variable">si</span>
           <span class="token function">mov</span>  <span class="token register variable">ch</span>,<span class="token number">0
</span>    w:     <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>
           <span class="token function">jcxz</span> return
           <span class="token function">and</span>  <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>,<span class="token number">11011111b
</span>           <span class="token function">inc</span>  <span class="token register variable">si</span>
           <span class="token function">jmp</span>  w
    return:<span class="token function">pop</span>  <span class="token register variable">si</span>
           <span class="token function">pop</span>  <span class="token register variable">cx</span>
           <span class="token function">ret</span>
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
12:T811,assume cs:codesg,ds:datasg,ss:stcksg

datasg segment
              db 'misunderstanding',0
datasg ends

stcksg segment
              db 16 dup(0)
stcksg ends

codesg segment
       start:
       ;安装中断处理程序
                mov  ax,0
                mov  es,ax
                mov  di,200h                                ;设置安装位置，安装到ES:DI处
                call install
       ;设置中断向量表
                mov  word ptr es:[7ch*4],200h               ;设置7ch号中断的IP=200h
                mov  word ptr es:[7ch*4+2],0                ;设置7ch号中断的CS=0
       ;调用中断实现功能
                mov  ax,datasg
                mov  ds,ax
                mov  si,0                                   ;设置DS:SI为字符串首地址
                int  7ch

                mov  ax,4c00h
                int  21h

       ;中断安装程序
       ;使用movsb指令安装，该指令从DS:SI复制到ES:DI，ES:DI在前面已经设置好
       install:
                push ax
                push cx
                push si
                push ds
                cld                                         ;设置方向标志
                mov  ax,cs
                mov  ds,ax                                  ;设置DS为代码段起始地址
                mov  si,offset i7ch                         ;设置SI为offset i7ch（从子程序开始处复制）
                mov  cx,offset end_i7ch - offset i7ch       ;使用地址标号相减得到指令长度，也是循环次数
                rep  movsb
                pop  ds
                pop  si
                pop  cx
                pop  ax
                ret

       i7ch:
                push cx
                push si
                mov  ch,0
       w:       mov  cx,[si]
                jcxz return
                and  byte ptr [si],11011111b
                inc  si
                jmp  w
       return:  pop  si
                pop  cx
                iret
       end_i7ch:
                nop
codesg ends
end start
13:T1c13,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
              <span class="token keyword">db</span> <span class="token string">'misunderstanding'</span>,<span class="token number">0
</span>datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
              <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
       start:
       <span class="token comment">;安装中断处理程序</span>
                <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">0
</span>                <span class="token function">mov</span>  <span class="token register variable">es</span>,<span class="token register variable">ax</span>
                <span class="token function">mov</span>  <span class="token register variable">di</span>,<span class="token number">200h </span>                               <span class="token comment">;设置安装位置，安装到ES:DI处</span>
                <span class="token function">call</span> install
       <span class="token comment">;设置中断向量表</span>
                <span class="token function">mov</span>  <span class="token keyword">word</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">7ch*</span><span class="token number">4]</span>,<span class="token number">200h </span>              <span class="token comment">;设置7ch号中断的IP=200h</span>
                <span class="token function">mov</span>  <span class="token keyword">word</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">7ch*</span><span class="token number">4+</span><span class="token number">2]</span>,<span class="token number">0 </span>               <span class="token comment">;设置7ch号中断的CS=0</span>
       <span class="token comment">;调用中断实现功能</span>
                <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
                <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
                <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token number">0 </span>                                  <span class="token comment">;设置DS:SI为字符串首地址</span>
                <span class="token function">int</span>  <span class="token number">7ch
</span>
                <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>                <span class="token function">int</span>  <span class="token number">21h
</span>
       <span class="token comment">;中断安装程序</span>
       <span class="token comment">;使用movsb指令安装，该指令从DS:SI复制到ES:DI，ES:DI在前面已经设置好</span>
       install:
                <span class="token function">push</span> <span class="token register variable">ax</span>
                <span class="token function">push</span> <span class="token register variable">cx</span>
                <span class="token function">push</span> <span class="token register variable">si</span>
                <span class="token function">push</span> <span class="token register variable">ds</span>
                <span class="token function">cld</span>                                         <span class="token comment">;设置方向标志</span>
                <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token register variable">cs</span>
                <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>                                  <span class="token comment">;设置DS为代码段起始地址</span>
                <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token keyword">offset</span> i7ch                         <span class="token comment">;设置SI为offset i7ch（从子程序开始处复制）</span>
                <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token keyword">offset</span> end_i7ch <span class="token operator">-</span> <span class="token keyword">offset</span> i7ch       <span class="token comment">;使用地址标号相减得到指令长度，也是循环次数</span>
                <span class="token function">rep</span>  <span class="token function">movsb</span>
                <span class="token function">pop</span>  <span class="token register variable">ds</span>
                <span class="token function">pop</span>  <span class="token register variable">si</span>
                <span class="token function">pop</span>  <span class="token register variable">cx</span>
                <span class="token function">pop</span>  <span class="token register variable">ax</span>
                <span class="token function">ret</span>

       i7ch:
                <span class="token function">push</span> <span class="token register variable">cx</span>
                <span class="token function">push</span> <span class="token register variable">si</span>
                <span class="token function">mov</span>  <span class="token register variable">ch</span>,<span class="token number">0
</span>       w:       <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>
                <span class="token function">jcxz</span> return
                <span class="token function">and</span>  <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>,<span class="token number">11011111b
</span>                <span class="token function">inc</span>  <span class="token register variable">si</span>
                <span class="token function">jmp</span>  w
       return:  <span class="token function">pop</span>  <span class="token register variable">si</span>
                <span class="token function">pop</span>  <span class="token register variable">cx</span>
                iret
       end_i7ch:
                <span class="token function">nop</span>
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
14:T4f8,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg

datasg <span class="token keyword">segment</span>
              <span class="token keyword">db</span> <span class="token string">'internationalism'</span>,<span class="token number">0
</span>datasg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
       start:
              <span class="token function">mov</span> <span class="token register variable">ax</span>,datasg
              <span class="token function">mov</span> <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
              <span class="token function">mov</span> <span class="token register variable">si</span>,<span class="token number">0
</span>              <span class="token function">int</span> <span class="token number">7ch
</span>
              <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>              <span class="token function">int</span> <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
15:Ta17,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span> <span class="token register variable">ah</span>,<span class="token number">2 </span>           <span class="token comment">;设置光标位置功能号</span>
           <span class="token function">mov</span> <span class="token register variable">bh</span>,<span class="token number">0 </span>           <span class="token comment">;页号为0</span>
           <span class="token function">mov</span> <span class="token register variable">dh</span>,<span class="token number">5 </span>           <span class="token comment">;第5行</span>
           <span class="token function">mov</span> <span class="token register variable">dl</span>,<span class="token number">12 </span>          <span class="token comment">;第12列</span>
           <span class="token function">int</span> <span class="token number">10h </span>            <span class="token comment">;调用BIOS中断</span>

           <span class="token function">mov</span> <span class="token register variable">ah</span>,<span class="token number">9 </span>           <span class="token comment">;显示字符功能号</span>
           <span class="token function">mov</span> <span class="token register variable">al</span>,<span class="token string">'a'</span>          <span class="token comment">;要显示的字符为'a'</span>
           <span class="token function">mov</span> <span class="token register variable">bl</span>,<span class="token number">01001010b </span>   <span class="token comment">;颜色属性</span>
           <span class="token function">mov</span> <span class="token register variable">bh</span>,<span class="token number">0 </span>           <span class="token comment">;页号为0</span>
           <span class="token function">mov</span> <span class="token register variable">cx</span>,<span class="token number">3 </span>           <span class="token comment">;重复3次，即显示3个'a'</span>
           <span class="token function">int</span> <span class="token number">10h </span>            <span class="token comment">;调用BIOS中断</span>

           <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span> <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
16:Ta9e,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg
codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token number">0ffh
</span>           <span class="token function">out</span>  <span class="token number">42h,</span><span class="token register variable">al</span>       <span class="token comment">;设置声音频率，第一次写入低8位</span>
           <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token number">08h
</span>           <span class="token function">out</span>  <span class="token number">42h,</span><span class="token register variable">al</span>       <span class="token comment">;设置声音频率，第二次写入高8位</span>

           <span class="token function">in</span>   <span class="token register variable">al</span>,<span class="token number">61h </span>      <span class="token comment">;读取端口原值</span>
           <span class="token function">mov</span>  <span class="token register variable">ah</span>,<span class="token register variable">al</span>        <span class="token comment">;保存原值到AH</span>

           <span class="token function">or</span>   <span class="token register variable">al</span>,<span class="token number">3 </span>        <span class="token comment">;设置最低两位为1：打开扬声器和定时器</span>
           <span class="token function">out</span>  <span class="token number">61h,</span><span class="token register variable">al</span>       <span class="token comment">;接通扬声器和定时器</span>

           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">0ffffh
</span>    delay: <span class="token function">nop</span>
           <span class="token function">loop</span> delay        <span class="token comment">;延迟一段时间</span>

           <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token register variable">ah</span>
           <span class="token function">out</span>  <span class="token number">61h,</span><span class="token register variable">al</span>       <span class="token comment">;恢复端口原值</span>

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
17:Tbce,assume cs:codesg,ds:datasg,ss:stcksg

datasg segment
           db 'Cannot divide by zero!',32 dup(0)
datasg ends

stcksg segment
           db 16 dup(0)
stcksg ends

codesg segment
    start:
    ;安装中断处理程序
             mov  ax,0
             mov  es,ax
             mov  di,200h-32                          ;设置安装位置，安装到ES:DI处，留出了32字节的数据空间用于存储提示字符串
             call install
    ;设置中断向量表
             mov  word ptr es:[0],200h                ;设置0号中断的IP=200h，真正的程序从200h开始
             mov  word ptr es:[2],0                   ;设置0号中断的CS=0

             mov  ax,4c00h
             int  21h

    ;中断安装程序
    ;使用movsb指令安装，该指令从DS:SI复制到ES:DI，ES:DI在前面已经设置好
    install:
             push ax
             push cx
             push si
             push ds
             cld                                      ;设置方向标志
    ;前32字节安装字符串常量
             mov  ax,datasg
             mov  ds,ax                               ;设置DS为数据段起始地址
             mov  si,0                                ;设置SI为0
             mov  cx,32                               ;一共复制32个字节（字符串+填充的0），循环32次
             rep  movsb
    ;后面安装程序
             mov  ax,cs
             mov  ds,ax                               ;设置DS为代码段起始地址
             mov  si,offset div0                      ;设置SI为offset div0（从子程序开始处复制）
             mov  cx,offset end_div0 - offset div0    ;使用地址标号相减得到指令长度，也是循环次数
             rep  movsb
             pop  ds
             pop  si
             pop  cx
             pop  ax
             ret

    ;中断处理程序
    div0:
             push ax
             push cx
             push si
             push di
             push ds
             push es
             mov  ax,0
             mov  ds,ax
             mov  si,200h-32                          ;初始化DS:SI=00200h-32，这是安装好的字符串数据的起始地址
             mov  ax,0b800h
             mov  es,ax
             mov  di,80*2*12                          ;初始化ES:DI=b8000h+80*2*12，这目标显存的起始地址（第12行开头）
             mov  ch,0
    w:       mov  cl,[si]                             ;字符串循环写入显存
             jcxz return                              ;遇到0就停止
             mov  es:[di],cl
             mov  byte ptr es:[di+1],40h              ;红底黑字
             inc  si
             add  di,2
             jmp  w
    return:  pop  es
             pop  ds
             pop  di
             pop  si
             pop  cx
             pop  ax
             mov  ax,4c00h
             int  21h                                 ;直接返回操作系统
    end_div0:
             nop
codesg ends
end start
18:T29c8,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token string">'Cannot divide by zero!'</span>,<span class="token number">32 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
    <span class="token comment">;安装中断处理程序</span>
             <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">0
</span>             <span class="token function">mov</span>  <span class="token register variable">es</span>,<span class="token register variable">ax</span>
             <span class="token function">mov</span>  <span class="token register variable">di</span>,<span class="token number">200h-</span><span class="token number">32 </span>                         <span class="token comment">;设置安装位置，安装到ES:DI处，留出了32字节的数据空间用于存储提示字符串</span>
             <span class="token function">call</span> install
    <span class="token comment">;设置中断向量表</span>
             <span class="token function">mov</span>  <span class="token keyword">word</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">0]</span>,<span class="token number">200h </span>               <span class="token comment">;设置0号中断的IP=200h，真正的程序从200h开始</span>
             <span class="token function">mov</span>  <span class="token keyword">word</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">2]</span>,<span class="token number">0 </span>                  <span class="token comment">;设置0号中断的CS=0</span>

             <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>             <span class="token function">int</span>  <span class="token number">21h
</span>
    <span class="token comment">;中断安装程序</span>
    <span class="token comment">;使用movsb指令安装，该指令从DS:SI复制到ES:DI，ES:DI在前面已经设置好</span>
    install:
             <span class="token function">push</span> <span class="token register variable">ax</span>
             <span class="token function">push</span> <span class="token register variable">cx</span>
             <span class="token function">push</span> <span class="token register variable">si</span>
             <span class="token function">push</span> <span class="token register variable">ds</span>
             <span class="token function">cld</span>                                      <span class="token comment">;设置方向标志</span>
    <span class="token comment">;前32字节安装字符串常量</span>
             <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
             <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>                               <span class="token comment">;设置DS为数据段起始地址</span>
             <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token number">0 </span>                               <span class="token comment">;设置SI为0</span>
             <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">32 </span>                              <span class="token comment">;一共复制32个字节（字符串+填充的0），循环32次</span>
             <span class="token function">rep</span>  <span class="token function">movsb</span>
    <span class="token comment">;后面安装程序</span>
             <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token register variable">cs</span>
             <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>                               <span class="token comment">;设置DS为代码段起始地址</span>
             <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token keyword">offset</span> div0                      <span class="token comment">;设置SI为offset div0（从子程序开始处复制）</span>
             <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token keyword">offset</span> end_div0 <span class="token operator">-</span> <span class="token keyword">offset</span> div0    <span class="token comment">;使用地址标号相减得到指令长度，也是循环次数</span>
             <span class="token function">rep</span>  <span class="token function">movsb</span>
             <span class="token function">pop</span>  <span class="token register variable">ds</span>
             <span class="token function">pop</span>  <span class="token register variable">si</span>
             <span class="token function">pop</span>  <span class="token register variable">cx</span>
             <span class="token function">pop</span>  <span class="token register variable">ax</span>
             <span class="token function">ret</span>

    <span class="token comment">;中断处理程序</span>
    div0:
             <span class="token function">push</span> <span class="token register variable">ax</span>
             <span class="token function">push</span> <span class="token register variable">cx</span>
             <span class="token function">push</span> <span class="token register variable">si</span>
             <span class="token function">push</span> <span class="token register variable">di</span>
             <span class="token function">push</span> <span class="token register variable">ds</span>
             <span class="token function">push</span> <span class="token register variable">es</span>
             <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">0
</span>             <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
             <span class="token function">mov</span>  <span class="token register variable">si</span>,<span class="token number">200h-</span><span class="token number">32 </span>                         <span class="token comment">;初始化DS:SI=00200h-32，这是安装好的字符串数据的起始地址</span>
             <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">0b800h
</span>             <span class="token function">mov</span>  <span class="token register variable">es</span>,<span class="token register variable">ax</span>
             <span class="token function">mov</span>  <span class="token register variable">di</span>,<span class="token number">80*</span><span class="token number">2*</span><span class="token number">12 </span>                         <span class="token comment">;初始化ES:DI=b8000h+80*2*12，这目标显存的起始地址（第12行开头）</span>
             <span class="token function">mov</span>  <span class="token register variable">ch</span>,<span class="token number">0
</span>    w:       <span class="token function">mov</span>  <span class="token register variable">cl</span>,<span class="token operator">[</span><span class="token register variable">si</span><span class="token operator">]</span>                             <span class="token comment">;字符串循环写入显存</span>
             <span class="token function">jcxz</span> return                              <span class="token comment">;遇到0就停止</span>
             <span class="token function">mov</span>  <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token register variable">di</span><span class="token operator">]</span>,<span class="token register variable">cl</span>
             <span class="token function">mov</span>  <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token register variable">di</span><span class="token operator">+</span><span class="token number">1]</span>,<span class="token number">40h </span>             <span class="token comment">;红底黑字</span>
             <span class="token function">inc</span>  <span class="token register variable">si</span>
             <span class="token function">add</span>  <span class="token register variable">di</span>,<span class="token number">2
</span>             <span class="token function">jmp</span>  w
    return:  <span class="token function">pop</span>  <span class="token register variable">es</span>
             <span class="token function">pop</span>  <span class="token register variable">ds</span>
             <span class="token function">pop</span>  <span class="token register variable">di</span>
             <span class="token function">pop</span>  <span class="token register variable">si</span>
             <span class="token function">pop</span>  <span class="token register variable">cx</span>
             <span class="token function">pop</span>  <span class="token register variable">ax</span>
             <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>             <span class="token function">int</span>  <span class="token number">21h </span>                                <span class="token comment">;直接返回操作系统</span>
    end_div0:
             <span class="token function">nop</span>
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
19:Tf03,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">32 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
    <span class="token comment">;一段循环在屏幕中间显示A~Z的程序</span>
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">0b800h
</span>           <span class="token function">mov</span>  <span class="token register variable">es</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token string">'A'</span>
           <span class="token function">mov</span>   <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">80*</span><span class="token number">2*</span><span class="token number">12+</span><span class="token number">40*</span><span class="token number">2+</span><span class="token number">1]</span>,<span class="token number">40h </span>  <span class="token comment">;第12行、第40列，红底黑字</span>
    s:     <span class="token function">mov</span>  <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">80*</span><span class="token number">2*</span><span class="token number">12+</span><span class="token number">40*</span><span class="token number">2]</span>,<span class="token register variable">al</span>                <span class="token comment">;显示字符</span>
           <span class="token function">call</span> delay
           <span class="token function">inc</span>  <span class="token register variable">al</span>
           <span class="token function">cmp</span>  <span class="token register variable">al</span>,<span class="token string">'Z'</span>
           jng  s

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>
    <span class="token comment">;执行双重空循环，延时</span>
    delay:
           <span class="token function">push</span> <span class="token register variable">cx</span>
           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">10h
</span>    s1:    <span class="token function">push</span> <span class="token register variable">cx</span>
           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">0ffffh
</span>    s2:    <span class="token function">loop</span> s2
           <span class="token function">pop</span>  <span class="token register variable">cx</span>
           <span class="token function">loop</span> s1
           <span class="token function">pop</span>  <span class="token register variable">cx</span>
           <span class="token function">ret</span>
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
1a:T12bc,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">32 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
    <span class="token comment">;保存原来的中断向量到DS:0处</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>   <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0
</span>           <span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
           <span class="token function">push</span>  <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4]</span>
           <span class="token function">pop</span>   <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">0]</span>
           <span class="token function">push</span>  <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4+</span><span class="token number">2]</span>
           <span class="token function">pop</span>   <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">2]</span>
    <span class="token comment">;更改原来的中断向量</span>
           <span class="token function">mov</span>   <span class="token keyword">word</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4]</span>,<span class="token keyword">offset</span> i9               <span class="token comment">;设置9号中断的IP为offset i9</span>
           <span class="token function">mov</span>   <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4+</span><span class="token number">2]</span>,<span class="token register variable">cs</span>                             <span class="token comment">;设置9号中断的CS为代码段起始地址</span>

    <span class="token comment">;一段循环在屏幕中间显示A~Z的程序</span>
           <span class="token comment">;...</span>

    <span class="token comment">;恢复原来的中断向量</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0
</span>           <span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
           <span class="token function">push</span>  <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">0]</span>
           <span class="token function">pop</span>   <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4]</span>
           <span class="token function">push</span>  <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">2]</span>
           <span class="token function">pop</span>   <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4+</span><span class="token number">2]</span>

           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>   <span class="token number">21h
</span>
    i9:
           <span class="token comment">;...</span>
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
1b:T595,<span class="token comment">;自定义的键盘输入处理</span>
<span class="token function">in</span>    <span class="token register variable">al</span>,<span class="token number">60h </span>                                   <span class="token comment">;读取键盘输入送入AL</span>
<span class="token function">cmp</span>   <span class="token register variable">al</span>,<span class="token number">38h </span>                                   <span class="token comment">;判断是否为Alt键</span>
jne   return                                    <span class="token comment">;不是则返回</span>
<span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0b800h
</span><span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
<span class="token function">xor</span>   <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">80*</span><span class="token number">2*</span><span class="token number">12+</span><span class="token number">40*</span><span class="token number">2+</span><span class="token number">1]</span>,<span class="token number">01100000b </span>   <span class="token comment">;在红色和绿色背景之间切换</span>
1c:Tc8b,i9:
       <span class="token function">push</span>  <span class="token register variable">ax</span>
       <span class="token function">push</span>  <span class="token register variable">bx</span>
       <span class="token function">push</span>  <span class="token register variable">es</span>
<span class="token comment">;------------------------------------------------------</span>
<span class="token comment">;模拟标志寄存器入栈</span>
       <span class="token function">pushf</span>
<span class="token comment">;模拟设置IF=0，TF=0</span>
       <span class="token function">pushf</span>
       <span class="token function">pop</span>   <span class="token register variable">bx</span>
       <span class="token function">and</span>   <span class="token register variable">bh</span>,<span class="token number">11111100b
</span>       <span class="token function">push</span>  <span class="token register variable">bx</span>
       <span class="token function">popf</span>
<span class="token comment">;call指令即可实现CS、IP入栈并跳转到入口地址</span>
       <span class="token function">call</span>  <span class="token keyword">dword</span> <span class="token keyword">ptr</span> <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">0]</span>
<span class="token comment">;------------------------------------------------------</span>
<span class="token comment">;自定义的键盘输入处理</span>
       <span class="token function">in</span>    <span class="token register variable">al</span>,<span class="token number">60h </span>                                   <span class="token comment">;读取键盘输入送入AL</span>
       <span class="token function">cmp</span>   <span class="token register variable">al</span>,<span class="token number">38h </span>                                   <span class="token comment">;判断是否为Alt键</span>
       jne   return                                    <span class="token comment">;不是则返回</span>
       <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0b800h
</span>       <span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
       <span class="token function">xor</span>   <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">80*</span><span class="token number">2*</span><span class="token number">12+</span><span class="token number">40*</span><span class="token number">2+</span><span class="token number">1]</span>,<span class="token number">01100000b </span>   <span class="token comment">;在红色和绿色背景之间切换</span>
return:
       <span class="token function">pop</span>   <span class="token register variable">es</span>
       <span class="token function">pop</span>   <span class="token register variable">bx</span>
       <span class="token function">pop</span>   <span class="token register variable">ax</span>
       iret
1d:T9bb,assume cs:codesg,ds:datasg,ss:stcksg

datasg segment
           db 32 dup(0)
datasg ends

stcksg segment
           db 16 dup(0)
stcksg ends

codesg segment
    start:
    ;保存原来的中断向量到DS:0处
           mov   ax,datasg
           mov   ds,ax
           mov   ax,0
           mov   es,ax
           push  es:[9*4]
           pop   ds:[0]
           push  es:[9*4+2]
           pop   ds:[2]
    ;更改原来的中断向量
           mov   word ptr es:[9*4],offset i9               ;设置9号中断的IP为offset i9
           mov   es:[9*4+2],cs                             ;设置9号中断的CS为代码段起始地址
    ;一段循环在屏幕中间显示A~Z的程序
           mov   ax,0b800h
           mov   es,ax
           mov   al,'A'
           mov   byte ptr es:[80*2*12+40*2+1],40h          ;第12行、第40列，红底黑字
    s:     mov   es:[80*2*12+40*2],al                      ;显示字符
           call  delay
           inc   al
           cmp   al,'Z'
           jng   s
    ;恢复原来的中断向量
           mov   ax,0
           mov   es,ax
           push  ds:[0]
           pop   es:[9*4]
           push  ds:[2]
           pop   es:[9*4+2]

           mov   ax,4c00h
           int   21h

    ;执行双重空循环，延时
    delay:
           push  cx
           mov   cx,10h
    s1:    push  cx
           mov   cx,0ffffh
    s2:    loop  s2
           pop   cx
           loop  s1
           pop   cx
           ret

    i9:
           push  ax
           push  bx
           push  es
    ;------------------------------------------------------
    ;模拟标志寄存器入栈
           pushf
    ;模拟设置IF=0，TF=0
           pushf
           pop   bx
           and   bh,11111100b
           push  bx
           popf
    ;call指令即可实现CS、IP入栈并跳转到入口地址
           call  dword ptr ds:[0]
    ;------------------------------------------------------
    ;自定义的键盘输入处理
           in    al,60h                                    ;读取键盘输入送入AL
           cmp   al,38h                                    ;判断是否为Alt键
           jne   return                                    ;不是则返回
           mov   ax,0b800h
           mov   es,ax
           xor   byte ptr es:[80*2*12+40*2+1],01100000b    ;在红色和绿色背景之间切换

    return:
           pop   es
           pop   bx
           pop   ax
           iret
codesg ends
end start
1e:T29ba,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">32 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token number">16 </span><span class="token keyword">dup</span>(<span class="token number">0)</span>
stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
    <span class="token comment">;保存原来的中断向量到DS:0处</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>   <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0
</span>           <span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
           <span class="token function">push</span>  <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4]</span>
           <span class="token function">pop</span>   <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">0]</span>
           <span class="token function">push</span>  <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4+</span><span class="token number">2]</span>
           <span class="token function">pop</span>   <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">2]</span>
    <span class="token comment">;更改原来的中断向量</span>
           <span class="token function">mov</span>   <span class="token keyword">word</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4]</span>,<span class="token keyword">offset</span> i9               <span class="token comment">;设置9号中断的IP为offset i9</span>
           <span class="token function">mov</span>   <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4+</span><span class="token number">2]</span>,<span class="token register variable">cs</span>                             <span class="token comment">;设置9号中断的CS为代码段起始地址</span>
    <span class="token comment">;一段循环在屏幕中间显示A~Z的程序</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0b800h
</span>           <span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span>   <span class="token register variable">al</span>,<span class="token string">'A'</span>
           <span class="token function">mov</span>   <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">80*</span><span class="token number">2*</span><span class="token number">12+</span><span class="token number">40*</span><span class="token number">2+</span><span class="token number">1]</span>,<span class="token number">40h </span>         <span class="token comment">;第12行、第40列，红底黑字</span>
    s:     <span class="token function">mov</span>   <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">80*</span><span class="token number">2*</span><span class="token number">12+</span><span class="token number">40*</span><span class="token number">2]</span>,<span class="token register variable">al</span>                      <span class="token comment">;显示字符</span>
           <span class="token function">call</span>  delay
           <span class="token function">inc</span>   <span class="token register variable">al</span>
           <span class="token function">cmp</span>   <span class="token register variable">al</span>,<span class="token string">'Z'</span>
           jng   s
    <span class="token comment">;恢复原来的中断向量</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0
</span>           <span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
           <span class="token function">push</span>  <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">0]</span>
           <span class="token function">pop</span>   <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4]</span>
           <span class="token function">push</span>  <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">2]</span>
           <span class="token function">pop</span>   <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">9*</span><span class="token number">4+</span><span class="token number">2]</span>

           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>   <span class="token number">21h
</span>
    <span class="token comment">;执行双重空循环，延时</span>
    delay:
           <span class="token function">push</span>  <span class="token register variable">cx</span>
           <span class="token function">mov</span>   <span class="token register variable">cx</span>,<span class="token number">10h
</span>    s1:    <span class="token function">push</span>  <span class="token register variable">cx</span>
           <span class="token function">mov</span>   <span class="token register variable">cx</span>,<span class="token number">0ffffh
</span>    s2:    <span class="token function">loop</span>  s2
           <span class="token function">pop</span>   <span class="token register variable">cx</span>
           <span class="token function">loop</span>  s1
           <span class="token function">pop</span>   <span class="token register variable">cx</span>
           <span class="token function">ret</span>

    i9:
           <span class="token function">push</span>  <span class="token register variable">ax</span>
           <span class="token function">push</span>  <span class="token register variable">bx</span>
           <span class="token function">push</span>  <span class="token register variable">es</span>
    <span class="token comment">;------------------------------------------------------</span>
    <span class="token comment">;模拟标志寄存器入栈</span>
           <span class="token function">pushf</span>
    <span class="token comment">;模拟设置IF=0，TF=0</span>
           <span class="token function">pushf</span>
           <span class="token function">pop</span>   <span class="token register variable">bx</span>
           <span class="token function">and</span>   <span class="token register variable">bh</span>,<span class="token number">11111100b
</span>           <span class="token function">push</span>  <span class="token register variable">bx</span>
           <span class="token function">popf</span>
    <span class="token comment">;call指令即可实现CS、IP入栈并跳转到入口地址</span>
           <span class="token function">call</span>  <span class="token keyword">dword</span> <span class="token keyword">ptr</span> <span class="token register variable">ds</span>:<span class="token operator">[</span><span class="token number">0]</span>
    <span class="token comment">;------------------------------------------------------</span>
    <span class="token comment">;自定义的键盘输入处理</span>
           <span class="token function">in</span>    <span class="token register variable">al</span>,<span class="token number">60h </span>                                   <span class="token comment">;读取键盘输入送入AL</span>
           <span class="token function">cmp</span>   <span class="token register variable">al</span>,<span class="token number">38h </span>                                   <span class="token comment">;判断是否为Alt键</span>
           jne   return                                    <span class="token comment">;不是则返回</span>
           <span class="token function">mov</span>   <span class="token register variable">ax</span>,<span class="token number">0b800h
</span>           <span class="token function">mov</span>   <span class="token register variable">es</span>,<span class="token register variable">ax</span>
           <span class="token function">xor</span>   <span class="token keyword">byte</span> <span class="token keyword">ptr</span> <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token number">80*</span><span class="token number">2*</span><span class="token number">12+</span><span class="token number">40*</span><span class="token number">2+</span><span class="token number">1]</span>,<span class="token number">01100000b </span>   <span class="token comment">;在红色和绿色背景之间切换</span>

    return:
           <span class="token function">pop</span>   <span class="token register variable">es</span>
           <span class="token function">pop</span>   <span class="token register variable">bx</span>
           <span class="token function">pop</span>   <span class="token register variable">ax</span>
           iret
codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
5:[["$","h2",null,{"className":"x-h1","children":"描述内存单元的标号"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"汇编语言中同样可以用标号表示内存单元，称为数据标号，使用起来的感觉很像C语言的数组。下面的程序计算<code class=\"x-inline-highlight\">arr</code>中元素的和，并存放在数据标号<code class=\"x-inline-highlight\">x</code>对应的字空间中："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg\n\ndatasg segment\n    arr    db 1,2,3,4,5,6,7,8\n    x      dw 0\ndatasg ends\n\ncodesg segment\n    start:\n           mov  ax,datasg\n           mov  ds,ax\n\n           mov  si,0\n           mov  cx,8\n    s:     mov  ah,0\n           mov  al,arr[si]    ;使用数据标号\n           add  x,ax          ;使用数据标号\n           inc  si\n           loop s\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"和前面学习的地址标号相比，地址标号仅仅表示一个地址，而数据标号表示地址的同时还暗含了数据的类型，操作时不再需要用<code class=\"x-inline-highlight\">byte ptr</code>等显式地指定数据的类型。"}}],["$","h2",null,{"className":"x-h1","children":"操作显存"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"屏幕上的内容其实就是显存中的数据。显存是一块内存区域，在8086 CPU中，显存占用地址<code class=\"x-inline-highlight\">a0000h</code>~<code class=\"x-inline-highlight\">bffffh</code>共<code class=\"x-inline-highlight\">128KB</code>的地址空间，而显示字符时常用到其中的一小块区域：<code class=\"x-inline-highlight\">b8000h</code>~<code class=\"x-inline-highlight\">bffffh</code>共<code class=\"x-inline-highlight\">32KB</code>的地址空间，它是<code class=\"x-inline-highlight\">25</code>行、<code class=\"x-inline-highlight\">80</code>列彩色字符模式第<code class=\"x-inline-highlight\">0</code>页的显示缓冲区。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这<code class=\"x-inline-highlight\">32KB</code>的地址空间被划分为<code class=\"x-inline-highlight\">8</code>个页，每个页<code class=\"x-inline-highlight\">4KB</code>；<code class=\"x-inline-highlight\">25</code>行、<code class=\"x-inline-highlight\">80</code>列一共<code class=\"x-inline-highlight\">2000</code>个字符，每个字符用<code class=\"x-inline-highlight\">2</code>个字节描述，刚好是一页的大小。这两个字节分别是：要显示符号的ASCII码、显示属性。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"显示属性一个字节共<code class=\"x-inline-highlight\">8</code>位，从高到低依次是："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"位"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">7</code>"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">6</code>"}}]}],["$","td","3",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">5</code>"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">4</code>"}}]}],["$","td","5",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">3</code>"}}]}],["$","td","6",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">2</code>"}}]}],["$","td","7",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">1</code>"}}]}],["$","td","8",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">0</code>"}}]}]]}],["$","tr","1",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"含义"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"闪烁"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"背景<code class=\"x-inline-highlight\">R</code>"}}]}],["$","td","3",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"背景<code class=\"x-inline-highlight\">G</code>"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"背景<code class=\"x-inline-highlight\">B</code>"}}]}],["$","td","5",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"高亮"}}]}],["$","td","6",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"前景<code class=\"x-inline-highlight\">R</code>"}}]}],["$","td","7",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"前景<code class=\"x-inline-highlight\">G</code>"}}]}],["$","td","8",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"前景<code class=\"x-inline-highlight\">B</code>"}}]}]]}]]}]}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"直接修改内存对应地址的值，屏幕上就会立即有变化："}}],["$","$L10",null,{"src":"fig1.jpg","width":"100%"}],["$","h2",null,{"className":"x-h1","children":"中断、中断处理程序"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在8086 CPU中，中断可以打断当前程序的执行，当CPU收到中断请求时，会执行中断处理程序，处理完后再返回到原程序继续执行。中断处理程序的入口地址存放在<span class=\"x-inline-strong\">中断向量表</span>中，根据中断类型码查表得到对应处理程序的入口地址。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"8086 CPU的中断向量表是一个<code class=\"x-inline-highlight\">1KB</code>的表，包含了<code class=\"x-inline-highlight\">256</code>个中断类型码对应的中断处理程序的入口地址，每个入口地址占<code class=\"x-inline-highlight\">4</code>个字节，前两字节存放<code class=\"x-inline-highlight\">IP</code>的值，后两字节存放<code class=\"x-inline-highlight\">CS</code>的值。中断向量表的起始地址是<code class=\"x-inline-highlight\">00000h</code>，终止地址是<code class=\"x-inline-highlight\">003ffh</code>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"00000h: 0号中断处理程序的入口地址IP\n00002h: 0号中断处理程序的入口地址CS\n00004h: 1号中断处理程序的入口地址IP\n00006h: 1号中断处理程序的入口地址CS\n00008h: 2号中断处理程序的入口地址IP\n0000ah: 2号中断处理程序的入口地址CS\n...\n003fch: 255号中断处理程序的入口地址IP\n003feh: 255号中断处理程序的入口地址CS\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"00000h: 0号中断处理程序的入口地址IP\n00002h: 0号中断处理程序的入口地址CS\n00004h: 1号中断处理程序的入口地址IP\n00006h: 1号中断处理程序的入口地址CS\n00008h: 2号中断处理程序的入口地址IP\n0000ah: 2号中断处理程序的入口地址CS\n...\n003fch: 255号中断处理程序的入口地址IP\n003feh: 255号中断处理程序的入口地址CS\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"中断可以分为："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"内部中断：由CPU内部产生，如除法错误（<code class=\"x-inline-highlight\">0</code>号）、溢出（<code class=\"x-inline-highlight\">4</code>号）、<code class=\"x-inline-highlight\">int n</code>指令触发（<code class=\"x-inline-highlight\">n</code>号）等。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"外部中断：由外部设备产生，如键盘输入等。"}}]}]]}],["$","$L10",null,{"src":"fig9.jpg","width":"800px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"其中外部中断又分为可屏蔽中断和不可屏蔽中断："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"可屏蔽中断：CPU可以不响应的外中断，一般是由外部硬件通过INTR<code class=\"x-inline-highlight\">(Interrupt Request)</code>信号线发送给CPU；CPU是否响应取决于<code class=\"x-inline-highlight\">IF</code>标志位，如果<code class=\"x-inline-highlight\">IF=0</code>，CPU不响应可屏蔽中断。"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"不可屏蔽中断：CPU必须响应的外中断，通过NMI<code class=\"x-inline-highlight\">(Non-Maskable Interrupt)</code>信号线发送。8086 CPU不可屏蔽中断的中断类型码固定为<code class=\"x-inline-highlight\">2</code>。"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"几乎所有外部设备引发的中断都是可屏蔽中断，如键盘输入、打印机请求等；而不可屏蔽中断是在系统有必须处理的紧急情况发生时用来通知CPU的中断信息。"}}],["$","h3",null,{"className":"x-h2","children":"8086 CPU中断过程"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"中断过程由CPU的硬件自动完成，用中断类型码找到中断向量，并用它设置CS和IP。具体地说8086 CPU的中断过程为："}}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"从中断信息中取得中断类型码"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"标志寄存器入栈（中断过程会改变标志，需要先进行保护）"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"设置<code class=\"x-inline-highlight\">IF=0</code>，<code class=\"x-inline-highlight\">TF=0</code>"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"4."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">CS</code>入栈，<code class=\"x-inline-highlight\">IP</code>入栈"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"5."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"从中断向量表读取中断处理程序的入口地址，设置<code class=\"x-inline-highlight\">CS</code>和<code class=\"x-inline-highlight\">IP</code>"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"6."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"开始执行中断处理程序"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"单步中断"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"标志寄存器中有两个标志位与中断有关：<code class=\"x-inline-highlight\">TF(Trap Flag)</code>和<code class=\"x-inline-highlight\">IF(Interrupt Flag)</code>。<code class=\"x-inline-highlight\">TF</code>用于单步执行，<code class=\"x-inline-highlight\">IF</code>用于可屏蔽中断的开关。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">TF</code>陷阱标志用于调试，当<code class=\"x-inline-highlight\">TF=1</code>时，CPU在执行完一条指令后，会产生一个<code class=\"x-inline-highlight\">1</code>号中断，由系统控制计算机。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">IF</code>中断标志用于控制CPU是否响应可屏蔽中断。当<code class=\"x-inline-highlight\">IF=1</code>时，CPU响应可屏蔽中断；当<code class=\"x-inline-highlight\">IF=0</code>时，CPU不响应可屏蔽中断。这个标志位可以用<code class=\"x-inline-highlight\">sti</code>指令和<code class=\"x-inline-highlight\">cli</code>指令来设置："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"sti  ;设置IF=1，CPU响应可屏蔽中断\ncli  ;设置IF=0，CPU不响应可屏蔽中断\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">sti</span>  <span class=\"token comment\">;设置IF=1，CPU响应可屏蔽中断</span>\n<span class=\"token function\">cli</span>  <span class=\"token comment\">;设置IF=0，CPU不响应可屏蔽中断</span>\n"}}]}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-red","children":[["$","h4",null,{"className":"x-h3","children":"讨论"}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"8086 CPU中断过程第<code class=\"x-inline-highlight\">3</code>步中，为什么要设置<code class=\"x-inline-highlight\">TF=0</code>？"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"中断处理程序也是一条条的指令。如果在执行中断处理程序前<code class=\"x-inline-highlight\">TF=1</code>，则执行完程序的第一条指令后，又会产生单步中断，然后转去执行单步中断的中断处理程序。此时由于<code class=\"x-inline-highlight\">TF=1</code>，则执行完第一条指令后，又会产生单步中断……"}}]]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"8086 CPU中断过程第<code class=\"x-inline-highlight\">3</code>步中，为什么要设置<code class=\"x-inline-highlight\">IF=0</code>？"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"进入中断处理程序后，禁止其他的可屏蔽中断，避免中断嵌套。"}}]]}]]}]]}],["$","h3",null,{"className":"x-h2","children":"int指令与iret指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在执行<code class=\"x-inline-highlight\">int n</code>时，逻辑上相当于自动依次执行了：<code class=\"x-inline-highlight\">pushf</code>、<code class=\"x-inline-highlight\">push cs</code>、<code class=\"x-inline-highlight\">push ip</code>；它和<code class=\"x-inline-highlight\">call</code>指令保存<code class=\"x-inline-highlight\">CS</code>和<code class=\"x-inline-highlight\">IP</code>的行为很像，但还保存并修改了标志寄存器的值。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"对应地，从一个中断处理程序返回到原程序时，需要使用<code class=\"x-inline-highlight\">iret</code>指令，逻辑上相当于自动依次执行了：<code class=\"x-inline-highlight\">pop ip</code>、<code class=\"x-inline-highlight\">pop cs</code>、<code class=\"x-inline-highlight\">popf</code>。"}}],["$","h3",null,{"className":"x-h2","children":"int指令示例"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在这里我们编写设计一个<code class=\"x-inline-highlight\">int 7ch</code>中断，功能是将以<code class=\"x-inline-highlight\">0</code>结尾的纯字母字符串转为大写，参数是<code class=\"x-inline-highlight\">DS:SI</code>指向字符串首地址。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"先看不使用中断，只用最一般的子程序调用的实现："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg,ss:stcksg\n\ndatasg segment\n           db 'misunderstanding',0\ndatasg ends\n\nstcksg segment\n           db 16 dup(0)\nstcksg ends\n\ncodesg segment\n    start:\n           mov  ax,datasg\n           mov  ds,ax\n           mov  si,0                       ;设置DS:SI为字符串首地址\n           call i7ch\n\n           mov  ax,4c00h\n           int  21h\n\n    i7ch:\n           push cx\n           push si\n           mov  ch,0\n    w:     mov  cx,[si]\n           jcxz return\n           and  byte ptr [si],11011111b\n           inc  si\n           jmp  w\n    return:pop  si\n           pop  cx\n           ret\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","$L10",null,{"src":"fig11.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"现在希望编写一个<code class=\"x-inline-highlight\">i7ch</code>中断处理程序，由<code class=\"x-inline-highlight\">int 7ch</code>触发中断；此时需要一个确定、但又不影响系统的内存位置存放程序；一个技巧是使用中断向量表的内存区域，因为别的程序不会用到，而系统要处理的中断事件也远没有<code class=\"x-inline-highlight\">256</code>个，因此可以利用中断向量表后段地址空间，这里选取从<code class=\"x-inline-highlight\">00200h</code>开始的地址空间作为存放<code class=\"x-inline-highlight\">i7ch</code>程序的目的地址。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$12"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 312px, var(--bg-transparent-golden) 312px 504px, transparent 504px, transparent 600px, var(--bg-transparent-golden) 600px 624px, transparent 624px, transparent 720px, var(--bg-transparent-golden) 720px 1152px, transparent 1152px, transparent 1440px, var(--bg-transparent-golden) 1440px 1464px, transparent 1464px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"所谓的“安装程序”就是将<code class=\"x-inline-highlight\">i7ch</code>中断处理程序的代码复制到内存中（通过<code class=\"x-inline-highlight\">movsb</code>指令复制机器码），然后还需要修改中断向量表，将<code class=\"x-inline-highlight\">7ch</code>号中断的入口地址设置为复制到的内存地址。这样触发<code class=\"x-inline-highlight\">7ch</code>中断时就能够找到自定义的中断处理程序了。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"执行的效果是相同的：数据段中的字符串会被改写为大写，但要注意此时中断处理程序已经写入了内存，在其他程序中可以直接调用<code class=\"x-inline-highlight\">int 7ch</code>实现同样的功能！例如编写一个<code class=\"x-inline-highlight\">test</code>程序："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg\n\ndatasg segment\n              db 'internationalism',0\ndatasg ends\n\ncodesg segment\n       start:\n              mov ax,datasg\n              mov ds,ax\n              mov si,0\n              int 7ch\n\n              mov ax,4c00h\n              int 21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"假设前面的程序编译后得到<code class=\"x-inline-highlight\">i7ch.EXE</code>，现在做一个实验，依次执行："}}],["$","$L10",null,{"src":"fig12.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"可以看到<code class=\"x-inline-highlight\">test</code>程序中并没有<code class=\"x-inline-highlight\">7ch</code>中断相关的逻辑，但先执行过<code class=\"x-inline-highlight\">i7ch.EXE</code>之后，是可以调用相关逻辑完成转换大写功能的，说明成功在内存中存入程序、并改写入口地址了。"}}],["$","h2",null,{"className":"x-h1","children":"BIOS中断和DOS中断"}],["$","h3",null,{"className":"x-h2","children":"BIOS中断调用示例"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"BIOS中断是由BIOS提供的一些服务程序，可以通过<code class=\"x-inline-highlight\">int</code>指令调用。前面提到可以直接操作显存来控制屏幕显示的内容，而定位到具体的地址需要细节的计算；而BIOS的<code class=\"x-inline-highlight\">10h</code>号中断提供了一系列关于字符显示的功能，包括设置光标位置、在指定位置显示字符等。BIOS中断相当于封装了底层的细节，提供了更方便的调用方式。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"找到这些中断的中断号和功能描述，需要<span class=\"x-inline-strong\">查手册</span>！例如："}}],["$","$L10",null,{"src":"fig3.jpg","width":"800px","filterDarkTheme":true}],["$","$L10",null,{"src":"fig4.jpg","width":"800px","filterDarkTheme":true}],["$","$L10",null,{"src":"fig5.jpg","width":"800px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这个手册指明显示服务的中断号是<code class=\"x-inline-highlight\">10h</code>，我们如果想使用设置光标位置功能，需要设置四个输入参数：功能号<code class=\"x-inline-highlight\">AH</code>，页号<code class=\"x-inline-highlight\">BH</code>，行号<code class=\"x-inline-highlight\">DH</code>，列号<code class=\"x-inline-highlight\">DL</code>；显示字符功能同理。因此就可以编写出如下程序："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n    start:\n           mov ah,2            ;设置光标位置功能号\n           mov bh,0            ;页号为0\n           mov dh,5            ;第5行\n           mov dl,12           ;第12列\n           int 10h             ;调用BIOS中断\n\n           mov ah,9            ;显示字符功能号\n           mov al,'a'          ;要显示的字符为'a'\n           mov bl,01001010b    ;颜色属性\n           mov bh,0            ;页号为0\n           mov cx,3            ;重复3次，即显示3个'a'\n           int 10h             ;调用BIOS中断\n\n           mov ax,4c00h\n           int 21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$15"}}]}]]}],["$","$L10",null,{"src":"fig6.jpg","width":"100%"}],["$","h3",null,{"className":"x-h2","children":"DOS中断"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"DOS中断是由操作系统提供的、更为高层的中断，同样提供了丰富的功能，使用时查手册即可。下图列出了一些DOS中断，并以<code class=\"x-inline-highlight\">21h</code>为例做展开。"}}],["$","$L10",null,{"src":"fig7.jpg","width":"100%","filterDarkTheme":true}],["$","h3",null,{"className":"x-h2","children":"二者的联系"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"BIOS和DOS在所提供的中断处理程序中包含了许多子程序，这些子程序实现了编程时常用到的功能。<br/>这些功能大多是调用外设的功能，而外设的硬件细节太多，常调用ROM中的BIOS中断来完成操作；<br/>对于DOS中断来说，和硬件设备相关的DOS中断处理程序中，一般都是在操作系统级调用BIOS的中断处理程序来实现的，提供更加高层的一些功能。<br/>当然如果这些都不能满足需求，用户也可以在程序里直接和外设进行联系（端口操作）。"}}],["$","$L10",null,{"src":"fig8.jpg","width":"600px","filterDarkTheme":true}],["$","h2",null,{"className":"x-h1","children":"端口的读写"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"CPU可以直接读写三个地方的数据：CPU内部的寄存器、内存单元、端口；而端口对应网卡、显卡等等外部芯片。这些外部芯片工作时，都有一些寄存器由CPU读写；而从CPU的角度，就把这些寄存器当作端口并统一编址。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"端口的编址是<code class=\"x-inline-highlight\">16</code>位的，范围是<code class=\"x-inline-highlight\">0</code>~<code class=\"x-inline-highlight\">65535</code>，这部分地址是独立于内存地址的。硬件设备与特定端口之间的映射是由硬件设计者决定的；为了确保不同厂商的设备能够正常工作，会有标准化组织制定统一的行业标准。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"读写端口要使用<code class=\"x-inline-highlight\">in</code>指令和<code class=\"x-inline-highlight\">out</code>指令："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"in  al,20h  ;从20h号端口读取一个字节到AL\nout 21h,al  ;将AL的内容写入21h号端口\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">in</span>  <span class=\"token register variable\">al</span>,<span class=\"token number\">20h </span> <span class=\"token comment\">;从20h号端口读取一个字节到AL</span>\n<span class=\"token function\">out</span> <span class=\"token number\">21h,</span><span class=\"token register variable\">al</span>  <span class=\"token comment\">;将AL的内容写入21h号端口</span>\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"对于<code class=\"x-inline-highlight\">0</code>~<code class=\"x-inline-highlight\">255</code>号端口，端口号可以直接用立即数给出；对于<code class=\"x-inline-highlight\">256</code>~<code class=\"x-inline-highlight\">65535</code>号端口，端口号放在<code class=\"x-inline-highlight\">DX</code>中："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"mov  dx,3f8h\nin   al,dx  ;从3f8h号端口读取一个字节到AL\nout  dx,al  ;将AL的内容写入3f8h号端口\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span>  <span class=\"token register variable\">dx</span>,<span class=\"token number\">3f8h\n</span><span class=\"token function\">in</span>   <span class=\"token register variable\">al</span>,<span class=\"token register variable\">dx</span>  <span class=\"token comment\">;从3f8h号端口读取一个字节到AL</span>\n<span class=\"token function\">out</span>  <span class=\"token register variable\">dx</span>,<span class=\"token register variable\">al</span>  <span class=\"token comment\">;将AL的内容写入3f8h号端口</span>\n"}}]}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在<code class=\"x-inline-highlight\">in</code>指令和<code class=\"x-inline-highlight\">out</code>指令中，只能使用<code class=\"x-inline-highlight\">AL</code>（访问<code class=\"x-inline-highlight\">8</code>位端口）或<code class=\"x-inline-highlight\">AX</code>（访问<code class=\"x-inline-highlight\">16</code>位端口）来存放读取或要写入的数据。"}}]}],["$","h3",null,{"className":"x-h2","children":"扬声器发声示例"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"下面的程序可以让扬声器响一下："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n    start:\n           mov  al,0ffh\n           out  42h,al       ;设置声音频率，第一次写入低8位\n           mov  al,08h\n           out  42h,al       ;设置声音频率，第二次写入高8位\n\n           in   al,61h       ;读取端口原值\n           mov  ah,al        ;保存原值到AH\n\n           or   al,3         ;设置最低两位为1：打开扬声器和定时器\n           out  61h,al       ;接通扬声器和定时器\n\n           mov  cx,0ffffh\n    delay: nop\n           loop delay        ;延迟一段时间\n\n           mov  al,ah\n           out  61h,al       ;恢复端口原值\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"键盘相关操作"}],["$","h3",null,{"className":"x-h2","children":"键盘输入的处理过程"}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"键盘输入"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"键盘上每一个键相当于一个开关，键盘中有一个芯片对每一个键的开关状态进行扫描：按下/松开一个键时，芯片都会产生一个扫描码，扫描码被送入主板上相关接口芯片的寄存器中，该寄存器的端口地址为<code class=\"x-inline-highlight\">60h</code>。扫描码与ASCII码不同，下图是通码："}}],["$","$L10",null,{"src":"fig10.jpg","width":"800px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"按下一个键产生通码，松开一个键产生断码；通码的最高位为<code class=\"x-inline-highlight\">0</code>，断码的最高位为<code class=\"x-inline-highlight\">1</code>；通码和断码的低<code class=\"x-inline-highlight\">7</code>位是相同的。"}}]]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"引发<code class=\"x-inline-highlight\">int 9</code>中断"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"键盘的输入到达<code class=\"x-inline-highlight\">60h</code>端口时，相关的芯片就会向CPU发出中断类型码为<code class=\"x-inline-highlight\">9</code>的可屏蔽中断信息。CPU检测到该中断信息后，如果<code class=\"x-inline-highlight\">IF=1</code>，则响应中断，转去执行<code class=\"x-inline-highlight\">int 9</code>中断处理程序。"}}]]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"执行<code class=\"x-inline-highlight\">int 9</code>中断处理程序"}}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","h4",null,{"className":"x-h3","children":"BIOS键盘缓冲区"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"BIOS键盘缓冲区是系统启动后，BIOS用于存放<code class=\"x-inline-highlight\">int 9</code>中断处理程序所接收的键盘输入的内存区。BIOS键盘缓冲区可以存储最多<code class=\"x-inline-highlight\">15</code>个键盘输入，每个键盘输入用一个字存放，高位字节存放扫描码，低位字节存放ASCII码。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"如果输入了控制键和切换键，内存中有一个特殊的字节：键盘状态字节，地址是<code class=\"x-inline-highlight\">00417h</code>，用于存放控制键和切换键的状态信息。字节内容为："}}],["$","div",null,{"className":"x-table-wrapper","children":["$","table",null,{"className":"x-table","children":["$","tbody",null,{"children":[["$","tr","0",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"位"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">7</code>"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">6</code>"}}]}],["$","td","3",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">5</code>"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">4</code>"}}]}],["$","td","5",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">3</code>"}}]}],["$","td","6",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">2</code>"}}]}],["$","td","7",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">1</code>"}}]}],["$","td","8",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">0</code>"}}]}]]}],["$","tr","1",{"children":[["$","th","0",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"含义"}}]}],["$","td","1",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Insert</code>"}}]}],["$","td","2",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Caps Lock</code>"}}]}],["$","td","3",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Num Lock</code>"}}]}],["$","td","4",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Scroll Lock</code>"}}]}],["$","td","5",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Alt</code>"}}]}],["$","td","6",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">Ctrl</code>"}}]}],["$","td","7",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"左<code class=\"x-inline-highlight\">Shift</code>"}}]}],["$","td","8",{"className":null,"width":null,"children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"右<code class=\"x-inline-highlight\">Shift</code>"}}]}]]}]]}]}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"程序读出<code class=\"x-inline-highlight\">60h</code>端口中的扫描码，如果是字符键的扫描码，将该扫描码和它所对应的ASCII码送入内存中的BIOS键盘缓冲区；如果是控制键和切换键的扫描码，则更新键盘状态字节。"}}]]}]]}],["$","h3",null,{"className":"x-h2","children":"更多中断操作"}],["$","$L10",null,{"src":"fig13.jpg","width":"800px","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"硬件中断、BIOS中断、DOS中断是由底层至上层针对键盘操作提供的不同功能。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"以BIOS<code class=\"x-inline-highlight\">int 16h</code>中断为例，第<code class=\"x-inline-highlight\">0</code>号功能的过程是："}}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"检查键盘缓冲区是否有数据"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"如果没有，重复第<code class=\"x-inline-highlight\">1</code>步"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"读取缓冲区第一个字单元的键盘输入"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"4."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"将读取的扫描码送入<code class=\"x-inline-highlight\">AH</code>，ASCII码送入<code class=\"x-inline-highlight\">AL</code>"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"5."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"将已读取的键盘输入从缓冲区中删除"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">int 16h</code>中断和<code class=\"x-inline-highlight\">int 9</code>中断是一对相互配合的程序，<code class=\"x-inline-highlight\">int 9</code>中断处理程序向键盘缓冲区中写入，<code class=\"x-inline-highlight\">int 16h</code>中断处理程序从缓冲区中读出。它们写入和读出的时机不同，<code class=\"x-inline-highlight\">int 9</code>中断处理程序在有键按下的时候向键盘缓冲区中写入数据；而<code class=\"x-inline-highlight\">int 16h</code>中断处理程序是在应用程序对其进行调用的时候，将数据从键盘缓冲区中读出。"}}],["$","h2",null,{"className":"x-h1","children":"练习"}],["$","h3",null,{"className":"x-h2","children":"编写除法错误的中断处理程序"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编程自定义除法错误中断，除以<code class=\"x-inline-highlight\">0</code>时在屏幕上提示<code class=\"x-inline-highlight\">Cannot divide by zero!</code>然后返回操作系统。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":";以下代码会触发除法错误中断\nmov  ax,1\nmov  bl,0\ndiv  bl\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">;以下代码会触发除法错误中断</span>\n<span class=\"token function\">mov</span>  <span class=\"token register variable\">ax</span>,<span class=\"token number\">1\n</span><span class=\"token function\">mov</span>  <span class=\"token register variable\">bl</span>,<span class=\"token number\">0\n</span><span class=\"token function\">div</span>  <span class=\"token register variable\">bl</span>\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注：除法错误不仅仅是除以<code class=\"x-inline-highlight\">0</code>，还包括除数溢出等情况。"}}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"选取从<code class=\"x-inline-highlight\">00200h</code>开始的地址空间作为存放<code class=\"x-inline-highlight\">div0</code>程序的目的地址。同时，我们希望中断处理程序能够永久驻留内存，因此为了保证正常工作，提示字符串的值也需要随程序一起复制到内存中，我们把这部分数据保存到<code class=\"x-inline-highlight\">00200h</code>之前的<code class=\"x-inline-highlight\">32</code>个字节（从<code class=\"x-inline-highlight\">001e0</code>开始）。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$17"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$18"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编译上面的程序，命名为<code class=\"x-inline-highlight\">div0.EXE</code>；接下来编译一个触发除法错误中断的程序，命名为<code class=\"x-inline-highlight\">bad.EXE</code>："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg\ncodesg segment\n    start: mov ax,1\n           mov bl,0\n           div bl\n\n           mov ax,4c00h\n           int 21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">assume</span> <span class=\"token register variable\">cs</span>:codesg\ncodesg <span class=\"token keyword\">segment</span>\n    start: <span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token number\">1\n</span>           <span class=\"token function\">mov</span> <span class=\"token register variable\">bl</span>,<span class=\"token number\">0\n</span>           <span class=\"token function\">div</span> <span class=\"token register variable\">bl</span>\n\n           <span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token number\">4c00h\n</span>           <span class=\"token function\">int</span> <span class=\"token number\">21h\n</span>codesg <span class=\"token keyword\">ends</span>\n<span class=\"token keyword\">end</span> start\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"依次执行，在<code class=\"x-inline-highlight\">div0.EXE</code>执行完成返回后，执行<code class=\"x-inline-highlight\">bad.EXE</code>能够触发自定义的中断处理程序并在屏幕上输出提示内容。"}}],["$","$L10",null,{"src":"fig2.jpg","width":"100%"}],["$","h3",null,{"className":"x-h2","children":"自定义键盘输入处理"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"下面的程序可以在屏幕的中心以红底黑字依次显示字符<code class=\"x-inline-highlight\">A</code>~<code class=\"x-inline-highlight\">Z</code>，然后结束程序。子程序<code class=\"x-inline-highlight\">delay</code>的作用是控制相邻两个字符显示的时间间隔。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg,ss:stcksg\n\ndatasg segment\n           db 32 dup(0)\ndatasg ends\n\nstcksg segment\n           db 16 dup(0)\nstcksg ends\n\ncodesg segment\n    start:\n    ;一段循环在屏幕中间显示A~Z的程序\n           mov  ax,0b800h\n           mov  es,ax\n           mov  al,'A'\n           mov   byte ptr es:[80*2*12+40*2+1],40h   ;第12行、第40列，红底黑字\n    s:     mov  es:[80*2*12+40*2],al                ;显示字符\n           call delay\n           inc  al\n           cmp  al,'Z'\n           jng  s\n\n           mov  ax,4c00h\n           int  21h\n\n    ;执行双重空循环，延时\n    delay:\n           push cx\n           mov  cx,10h\n    s1:    push cx\n           mov  cx,0ffffh\n    s2:    loop s2\n           pop  cx\n           loop s1\n           pop  cx\n           ret\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$19"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"现在希望加入一个功能，在程序执行的任何时刻，按下<code class=\"x-inline-highlight\">Alt</code>键可以切换字符的显示背景。（在红/绿色之间切换即可，只需要每次对显示属性字节异或<code class=\"x-inline-highlight\">01100000b</code>）"}}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"与上一题不同的是，首先本题不需要安装中断处理程序，只需要程序运行时能够定制化键盘中断的功能；另外由于键盘输入的中断处理程序涉及到所有键的输入，因此不能像上题一样完全重写一个处理程序，而是大致的思路应该为在原有<code class=\"x-inline-highlight\">9</code>号中断处理程序的基础上，“插入”一个条件判断，如果是<code class=\"x-inline-highlight\">Alt</code>键则执行想要的功能。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"综上，本题采用的思路为，先把原来的中断向量保存到内存中，然后修改原来的中断向量指向自定义的中断处理程序<code class=\"x-inline-highlight\">i9</code>；在返回前还要恢复原来的中断向量。而在子程序<code class=\"x-inline-highlight\">i9</code>中，还要想办法调用原来的中断处理程序，正常响应键盘输入。一个大致的框架为："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg,ss:stcksg\n\ndatasg segment\n           db 32 dup(0)\ndatasg ends\n\nstcksg segment\n           db 16 dup(0)\nstcksg ends\n\ncodesg segment\n    start:\n    ;保存原来的中断向量到DS:0处\n           mov   ax,datasg\n           mov   ds,ax\n           mov   ax,0\n           mov   es,ax\n           push  es:[9*4]\n           pop   ds:[0]\n           push  es:[9*4+2]\n           pop   ds:[2]\n    ;更改原来的中断向量\n           mov   word ptr es:[9*4],offset i9               ;设置9号中断的IP为offset i9\n           mov   es:[9*4+2],cs                             ;设置9号中断的CS为代码段起始地址\n\n    ;一段循环在屏幕中间显示A~Z的程序\n           ;...\n\n    ;恢复原来的中断向量\n           mov   ax,0\n           mov   es,ax\n           push  ds:[0]\n           pop   es:[9*4]\n           push  ds:[2]\n           pop   es:[9*4+2]\n\n           mov   ax,4c00h\n           int   21h\n\n    i9:\n           ;...\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 312px, var(--bg-transparent-golden) 312px 600px, transparent 600px, transparent 696px, var(--bg-transparent-golden) 696px 864px, transparent 864px, transparent 960px, var(--bg-transparent-golden) 960px 1008px, transparent 1008px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1a"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"前面提到8086 CPU的中断过程为："}}],["$","div",null,{"className":"x-highlightblock highlight-background-gray","children":[["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"从中断信息中取得中断类型码"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"标志寄存器入栈（中断过程会改变标志，需要先进行保护）"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"设置<code class=\"x-inline-highlight\">IF=0</code>，<code class=\"x-inline-highlight\">TF=0</code>"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"4."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">CS</code>入栈，<code class=\"x-inline-highlight\">IP</code>入栈"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"5."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"从中断向量表读取中断处理程序的入口地址，设置<code class=\"x-inline-highlight\">CS</code>和<code class=\"x-inline-highlight\">IP</code>"}}]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"6."}],["$","div",null,{"className":"x-oli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"开始执行中断处理程序"}}]}]]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"我们现在要在<code class=\"x-inline-highlight\">i9</code>子程序中调用原来的<code class=\"x-inline-highlight\">int 9</code>中断处理程序。请注意，程序之所以跳转到<code class=\"x-inline-highlight\">i9</code>，是因为程序已经修改了中断向量表，然后由键盘输入产生<code class=\"x-inline-highlight\">int 9</code>中断，中断过程的第<code class=\"x-inline-highlight\">1</code>~<code class=\"x-inline-highlight\">5</code>步已经执行完成，在第<code class=\"x-inline-highlight\">5</code>步进入到<code class=\"x-inline-highlight\">i9</code>子程序中；"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"而我们还想在<code class=\"x-inline-highlight\">i9</code>子程序中手动调用被保存在<code class=\"x-inline-highlight\">dword ptr ds:[0]</code>中的原来的<code class=\"x-inline-highlight\">int 9</code>中断处理程序，此时没有人为我们自动执行中断过程了，需要手动模拟！因此这部分过程为："}}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"1."}],["$","div",null,{"className":"x-oli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"模拟标志寄存器入栈"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"pushf"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">pushf</span>"}}]}]]}]]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"2."}],["$","div",null,{"className":"x-oli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"模拟设置<code class=\"x-inline-highlight\">IF=0</code>，<code class=\"x-inline-highlight\">TF=0</code>"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"pushf\npop   bx                ;标志寄存器的值临时赋值给BX\nand   bh,11111100b      ;IF=0，TF=0\npush  bx\npopf                    ;将更新后的值赋值给标志寄存器\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">pushf</span>\n<span class=\"token function\">pop</span>   <span class=\"token register variable\">bx</span>                <span class=\"token comment\">;标志寄存器的值临时赋值给BX</span>\n<span class=\"token function\">and</span>   <span class=\"token register variable\">bh</span>,<span class=\"token number\">11111100b </span>     <span class=\"token comment\">;IF=0，TF=0</span>\n<span class=\"token function\">push</span>  <span class=\"token register variable\">bx</span>\n<span class=\"token function\">popf</span>                    <span class=\"token comment\">;将更新后的值赋值给标志寄存器</span>\n"}}]}]]}]]}]]}],["$","div",null,{"className":"x-oli","children":[["$","div",null,{"className":"x-oli-number","children":"3."}],["$","div",null,{"className":"x-oli-content-wrapper","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">CS</code>入栈、<code class=\"x-inline-highlight\">IP</code>入栈、跳转到入口地址由<code class=\"x-inline-highlight\">call</code>指令完成："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"call  dword ptr ds:[0]"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">call</span>  <span class=\"token keyword\">dword</span> <span class=\"token keyword\">ptr</span> <span class=\"token register variable\">ds</span>:<span class=\"token operator\">[</span><span class=\"token number\">0]</span>"}}]}]]}]]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在原中断处理程序调用完成后，就是自定义的部分："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":";自定义的键盘输入处理\nin    al,60h                                    ;读取键盘输入送入AL\ncmp   al,38h                                    ;判断是否为Alt键\njne   return                                    ;不是则返回\nmov   ax,0b800h\nmov   es,ax\nxor   byte ptr es:[80*2*12+40*2+1],01100000b    ;在红色和绿色背景之间切换\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1b"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"注意因为这是中断调用，要使用<code class=\"x-inline-highlight\">iret</code>指令返回。<code class=\"x-inline-highlight\">i9</code>子程序的完整代码为："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"i9:\n       push  ax\n       push  bx\n       push  es\n;------------------------------------------------------\n;模拟标志寄存器入栈\n       pushf\n;模拟设置IF=0，TF=0\n       pushf\n       pop   bx\n       and   bh,11111100b\n       push  bx\n       popf\n;call指令即可实现CS、IP入栈并跳转到入口地址\n       call  dword ptr ds:[0]\n;------------------------------------------------------\n;自定义的键盘输入处理\n       in    al,60h                                    ;读取键盘输入送入AL\n       cmp   al,38h                                    ;判断是否为Alt键\n       jne   return                                    ;不是则返回\n       mov   ax,0b800h\n       mov   es,ax\n       xor   byte ptr es:[80*2*12+40*2+1],01100000b    ;在红色和绿色背景之间切换\nreturn:\n       pop   es\n       pop   bx\n       pop   ax\n       iret\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1c"}}]}]]}],["$","div",null,{"className":"x-divider"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"题目的完整代码为："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"$1d"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1e"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"执行效果（按下<code class=\"x-inline-highlight\">Alt</code>键切换背景颜色）："}}],["$","$L10",null,{"src":"fig14.gif","width":"200px"}]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"【汇编语言】中断及外部设备操作 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24c/assembly-6/"}]]
1:null
