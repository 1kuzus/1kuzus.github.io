2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-d4a52f9ce8b82efb.js"],""]
3:I[86510,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","931","static/chunks/app/page-53cc083014f9456b.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-d4a52f9ce8b82efb.js"],""]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-d8cba6107e479473.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-d8cba6107e479473.js"],""]
8:["slug","24c/assembly-3","c"]
0:["T4ziINvC4qyuYfecqz90F",[[["",{"children":[["slug","24c/assembly-3","c"],{"children":["__PAGE__?{\"slug\":[\"24c\",\"assembly-3\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","24c/assembly-3","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],["$","div",null,{"id":"post-layout","children":[false,["$","div",null,{"id":"main","className":"center-wrapper","children":[["$","h1",null,{"className":"post-title","children":"【汇编语言】内存寻址方式"}],["$","$L3",null,{"path":"/24c/assembly-3/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}]]}],["$","$L6",null,{}]]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9ae4a866c3254b07.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":null}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cd6b648520195f61.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-d4a52f9ce8b82efb.js"],""]
f:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-19232c47cd1e883a.js","877","static/chunks/app/%5B...slug%5D/page-d4a52f9ce8b82efb.js"],""]
e:T5c3,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token string">'1234'</span>
           <span class="token keyword">db</span> <span class="token string">'ABCD'</span>
datasg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span> <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span> <span class="token register variable">ds</span>,<span class="token register variable">ax</span>
           <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">0
</span>           <span class="token function">mov</span> <span class="token register variable">al</span>,<span class="token string">'a'</span>
           <span class="token function">mov</span> <span class="token register variable">bl</span>,<span class="token string">'b'</span>

           <span class="token function">mov</span> <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span> <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
10:Tc24,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token string">'BaSiC'</span>
           <span class="token keyword">db</span> <span class="token string">'AsSeMbLeR'</span>
datasg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>

           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">5
</span>    s1:    <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>
           <span class="token function">and</span>  <span class="token register variable">al</span>,<span class="token number">11011111b
</span>           <span class="token function">mov</span>  <span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>,<span class="token register variable">al</span>
           <span class="token function">inc</span>  <span class="token register variable">bx</span>
           <span class="token function">loop</span> s1

           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">5
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">9
</span>    s2:    <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>
           <span class="token function">or</span>   <span class="token register variable">al</span>,<span class="token number">00100000b
</span>           <span class="token function">mov</span>  <span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">]</span>,<span class="token register variable">al</span>
           <span class="token function">inc</span>  <span class="token register variable">bx</span>
           <span class="token function">loop</span> s2

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
11:Tfa3,<span class="token keyword">assume</span> <span class="token register variable">cs</span>:codesg,<span class="token register variable">ds</span>:datasg,<span class="token register variable">ss</span>:stcksg

datasg <span class="token keyword">segment</span>
           <span class="token keyword">db</span> <span class="token string">'Hello           '</span>
           <span class="token keyword">db</span> <span class="token string">'kitty           '</span>
           <span class="token keyword">db</span> <span class="token string">'aBcDe           '</span>
           <span class="token keyword">db</span> <span class="token string">'uCase           '</span>
datasg <span class="token keyword">ends</span>

stcksg <span class="token keyword">segment</span>
           <span class="token keyword">dw</span> <span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0,</span><span class="token number">0
</span>stcksg <span class="token keyword">ends</span>

codesg <span class="token keyword">segment</span>
    start:
           <span class="token function">mov</span>  <span class="token register variable">ax</span>,datasg
           <span class="token function">mov</span>  <span class="token register variable">ds</span>,<span class="token register variable">ax</span>

           <span class="token function">mov</span>  <span class="token register variable">bx</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">4 </span>           <span class="token comment">;遍历4个字符串</span>
    str:   <span class="token function">push</span> <span class="token register variable">cx</span>              <span class="token comment">;保存外层循环的CX</span>

           <span class="token function">mov</span>  <span class="token register variable">di</span>,<span class="token number">0
</span>           <span class="token function">mov</span>  <span class="token register variable">cx</span>,<span class="token number">5 </span>           <span class="token comment">;遍历5个字符</span>
    chr:   <span class="token function">mov</span>  <span class="token register variable">al</span>,<span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">+</span><span class="token register variable">di</span><span class="token operator">]</span>
           <span class="token function">and</span>  <span class="token register variable">al</span>,<span class="token number">11011111b
</span>           <span class="token function">mov</span>  <span class="token operator">[</span><span class="token register variable">bx</span><span class="token operator">+</span><span class="token register variable">di</span><span class="token operator">]</span>,<span class="token register variable">al</span>
           <span class="token function">inc</span>  <span class="token register variable">di</span>
           <span class="token function">loop</span> chr

           <span class="token function">add</span>  <span class="token register variable">bx</span>,<span class="token number">10h </span>         <span class="token comment">;下一个字符串的首字符的地址</span>
           <span class="token function">pop</span>  <span class="token register variable">cx</span>              <span class="token comment">;恢复外层循环的CX</span>
           <span class="token function">loop</span> str

           <span class="token function">mov</span>  <span class="token register variable">ax</span>,<span class="token number">4c00h
</span>           <span class="token function">int</span>  <span class="token number">21h
</span>codesg <span class="token keyword">ends</span>
<span class="token keyword">end</span> start
5:[["$","h2",null,{"className":"x-h1","children":"处理字符"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg\n\ndatasg segment\n           db '1234'\n           db 'ABCD'\ndatasg ends\n\ncodesg segment\n    start:\n           mov ax,datasg\n           mov ds,ax\n           mov ax,0\n           mov al,'a'\n           mov bl,'b'\n\n           mov ax,4c00h\n           int 21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"常用<code class=\"x-inline-highlight\">db</code>指令定义字符串。字符类型的数据会被编译器自动转为ASCII码。"}}],["$","$Lf",null,{"src":"fig1.jpg","width":"100%"}],["$","div",null,{"className":"x-highlightblock highlight-background-golden","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"ASCII码在设计上满足一些规律："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"在<code class=\"x-inline-highlight\">16</code>进制下，<code class=\"x-inline-highlight\">3xh</code>就代表了字符<code class=\"x-inline-highlight\">10</code>进制数<code class=\"x-inline-highlight\">'x'</code>，例如<code class=\"x-inline-highlight\">'1'</code>的ASCII码为<code class=\"x-inline-highlight\">49</code>也就是<code class=\"x-inline-highlight\">31h</code>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"在<code class=\"x-inline-highlight\">16</code>进制下，大写字母和小写字母的ASCII码相差<code class=\"x-inline-highlight\">20h</code>，例如<code class=\"x-inline-highlight\">'A'</code>的ASCII码为<code class=\"x-inline-highlight\">41h</code>，<code class=\"x-inline-highlight\">'a'</code>的ASCII码为<code class=\"x-inline-highlight\">61h</code>"}}]}]]}]]}],["$","h2",null,{"className":"x-h1","children":"and指令、or指令"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"位运算指令，用法与<code class=\"x-inline-highlight\">add</code>类似。这两个指令可以在不需要分支结构的情况下，实现大小写字符转换："}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"转大写："}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"and al,11011111b\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">and</span> <span class=\"token register variable\">al</span>,<span class=\"token number\">11011111b\n</span>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"转小写："}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"or al,00100000b\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">or</span> <span class=\"token register variable\">al</span>,<span class=\"token number\">00100000b\n</span>"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"寻址方式"}],["$","h3",null,{"className":"x-h2","children":"[bx+idata]方式"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov ax,[bx+200]  ;(ax)=((ds)*16+(bx)+200)"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">+</span><span class=\"token number\">200]</span>  <span class=\"token comment\">;(ax)=((ds)*16+(bx)+200)</span>"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"和以下三种写法都是等价的："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov ax,[200+bx]\nmov ax,200[bx]\nmov ax,[bx].200\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token operator\">[</span><span class=\"token number\">200+</span><span class=\"token register variable\">bx</span><span class=\"token operator\">]</span>\n<span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token number\">200[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">]</span>\n<span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">]</span>.<span class=\"token number\">200\n</span>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"SI和DI寄存器"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">SI</code>和<code class=\"x-inline-highlight\">DI</code>寄存器被称为变址寄存器，常执行与地址有关的操作，是与<code class=\"x-inline-highlight\">BX</code>功能相近的寄存器。"}}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">BX</code>：通用寄存器，常作为基址寄存器使用"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">SI</code>：源变址寄存器<code class=\"x-inline-highlight\">(Source Index)</code>"}}]}]]}],["$","div",null,{"className":"x-uli","children":[["$","div",null,{"className":"x-uli-marker","children":["$","div",null,{"className":"x-uli-marker-dot"}]}],["$","div",null,{"className":"x-uli-content-wrapper","children":["$","p",null,{"dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">DI</code>：目的变址寄存器<code class=\"x-inline-highlight\">(Destination Index)</code>"}}]}]]}],["$","div",null,{"className":"x-highlightblock highlight-background-red","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">SI</code>和<code class=\"x-inline-highlight\">DI</code>不能够像<code class=\"x-inline-highlight\">BX</code>一样分成<code class=\"x-inline-highlight\">BH</code>和<code class=\"x-inline-highlight\">BL</code>两个<code class=\"x-inline-highlight\">8</code>位寄存器使用。"}}]}],["$","h3",null,{"className":"x-h2","children":"[bx+si]和[bx+di]方式"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov ax,[bx+si]  ;(ax)=((ds)*16+(bx)+(si))"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">+</span><span class=\"token register variable\">si</span><span class=\"token operator\">]</span>  <span class=\"token comment\">;(ax)=((ds)*16+(bx)+(si))</span>"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"和以下写法等价："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov ax,[bx][si]"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">]</span><span class=\"token operator\">[</span><span class=\"token register variable\">si</span><span class=\"token operator\">]</span>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"[bx+si+idata]和[bx+di+idata]方式"}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov ax,[bx+si+200]  ;(ax)=((ds)*16+(bx)+(si)+200)"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span> <span class=\"token register variable\">ax</span>,<span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">+</span><span class=\"token register variable\">si</span><span class=\"token operator\">+</span><span class=\"token number\">200]</span>  <span class=\"token comment\">;(ax)=((ds)*16+(bx)+(si)+200)</span>"}}]}]]}],["$","h3",null,{"className":"x-h2","children":"BP寄存器"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">BP</code>和<code class=\"x-inline-highlight\">BX</code>类似，也是基址寄存器。它们的区别在于<code class=\"x-inline-highlight\">BX</code>的默认段寄存器是<code class=\"x-inline-highlight\">DS</code>，而<code class=\"x-inline-highlight\">BP</code>的默认段寄存器是<code class=\"x-inline-highlight\">SS</code>。<code class=\"x-inline-highlight\">BP</code>多用于栈操作。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"到现在为止，已经学习了<code class=\"x-inline-highlight\">BX</code>、<code class=\"x-inline-highlight\">SI</code>、<code class=\"x-inline-highlight\">DI</code>、<code class=\"x-inline-highlight\">BP</code>四个寄存器，它们都是与地址操作有关的寄存器。只有这四个寄存器可以以<code class=\"x-inline-highlight\">[...]</code>的格式对内存进行寻址。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"按照基址寄存器和变址寄存器分类，则<code class=\"x-inline-highlight\">BX</code>和<code class=\"x-inline-highlight\">BP</code>是基址寄存器，<code class=\"x-inline-highlight\">SI</code>和<code class=\"x-inline-highlight\">DI</code>是变址寄存器。在使用时，基址寄存器和变址寄存器可以任意组合，例如<code class=\"x-inline-highlight\">[bx+si]</code>、<code class=\"x-inline-highlight\">[bx+di]</code>、<code class=\"x-inline-highlight\">[bp+si]</code>、<code class=\"x-inline-highlight\">[bp+di]</code>，但内部不能互相组合，例如<code class=\"x-inline-highlight\">[bx+bp]</code>、<code class=\"x-inline-highlight\">[si+di]</code>是<span class=\"x-inline-strong\">错误的</span>写法。"}}],["$","h3",null,{"className":"x-h2","children":"总结"}],["$","$Lf",null,{"src":"fig2.png","width":"800px","filterDarkTheme":true}],["$","h2",null,{"className":"x-h1","children":"指明要访问数据的大小"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"观察下面的代码："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov bx,0\nmov [bx],100h\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span> <span class=\"token register variable\">bx</span>,<span class=\"token number\">0\n</span><span class=\"token function\">mov</span> <span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">]</span>,<span class=\"token number\">100h\n</span>"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编译会报错！这是因为按照上面代码的参数，没有办法确定操作的数据是字型还是字节型（如果第二个操作数是寄存器，则可以根据是<code class=\"x-inline-highlight\">AX</code>还是<code class=\"x-inline-highlight\">AH</code>/<code class=\"x-inline-highlight\">AL</code>判断）。因此，此时需要显式的指出操作的数据类型，语法为："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"mov word ptr [bx],100h\nadd byte ptr [bx],23h\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">mov</span> <span class=\"token keyword\">word</span> <span class=\"token keyword\">ptr</span> <span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">]</span>,<span class=\"token number\">100h\n</span><span class=\"token function\">add</span> <span class=\"token keyword\">byte</span> <span class=\"token keyword\">ptr</span> <span class=\"token operator\">[</span><span class=\"token register variable\">bx</span><span class=\"token operator\">]</span>,<span class=\"token number\">23h\n</span>"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"使用dup关键字设置重复数据"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"在之前开辟数据空间或栈空间时，都是计算好大小后手动输入对应数量的<code class=\"x-inline-highlight\">0</code>（或其他初值）；<code class=\"x-inline-highlight\">dup</code>关键字可以简洁的完成设置重复数据的操作，格式为：<code class=\"x-inline-highlight\">db/dw/dd 重复次数 dup(数据)</code>，例如："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"dd 4 dup('a')\ndw 4 dup('b')\ndb 8 dup('c')\ndb 4 dup(1,2,3,4)\ndb 4 dup('asm',32,'8086')\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">dd</span> <span class=\"token number\">4 </span><span class=\"token keyword\">dup</span>(<span class=\"token string\">'a'</span>)\n<span class=\"token keyword\">dw</span> <span class=\"token number\">4 </span><span class=\"token keyword\">dup</span>(<span class=\"token string\">'b'</span>)\n<span class=\"token keyword\">db</span> <span class=\"token number\">8 </span><span class=\"token keyword\">dup</span>(<span class=\"token string\">'c'</span>)\n<span class=\"token keyword\">db</span> <span class=\"token number\">4 </span><span class=\"token keyword\">dup</span>(<span class=\"token number\">1,</span><span class=\"token number\">2,</span><span class=\"token number\">3,</span><span class=\"token number\">4)</span>\n<span class=\"token keyword\">db</span> <span class=\"token number\">4 </span><span class=\"token keyword\">dup</span>(<span class=\"token string\">'asm'</span>,<span class=\"token number\">32,</span><span class=\"token string\">'8086'</span>)\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"初始化后的数据为："}}],["$","$Lf",null,{"src":"fig5.jpg","width":"100%"}],["$","h2",null,{"className":"x-h1","children":"练习"}],["$","h3",null,{"className":"x-h2","children":"大小写转换"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编程操作数据段中的字符串，将第一个字符串小写字母转换为大写字母，第二个字符串大写字母转换为小写字母。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg\n\ndatasg segment\n           db 'BaSiC'\n           db 'AsSeMbLeR'\ndatasg ends\n\ncodesg segment\n    start:\n    ;...\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">assume</span> <span class=\"token register variable\">cs</span>:codesg,<span class=\"token register variable\">ds</span>:datasg\n\ndatasg <span class=\"token keyword\">segment</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'BaSiC'</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'AsSeMbLeR'</span>\ndatasg <span class=\"token keyword\">ends</span>\n\ncodesg <span class=\"token keyword\">segment</span>\n    start:\n    <span class=\"token comment\">;...</span>\ncodesg <span class=\"token keyword\">ends</span>\n<span class=\"token keyword\">end</span> start\n"}}]}]]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg\n\ndatasg segment\n           db 'BaSiC'\n           db 'AsSeMbLeR'\ndatasg ends\n\ncodesg segment\n    start:\n           mov  ax,datasg\n           mov  ds,ax\n\n           mov  bx,0\n           mov  cx,5\n    s1:    mov  al,[bx]\n           and  al,11011111b\n           mov  [bx],al\n           inc  bx\n           loop s1\n\n           mov  bx,5\n           mov  cx,9\n    s2:    mov  al,[bx]\n           or   al,00100000b\n           mov  [bx],al\n           inc  bx\n           loop s2\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","$Lf",null,{"src":"fig3.jpg","width":"100%"}],["$","h3",null,{"className":"x-h2","children":"二重循环将字符串全部转大写"}],["$","div",null,{"className":"x-highlightblock highlight-background-blue","children":[["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"编程操作数据段中的字符串，把所有字母都改为大写。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg\n\ndatasg segment\n           db 'Hello           '\n           db 'kitty           '\n           db 'aBcDe           '\n           db 'uCase           '\ndatasg ends\n\ncodesg segment\n    start:\n    ;...\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">assume</span> <span class=\"token register variable\">cs</span>:codesg,<span class=\"token register variable\">ds</span>:datasg\n\ndatasg <span class=\"token keyword\">segment</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'Hello           '</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'kitty           '</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'aBcDe           '</span>\n           <span class=\"token keyword\">db</span> <span class=\"token string\">'uCase           '</span>\ndatasg <span class=\"token keyword\">ends</span>\n\ncodesg <span class=\"token keyword\">segment</span>\n    start:\n    <span class=\"token comment\">;...</span>\ncodesg <span class=\"token keyword\">ends</span>\n<span class=\"token keyword\">end</span> start\n"}}]}]]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"ASM8086"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"assume cs:codesg,ds:datasg,ss:stcksg\n\ndatasg segment\n           db 'Hello           '\n           db 'kitty           '\n           db 'aBcDe           '\n           db 'uCase           '\ndatasg ends\n\nstcksg segment\n           dw 0,0,0,0,0,0,0,0\nstcksg ends\n\ncodesg segment\n    start:\n           mov  ax,datasg\n           mov  ds,ax\n\n           mov  bx,0\n           mov  cx,4            ;遍历4个字符串\n    str:   push cx              ;保存外层循环的CX\n\n           mov  di,0\n           mov  cx,5            ;遍历5个字符\n    chr:   mov  al,[bx+di]\n           and  al,11011111b\n           mov  [bx+di],al\n           inc  di\n           loop chr\n\n           add  bx,10h          ;下一个字符串的首字符的地址\n           pop  cx              ;恢复外层循环的CX\n           loop str\n\n           mov  ax,4c00h\n           int  21h\ncodesg ends\nend start\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"由于字符串长度相同，考虑使用二重循环批量操作。然而由于只有一个寄存器<code class=\"x-inline-highlight\">CX</code>控制着循环计数器，所以进入内层循环时需要先保存外层循环的<code class=\"x-inline-highlight\">CX</code>，内层循环结束后再恢复外层循环的<code class=\"x-inline-highlight\">CX</code>。保存的方式可以是借助其他寄存器例如<code class=\"x-inline-highlight\">DX</code>，但由于寄存器资源比较宝贵，常见的做法是利用栈保存数据。"}}],["$","$Lf",null,{"src":"fig4.jpg","width":"100%"}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"【汇编语言】内存寻址方式 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/24c/assembly-3/"}]]
1:null
