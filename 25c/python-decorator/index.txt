2:I[55329,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],""]
3:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],"PostMeta"]
4:"$Sreact.suspense"
6:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],"LikeButton"]
7:I[5613,[],""]
9:I[31778,[],""]
a:I[89806,["250","static/chunks/250-0ef8476c0fa8ee24.js","372","static/chunks/372-d4ef474e704f1afd.js","993","static/chunks/app/(posts)/layout-e15e5287e741ad91.js"],""]
b:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8f33aca7be8ff34b.js"],"GlobalProvider"]
c:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-8f33aca7be8ff34b.js"],""]
8:["slug","25c/python-decorator","c"]
0:["0wU0bGg-i0jYBeP716xqR",[[["",{"children":["(posts)",{"children":[["slug","25c/python-decorator","c"],{"children":["__PAGE__?{\"slug\":[\"25c\",\"python-decorator\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["(posts)",{"children":[["slug","25c/python-decorator","c"],{"children":["__PAGE__",{},["$L1",[["$","$L2",null,{}],false,["$","h1",null,{"className":"x-post-title","children":"Python装饰器"}],["$","$L3",null,{"path":"/25c/python-decorator/"}],["$","$4",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L5"}],["$","$L6",null,{"path":"/25c/python-decorator/"}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/82b97b807ab55020.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","div",null,{"id":"post-layout","children":[["$","div",null,{"id":"main","className":"center-wrapper","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$La",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3bc7e8f21884ab46.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/268aef745a7b3740.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
e:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","612","static/chunks/612-fa632c1349770315.js","120","static/chunks/120-aab2c7424ca78adb.js","842","static/chunks/842-dce450cd96773e9f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-e9e759b7bbaf69d2.js"],""]
f:T6a5,<span class="token keyword">def</span> <span class="token function">add_goodbye</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper_fn</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper_fn

<span class="token decorator annotation punctuation">@add_goodbye</span>
<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span>

greet<span class="token punctuation">(</span><span class="token string">"Carl"</span><span class="token punctuation">)</span>
<span class="token comment"># Hello, Carl!</span>
<span class="token comment"># Goodbye!</span>
10:Ta0a,<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">log_duration</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper_fn</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Function returned after </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">}</span></span><span class="token string"> seconds."</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper_fn

<span class="token decorator annotation punctuation">@log_duration</span>
<span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

loop<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token comment"># Function returned after 0.8091847896575928 seconds.</span>
11:T8d6,<span class="token keyword">def</span> <span class="token function">add_custom_goodbye</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 外层装饰器</span>
    <span class="token keyword">def</span> <span class="token function">add_goodbye</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 内层装饰器</span>
        <span class="token keyword">def</span> <span class="token function">wrapper_fn</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
            fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapper_fn
    <span class="token keyword">return</span> add_goodbye

<span class="token decorator annotation punctuation">@add_custom_goodbye</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"See you later!"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span>

greet<span class="token punctuation">(</span><span class="token string">"Donald"</span><span class="token punctuation">)</span>
<span class="token comment"># Hello, Donald!</span>
<span class="token comment"># See you later!</span>
12:Tfba,<span class="token keyword">import</span> random

<span class="token keyword">def</span> <span class="token function">retry</span><span class="token punctuation">(</span>max_retries<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner_decorator</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
            count <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">while</span> count <span class="token operator">&lt;</span> max_retries<span class="token punctuation">:</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
                <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
                    count <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Function failed, retrying </span><span class="token interpolation"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>max_retries<span class="token punctuation">}</span></span><span class="token string">..."</span></span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Function failed after </span><span class="token interpolation"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token string"> retries"</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> inner_decorator

<span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fake_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.7</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"success"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>fake_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Function failed, retrying 1/3...</span>
<span class="token comment"># Function failed, retrying 2/3...</span>
<span class="token comment"># {'success': True}</span>
13:T78a,<span class="token keyword">def</span> <span class="token function">add_goodbye</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper_fn</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper_fn

<span class="token decorator annotation punctuation">@add_goodbye</span>
<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">)</span>  <span class="token comment"># &lt;function add_goodbye.&lt;locals>.wrapper_fn at 0x100292430></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>  <span class="token comment"># wrapper_fn</span>
14:T867,<span class="token keyword">import</span> functools

<span class="token keyword">def</span> <span class="token function">add_goodbye</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapper_fn</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper_fn

<span class="token decorator annotation punctuation">@add_goodbye</span>
<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">)</span>  <span class="token comment"># &lt;function greet at 0x102c0e430></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>  <span class="token comment"># greet</span>
5:[["$","h2",null,{"className":"x-h1","children":"引入"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这是一个<code class=\"x-inline-highlight\">greet</code>函数："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"def greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")  # Hello, Alice!\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span>\n\ngreet<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Hello, Alice!</span>\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"下面定义了一个高阶函数<code class=\"x-inline-highlight\">add_goodbye</code>，它接收一个函数<code class=\"x-inline-highlight\">fn</code>作为参数，并返回另一个新函数<code class=\"x-inline-highlight\">wrapper_fn</code>。新函数的功能是先执行原函数<code class=\"x-inline-highlight\">fn</code>，再打印<code class=\"x-inline-highlight\">Goodbye!</code>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"def add_goodbye(fn):\n    def wrapper_fn(*args):\n        fn(*args)\n        print(\"Goodbye!\")\n    return wrapper_fn\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">def</span> <span class=\"token function\">add_goodbye</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper_fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fn<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Goodbye!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> wrapper_fn\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">add_goodbye(greet)</code>返回的新函数在被调用时，会先执行<code class=\"x-inline-highlight\">greet</code>函数，然后打印<code class=\"x-inline-highlight\">Goodbye!</code>。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"greet = add_goodbye(greet)\ngreet(\"Bob\")\n# Hello, Bob!\n# Goodbye!\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"greet <span class=\"token operator\">=</span> add_goodbye<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">)</span>\ngreet<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Hello, Bob!</span>\n<span class=\"token comment\"># Goodbye!</span>\n"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"装饰器"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"上述例子可以用装饰器的语法写为："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"def add_goodbye(fn):\n    def wrapper_fn(*args):\n        fn(*args)\n        print(\"Goodbye!\")\n    return wrapper_fn\n\n@add_goodbye\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Carl\")\n# Hello, Carl!\n# Goodbye!\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 168px, var(--bg-transparent-golden) 168px 192px, transparent 192px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"装饰器是一种设计模式，能够在不修改原函数代码的情况下，向函数添加额外的功能。<code class=\"x-inline-highlight\">@</code>就是Python中的装饰器语法糖，在<code class=\"x-inline-highlight\">def fn():</code>前加上<code class=\"x-inline-highlight\">@decorator</code>，就相当于执行了<code class=\"x-inline-highlight\">fn = decorator(fn)</code>。"}}],["$","h3",null,{"className":"x-h2","children":"例：输出函数运行时间"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"实现一个装饰器<code class=\"x-inline-highlight\">log_duration</code>，在执行函数后打印函数运行时间。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"import time\n\ndef log_duration(fn):\n    def wrapper_fn(*args, **kwargs):\n        start = time.time()\n        fn(*args, **kwargs)\n        end = time.time()\n        print(f\"Function returned after {end - start} seconds.\")\n    return wrapper_fn\n\n@log_duration\ndef loop(n):\n    for i in range(n):\n        pass\n\nloop(n=10 ** 8)\n# Function returned after 0.8091847896575928 seconds.\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"带参装饰器"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"有时我们希望装饰器能够接收参数，例如，在<code class=\"x-inline-highlight\">add_goodbye</code>的例子中，我们希望能够自定义打印的告别语。此时我们需要再嵌套一层装饰器，外层装饰器接收自定义参数，创建不同的内层装饰器；内层装饰器则接收原函数并返回新的函数。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"def add_custom_goodbye(message):  # 外层装饰器\n    def add_goodbye(fn):  # 内层装饰器\n        def wrapper_fn(*args):\n            fn(*args)\n            print(message)\n        return wrapper_fn\n    return add_goodbye\n\n@add_custom_goodbye(message=\"See you later!\")\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Donald\")\n# Hello, Donald!\n# See you later!\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 48px, var(--bg-transparent-golden) 48px 168px, transparent 168px, transparent 216px, var(--bg-transparent-golden) 216px 240px, transparent 240px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这里就相当于执行了<code class=\"x-inline-highlight\">greet = add_custom_goodbye(\"See you later!\")(greet)</code>。"}}],["$","h3",null,{"className":"x-h2","children":"例：retry装饰器"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"实现一个<code class=\"x-inline-highlight\">retry</code>装饰器，接收一个整数参数<code class=\"x-inline-highlight\">max_retries</code>，表示最大重试次数。其功能为：如果装饰的函数抛出异常，则重新执行函数，直到达到最大重试次数。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"这个功能在处理网络请求时非常有用，本例用一个<code class=\"x-inline-highlight\">70%</code>概率抛出异常的函数代替网络请求。"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"import random\n\ndef retry(max_retries):\n    def inner_decorator(fn):\n        def wrapper(*args):\n            count = 0\n            while count < max_retries:\n                try:\n                    return fn(*args)\n                except Exception:\n                    count += 1\n                    print(f\"Function failed, retrying {count}/{max_retries}...\")\n            print(f\"Function failed after {count} retries\")\n        return wrapper\n    return inner_decorator\n\n@retry(max_retries=3)\ndef fake_request():\n    if random.random() < 0.7:\n        raise Exception\n    return {\"success\": True}\n\nprint(fake_request())\n# Function failed, retrying 1/3...\n# Function failed, retrying 2/3...\n# {'success': True}\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"关于functools.wraps"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"你可能在很多装饰器教程中见到使用<code class=\"x-inline-highlight\">functools.wraps</code>的代码，这是为了保留函数的元信息。"}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"回到最初的例子："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"def greet(name):\n    print(f\"Hello, {name}!\")\n\nprint(greet)  # <function greet at 0x1025e9280>\nprint(greet.__name__)  # greet\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;function greet at 0x1025e9280></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># greet</span>\n"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"当我们使用装饰器时，原函数的元信息会被覆盖："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"def add_goodbye(fn):\n    def wrapper_fn(*args):\n        fn(*args)\n        print(\"Goodbye!\")\n    return wrapper_fn\n\n@add_goodbye\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\nprint(greet)  # <function add_goodbye.<locals>.wrapper_fn at 0x100292430>\nprint(greet.__name__)  # wrapper_fn\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 264px, var(--bg-transparent-golden) 264px 312px, transparent 312px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"此时可以使用<code class=\"x-inline-highlight\">functools.wraps</code>来保留原函数的元信息，具体写法为："}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Le",null,{"className":"x-codeblock-header-copy","text":"import functools\n\ndef add_goodbye(fn):\n    @functools.wraps(fn)\n    def wrapper_fn(*args):\n        fn(*args)\n        print(\"Goodbye!\")\n    return wrapper_fn\n\n@add_goodbye\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\nprint(greet)  # <function greet at 0x102c0e430>\nprint(greet.__name__)  # greet\n"}]]}],["$","pre",null,{"style":{"background":"linear-gradient(180deg, transparent 96px, var(--bg-transparent-golden) 96px 120px, transparent 120px, transparent 336px, var(--bg-transparent-golden) 336px 384px, transparent 384px)"},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]}]]}]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Python装饰器 - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/25c/python-decorator/"}]]
1:null
