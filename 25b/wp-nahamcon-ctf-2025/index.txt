2:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-61def387671cd330.js","742","static/chunks/742-b5fcd35c730adf6f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-08f3716ffed0e1ed.js"],"PostMeta"]
3:"$Sreact.suspense"
5:I[76842,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-61def387671cd330.js","742","static/chunks/742-b5fcd35c730adf6f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-08f3716ffed0e1ed.js"],"LikeButton"]
6:I[5613,[],""]
8:I[31778,[],""]
9:I[30389,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-61def387671cd330.js","742","static/chunks/742-b5fcd35c730adf6f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-08f3716ffed0e1ed.js"],""]
a:I[25694,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-adcd83bc3c8eff9d.js"],"GlobalProvider"]
b:I[30397,["250","static/chunks/250-0ef8476c0fa8ee24.js","185","static/chunks/app/layout-adcd83bc3c8eff9d.js"],""]
7:["slug","25b/wp-nahamcon-ctf-2025","c"]
0:["9sSMTCS9p-byzmlay285O",[[["",{"children":["(posts)",{"children":[["slug","25b/wp-nahamcon-ctf-2025","c"],{"children":["__PAGE__?{\"slug\":[\"25b\",\"wp-nahamcon-ctf-2025\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["(posts)",{"children":[["slug","25b/wp-nahamcon-ctf-2025","c"],{"children":["__PAGE__",{},["$L1",[false,["$","h1",null,{"className":"post-title","children":"NahamCon CTF 2025 Writeup"}],["$","$L2",null,{"path":"/25b/wp-nahamcon-ctf-2025/"}],["$","$3",null,{"fallback":["$","p",null,{"children":"Loading component..."}],"children":"$L4"}],["$","$L5",null,{"path":"/25b/wp-nahamcon-ctf-2025/"}]],null]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/6504997437c32a9d.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","div",null,{"id":"post-layout","children":[["$","div",null,{"id":"main","className":"center-wrapper","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","$L9",null,{}]]}],null]]},[null,["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon"}],["$","script",null,{"async":true,"src":"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-45BYSZ6WPY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'G-45BYSZ6WPY');\n"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"const a=z=>h.getItem(z),b=(y,z)=>h.setItem(y,z),c=(y,z)=>document.documentElement.setAttribute(y,z),d='theme',e='dark',f='light',g='class',h=localStorage;a(d)!==e&&a(d)!==f&&b(d,f);a(d)===e?c(g,e):c(g,f);"}}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\nif (!Array.prototype.findLast) {\n    Array.prototype.findLast = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return this[i];\n        }\n        return undefined;\n    };\n}\nif (!Array.prototype.findLastIndex) {\n    Array.prototype.findLastIndex = function (callback) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (callback(this[i])) return i;\n        }\n        return -1;\n    };\n}\n"}}]]}],["$","body",null,{"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"id":"notfound","children":[["$","img",null,{"alt":"img","src":"/images/cry.gif"}],["$","code",null,{"id":"notfound-404","children":"404"}],["$","code",null,{"id":"notfound-text","children":"Page Not Found"}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e601cf5ba3633d.css","precedence":"next","crossOrigin":""}]],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/251a603d14fca651.css","precedence":"next","crossOrigin":""}]]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cd6b648520195f61.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[62029,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-61def387671cd330.js","742","static/chunks/742-b5fcd35c730adf6f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-08f3716ffed0e1ed.js"],""]
10:I[74365,["481","static/chunks/457b8330-b5c9cf3fcf214847.js","954","static/chunks/d3ac728e-0c798b3b8aa3bf53.js","250","static/chunks/250-0ef8476c0fa8ee24.js","612","static/chunks/612-fa632c1349770315.js","551","static/chunks/551-61def387671cd330.js","742","static/chunks/742-b5fcd35c730adf6f.js","318","static/chunks/app/(posts)/%5B...slug%5D/page-08f3716ffed0e1ed.js"],""]
e:T54d,<?php

class APICaller {
    private $url =  'http://localhost/api/';
    private $path_tmp = '/tmp/';
    private $id;

    public function __construct($id, $path_tmp = '/tmp/') {
        $this->id = $id;
        $this->path_tmp = $path_tmp;

    }

    public function __call($apiMethod, $data = array()) {
        $url = $this->url . $apiMethod;
        $data['id'] = $this->id;

        foreach ($data as $k => &$v) {
            if ( ($v) && (is_string($v)) && str_starts_with($v, '@') ) {
                $file = substr($v, 1);

                if ( str_starts_with($file, $this->path_tmp) ) {
                    $v = file_get_contents($file);
                }
            }
            if (is_array($v) || is_object($v)) {
                $v = json_encode($v);
            }
        }

        // Call the API server using the given configuraions
        $ch = curl_init($url);
        curl_setopt_array($ch, array(
            CURLOPT_POST           => true,
            CURLOPT_POSTFIELDS     => $data,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_HTTPHEADER     => array('Accept: application/json'),
        ));
        $response = curl_exec($ch);
        $error  = curl_error($ch);

        curl_close($ch);

        if (!empty($error)) {
            throw new Exception($error);
        }

        return $response;
    }
}
f:T27ee,<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">APICaller</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$url</span> <span class="token operator">=</span>  <span class="token string single-quoted-string">'http://localhost/api/'</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$path_tmp</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/tmp/'</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$id</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$path_tmp</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/tmp/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">path_tmp</span> <span class="token operator">=</span> <span class="token variable">$path_tmp</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$apiMethod</span><span class="token punctuation">,</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">url</span> <span class="token operator">.</span> <span class="token variable">$apiMethod</span><span class="token punctuation">;</span>
        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=></span> <span class="token operator">&amp;</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">str_starts_with</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">str_starts_with</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">path_tmp</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">is_object</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Call the API server using the given configuraions</span>
        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">curl_setopt_array</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
            <span class="token constant">CURLOPT_POST</span>           <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
            <span class="token constant">CURLOPT_POSTFIELDS</span>     <span class="token operator">=></span> <span class="token variable">$data</span><span class="token punctuation">,</span>
            <span class="token constant">CURLOPT_RETURNTRANSFER</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
            <span class="token constant">CURLOPT_HTTPHEADER</span>     <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Accept: application/json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$error</span>  <span class="token operator">=</span> <span class="token function">curl_error</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span>11:T522,# findings
# length: 5n -> 8n
# custom base32 alphabet: ybndrfg8ejkmcpqxot1uwisza345h769

# tests
# 00000 -> gyadycbo
# 00001 -> gyadycbt
# 11111 -> grauncjt
# aaaaa -> cfosnamb

# target
# ??? -> m7xzr7muqtxsr3m8pfzf6h5ep738ez5ncftss7d1cftskz49qj4zg7n9cizgez5upbzzr7n9cjosg45wqjosg3mu

import base64

b32_alphabet = "abcdefghijklmnopqrstuvwxyz234567"
custom_base32_alphabet = "ybndrfg8ejkmcpqxot1uwisza345h769"
table_enc = str.maketrans(b32_alphabet, custom_base32_alphabet)
table_dec = str.maketrans(custom_base32_alphabet, b32_alphabet)


def custom_base32_encode(data):
    result = base64.b32encode(data)
    result = result.decode().lower()
    return result.translate(table_enc)


def custom_base32_decode(result):
    result = result.translate(table_dec)
    result = result.encode().upper()
    data = base64.b32decode(result)
    return data


print(custom_base32_encode(b"00000"))  # gyadycbo
print(custom_base32_encode(b"aaaaa"))  # cfosnamb

print(custom_base32_decode("gyadycbo"))  # b'00000'
print(custom_base32_decode("cfosnamb"))  # b'aaaaa'

target = "m7xzr7muqtxsr3m8pfzf6h5ep738ez5ncftss7d1cftskz49qj4zg7n9cizgez5upbzzr7n9cjosg45wqjosg3mu"
print(custom_base32_decode(target))  # __rust_begin_short_backtrace__rust_end_short_backtraces

# Congratulations! flag{50768fcb270edc499750ea64dc45ee92}
12:T146a,<span class="token comment"># findings</span>
<span class="token comment"># length: 5n -> 8n</span>
<span class="token comment"># custom base32 alphabet: ybndrfg8ejkmcpqxot1uwisza345h769</span>

<span class="token comment"># tests</span>
<span class="token comment"># 00000 -> gyadycbo</span>
<span class="token comment"># 00001 -> gyadycbt</span>
<span class="token comment"># 11111 -> grauncjt</span>
<span class="token comment"># aaaaa -> cfosnamb</span>

<span class="token comment"># target</span>
<span class="token comment"># ??? -> m7xzr7muqtxsr3m8pfzf6h5ep738ez5ncftss7d1cftskz49qj4zg7n9cizgez5upbzzr7n9cjosg45wqjosg3mu</span>

<span class="token keyword">import</span> base64

b32_alphabet <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz234567"</span>
custom_base32_alphabet <span class="token operator">=</span> <span class="token string">"ybndrfg8ejkmcpqxot1uwisza345h769"</span>
table_enc <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>b32_alphabet<span class="token punctuation">,</span> custom_base32_alphabet<span class="token punctuation">)</span>
table_dec <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>custom_base32_alphabet<span class="token punctuation">,</span> b32_alphabet<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">custom_base32_encode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> base64<span class="token punctuation">.</span>b32encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    result <span class="token operator">=</span> result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table_enc<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">custom_base32_decode</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> result<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table_dec<span class="token punctuation">)</span>
    result <span class="token operator">=</span> result<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b32decode<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">return</span> data


<span class="token keyword">print</span><span class="token punctuation">(</span>custom_base32_encode<span class="token punctuation">(</span><span class="token string">b"00000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># gyadycbo</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>custom_base32_encode<span class="token punctuation">(</span><span class="token string">b"aaaaa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># cfosnamb</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>custom_base32_decode<span class="token punctuation">(</span><span class="token string">"gyadycbo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># b'00000'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>custom_base32_decode<span class="token punctuation">(</span><span class="token string">"cfosnamb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># b'aaaaa'</span>

target <span class="token operator">=</span> <span class="token string">"m7xzr7muqtxsr3m8pfzf6h5ep738ez5ncftss7d1cftskz49qj4zg7n9cizgez5upbzzr7n9cjosg45wqjosg3mu"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>custom_base32_decode<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># __rust_begin_short_backtrace__rust_end_short_backtraces</span>

<span class="token comment"># Congratulations! flag{50768fcb270edc499750ea64dc45ee92}</span>
13:T6ef,<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.sh"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

simplified <span class="token operator">=</span> <span class="token string">b""</span>

<span class="token keyword">for</span> ch <span class="token keyword">in</span> content<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token number">32</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&lt;=</span> <span class="token number">126</span><span class="token punctuation">:</span>
        simplified <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag_simplified.sh"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>simplified<span class="token punctuation">)</span>
14:T11b6,_bcl_verify_dec ()
{
    [ "TEST-VALUE-VERIFY" != "$(echo "$BCV" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "B-\${1}-\${UID}" -a -A 2> /dev/null)" ] && return 255;
    echo "$1-\${UID}"
}
_bcl_verify() { _bcl_verify_dec "$@"; }
_bcl_get ()
{
    [ -z "$UID" ] && UID="$(id -u 2> /dev/null)";
    [ -f "/etc/machine-id" ] && _bcl_verify "$(cat "/etc/machine-id" 2> /dev/null)" && return;
    command -v dmidecode > /dev/null && _bcl_verify "$(dmidecode -t 1 2> /dev/null | LANG=C perl -ne '/UUID/ && print && exit')" && return;
    _bcl_verify "$({ ip l sh dev "$(LANG=C ip route show match 1.1.1.1 | perl -ne 's/.*dev ([^ ]*) .*/\1/ && print && exit')" | LANG=C perl -ne 'print if /ether / && s/.*ether ([^ ]*).*/\1/'; } 2> /dev/null)" && return;
    _bcl_verify "$({ blkid -o export | LANG=C perl -ne '/^UUID/ && s/[^[:alnum:]]//g && print && exit'; } 2> /dev/null)" && return;
    _bcl_verify "$({ fdisk -l | LANG=C perl -ne '/identifier/i && s/[^[:alnum:]]//g && print && exit'; } 2> /dev/null)" && return;
}
_bcl_gen_p ()
{
    local _k;
    local str;
    [ -z "$BC_BCL_TEST_FAIL" ] && _k="$(_bcl_get)" && _P="$(echo "$1" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "$_k" -a -A 2> /dev/null)";
    [ -n "$_P" ] && return 0;
    [ -n "$fn" ] && {
        unset BCL BCV _P P S fn;
        unset -f _bcl_get _bcl_verify _bcl_verify_dec;
        return 255
    };
    BCL="$(echo "$BCL" | openssl base64 -d -A 2> /dev/null)";
    [ "$BCL" -eq "$BCL" ] 2> /dev/null && exit "$BCL";
    str="$(echo "$BCL" | openssl base64 -d -A 2> /dev/null)";
    BCL="\${str:-$BCL}";
    exec /bin/sh -c "$BCL";
    exit 255
}
BCL='aWQgLXUK'
BCV='93iNKe0zcKfgfSwQoHYdJbWGu4Dfnw5ZZ5a3ld5UEqI='
P=llLvO8+J6gmLlp964bcJG3I3mY27I9ACsJTvXYCZv2Q=
S='lRwuwaugBEhK488I'
C=3eOcpOICWx5iy2UuoJS9gQ==
for x in openssl perl gunzip; do
    command -v "$x" >/dev/null || { echo >&2 "ERROR: Command not found: $x"; return 255; }
done
unset fn _err
if [ -n "$ZSH_VERSION" ]; then
    [ "$ZSH_EVAL_CONTEXT" != "\${ZSH_EVAL_CONTEXT%":file:"*}" ] && fn="$0"
elif [ -n "$BASH_VERSION" ]; then
    (return 0 2>/dev/null) && fn="\${BASH_SOURCE[0]}"
fi
fn="\${BC_FN:-$fn}"
XS="\${BASH_EXECUTION_STRING:-$ZSH_EXECUTION_STRING}"
[ -z "$XS" ] && unset XS
[ -z "$fn" ] && [ -z "$XS" ] && [ ! -f "$0" ] && {
    echo >&2 'ERROR: Shell not supported. Try "BC_FN=FileName source FileName"'
    _err=1
}
_bc_dec() {
    _P="\${PASSWORD:-$BC_PASSWORD}"
    unset _ PASSWORD
    if [ -n "$P" ]; then
        if [ -n "$BCV" ] && [ -n "$BCL" ]; then
            _bcl_gen_p "$P" || return
        else
            _P="$(echo "$P"|openssl base64 -A -d)"
        fi
    else
        [ -z "$_P" ] && {
            echo >&2 -n "Enter password: "
            read -r _P
        }
    fi
    [ -n "$C" ] && {
        local str
        str="$(echo "$C" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "C-\${S}-\${_P}" -a -A 2>/dev/null)"
        unset C
        [ -z "$str" ] && {
            [ -n "$BCL" ] && echo >&2 "ERROR: Decryption failed."
            return 255
        }
        eval "$str"
        unset str
    }
    [ -n "$XS" ] && {
        exec bash -c "$(printf %s "$XS" |LANG=C perl -e '<>;<>;read(STDIN,$_,1);while(<>){s/B3/\n/g;s/B1/\x00/g;s/B2/B/g;print}'|openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "\${S}-\${_P}" 2>/dev/null|LANG=C perl -e "read(STDIN,\$_, \${R:-0});print(<>)"|gunzip)"
    }
    [ -z "$fn" ] && [ -f "$0" ] && {
        zf='read(STDIN,\$_,1);while(<>){s/B3/\n/g;s/B1/\\x00/g;s/B2/B/g;print}'
        prg="perl -e '<>;<>;$zf'<'\${0}'|openssl enc -d -aes-256-cbc -md sha256 -nosalt -k '\${S}-\${_P}' 2>/dev/null|perl -e 'read(STDIN,\\\$_, \${R:-0});print(<>)'|gunzip"
        LANG=C exec perl '-e$^F=255;for(319,279,385,4314,4354){($f=syscall$_,$",0)>0&&last};open($o,">&=".$f);open($i,"'"$prg"'|");print$o(<$i>);close($i)||exit($?/256);$ENV{"LANG"}="'"$LANG"'";exec{"/proc/$$/fd/$f"}"'"\${0:-python3}"'",@ARGV' -- "$@"
    }
    [ -f "\${fn}" ] && {
        unset -f _bcl_get _bcl_verify _bcl_verify_dec
        unset BCL BCV _ P _err
        eval "unset _P S R fn;$(LANG=C perl -e '<>;<>;read(STDIN,$_,1);while(<>){s/B3/\n/g;s/B1/\x00/g;s/B2/B/g;print}'<"\${fn}"|openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "\${S}-\${_P}" 2>/dev/null|LANG=C perl -e "read(STDIN,\$_, \${R:-0});print(<>)"|gunzip)"
        return
    }
    [ -z "$fn" ] && return
    echo >&2 "ERROR: File not found: $fn"
    _err=1
}
[ -z "$_err" ] && _bc_dec "$@"
unset fn
unset -f _bc_dec
if [ -n "$_err" ]; then
    unset _err
    false
else
    true
fi
15:T1353,_bcl_verify_dec ()
{
    [ "TEST-VALUE-VERIFY" != "$(echo "$BCV" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "B-\${1}-\${UID}" -a -A 2> /dev/null)" ] &amp;&amp; return 255;
    echo "$1-\${UID}"
}
_bcl_verify() { _bcl_verify_dec "$@"; }
_bcl_get ()
{
    [ -z "$UID" ] &amp;&amp; UID="$(id -u 2> /dev/null)";
    [ -f "/etc/machine-id" ] &amp;&amp; _bcl_verify "$(cat "/etc/machine-id" 2> /dev/null)" &amp;&amp; return;
    command -v dmidecode > /dev/null &amp;&amp; _bcl_verify "$(dmidecode -t 1 2> /dev/null | LANG=C perl -ne '/UUID/ &amp;&amp; print &amp;&amp; exit')" &amp;&amp; return;
    _bcl_verify "$({ ip l sh dev "$(LANG=C ip route show match 1.1.1.1 | perl -ne 's/.*dev ([^ ]*) .*/\1/ &amp;&amp; print &amp;&amp; exit')" | LANG=C perl -ne 'print if /ether / &amp;&amp; s/.*ether ([^ ]*).*/\1/'; } 2> /dev/null)" &amp;&amp; return;
    _bcl_verify "$({ blkid -o export | LANG=C perl -ne '/^UUID/ &amp;&amp; s/[^[:alnum:]]//g &amp;&amp; print &amp;&amp; exit'; } 2> /dev/null)" &amp;&amp; return;
    _bcl_verify "$({ fdisk -l | LANG=C perl -ne '/identifier/i &amp;&amp; s/[^[:alnum:]]//g &amp;&amp; print &amp;&amp; exit'; } 2> /dev/null)" &amp;&amp; return;
}
_bcl_gen_p ()
{
    local _k;
    local str;
    [ -z "$BC_BCL_TEST_FAIL" ] &amp;&amp; _k="$(_bcl_get)" &amp;&amp; _P="$(echo "$1" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "$_k" -a -A 2> /dev/null)";
    [ -n "$_P" ] &amp;&amp; return 0;
    [ -n "$fn" ] &amp;&amp; {
        unset BCL BCV _P P S fn;
        unset -f _bcl_get _bcl_verify _bcl_verify_dec;
        return 255
    };
    BCL="$(echo "$BCL" | openssl base64 -d -A 2> /dev/null)";
    [ "$BCL" -eq "$BCL" ] 2> /dev/null &amp;&amp; exit "$BCL";
    str="$(echo "$BCL" | openssl base64 -d -A 2> /dev/null)";
    BCL="\${str:-$BCL}";
    exec /bin/sh -c "$BCL";
    exit 255
}
BCL='aWQgLXUK'
BCV='93iNKe0zcKfgfSwQoHYdJbWGu4Dfnw5ZZ5a3ld5UEqI='
P=llLvO8+J6gmLlp964bcJG3I3mY27I9ACsJTvXYCZv2Q=
S='lRwuwaugBEhK488I'
C=3eOcpOICWx5iy2UuoJS9gQ==
for x in openssl perl gunzip; do
    command -v "$x" >/dev/null || { echo >&amp;2 "ERROR: Command not found: $x"; return 255; }
done
unset fn _err
if [ -n "$ZSH_VERSION" ]; then
    [ "$ZSH_EVAL_CONTEXT" != "\${ZSH_EVAL_CONTEXT%":file:"*}" ] &amp;&amp; fn="$0"
elif [ -n "$BASH_VERSION" ]; then
    (return 0 2>/dev/null) &amp;&amp; fn="\${BASH_SOURCE[0]}"
fi
fn="\${BC_FN:-$fn}"
XS="\${BASH_EXECUTION_STRING:-$ZSH_EXECUTION_STRING}"
[ -z "$XS" ] &amp;&amp; unset XS
[ -z "$fn" ] &amp;&amp; [ -z "$XS" ] &amp;&amp; [ ! -f "$0" ] &amp;&amp; {
    echo >&amp;2 'ERROR: Shell not supported. Try "BC_FN=FileName source FileName"'
    _err=1
}
_bc_dec() {
    _P="\${PASSWORD:-$BC_PASSWORD}"
    unset _ PASSWORD
    if [ -n "$P" ]; then
        if [ -n "$BCV" ] &amp;&amp; [ -n "$BCL" ]; then
            _bcl_gen_p "$P" || return
        else
            _P="$(echo "$P"|openssl base64 -A -d)"
        fi
    else
        [ -z "$_P" ] &amp;&amp; {
            echo >&amp;2 -n "Enter password: "
            read -r _P
        }
    fi
    [ -n "$C" ] &amp;&amp; {
        local str
        str="$(echo "$C" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "C-\${S}-\${_P}" -a -A 2>/dev/null)"
        unset C
        [ -z "$str" ] &amp;&amp; {
            [ -n "$BCL" ] &amp;&amp; echo >&amp;2 "ERROR: Decryption failed."
            return 255
        }
        eval "$str"
        unset str
    }
    [ -n "$XS" ] &amp;&amp; {
        exec bash -c "$(printf %s "$XS" |LANG=C perl -e '&lt;>;&lt;>;read(STDIN,$_,1);while(&lt;>){s/B3/\n/g;s/B1/\x00/g;s/B2/B/g;print}'|openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "\${S}-\${_P}" 2>/dev/null|LANG=C perl -e "read(STDIN,\$_, \${R:-0});print(&lt;>)"|gunzip)"
    }
    [ -z "$fn" ] &amp;&amp; [ -f "$0" ] &amp;&amp; {
        zf='read(STDIN,\$_,1);while(&lt;>){s/B3/\n/g;s/B1/\\x00/g;s/B2/B/g;print}'
        prg="perl -e '&lt;>;&lt;>;$zf'&lt;'\${0}'|openssl enc -d -aes-256-cbc -md sha256 -nosalt -k '\${S}-\${_P}' 2>/dev/null|perl -e 'read(STDIN,\\\$_, \${R:-0});print(&lt;>)'|gunzip"
        LANG=C exec perl '-e$^F=255;for(319,279,385,4314,4354){($f=syscall$_,$",0)>0&amp;&amp;last};open($o,">&amp;=".$f);open($i,"'"$prg"'|");print$o(&lt;$i>);close($i)||exit($?/256);$ENV{"LANG"}="'"$LANG"'";exec{"/proc/$$/fd/$f"}"'"\${0:-python3}"'",@ARGV' -- "$@"
    }
    [ -f "\${fn}" ] &amp;&amp; {
        unset -f _bcl_get _bcl_verify _bcl_verify_dec
        unset BCL BCV _ P _err
        eval "unset _P S R fn;$(LANG=C perl -e '&lt;>;&lt;>;read(STDIN,$_,1);while(&lt;>){s/B3/\n/g;s/B1/\x00/g;s/B2/B/g;print}'&lt;"\${fn}"|openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "\${S}-\${_P}" 2>/dev/null|LANG=C perl -e "read(STDIN,\$_, \${R:-0});print(&lt;>)"|gunzip)"
        return
    }
    [ -z "$fn" ] &amp;&amp; return
    echo >&amp;2 "ERROR: File not found: $fn"
    _err=1
}
[ -z "$_err" ] &amp;&amp; _bc_dec "$@"
unset fn
unset -f _bc_dec
if [ -n "$_err" ]; then
    unset _err
    false
else
    true
fi
16:Tb3c,<span class="token keyword">import</span> subprocess

BCV <span class="token operator">=</span> <span class="token string">"93iNKe0zcKfgfSwQoHYdJbWGu4Dfnw5ZZ5a3ld5UEqI="</span>

<span class="token keyword">for</span> uid <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cmd <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'echo "</span><span class="token interpolation"><span class="token punctuation">{</span>BCV<span class="token punctuation">}</span></span><span class="token string">" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "B-hello-</span><span class="token interpolation"><span class="token punctuation">{</span>uid<span class="token punctuation">}</span></span><span class="token string">" -a -A'</span></span>
    result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> capture_output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> result<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"UID </span><span class="token interpolation"><span class="token punctuation">{</span>uid<span class="token punctuation">}</span></span><span class="token string"> succeeded: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">.</span>stdout<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token comment"># UID 83 succeeded: b'B\x87\xe5\xb5\xa5\x1d\xc9\`Ww+3\x8d\xb8\xa9\x06\x7f\x0f\x1dY\xa3\xe5\xf3\x080I&amp;/\x98N\x01'</span>
<span class="token comment"># UID 1094 succeeded: b'\x10CU1\\\xe3E\xbf\x9e\x83\xa7\xbb\xf6\xda\xc6\x90\xb3\x17O\x9e\xf5\x1c\xbe\x92\xad\xbd}\xd1\x82\x84H'</span>
<span class="token comment"># UID 1338 succeeded: b'TEST-VALUE-VERIFY\n'</span>
<span class="token comment"># UID 1417 succeeded: b'\xe0b[\xc2.\x08W\xb5\x15\xc9?\xf0an0W4I\xa3+\xdbb\x0f\xa8\n"\xd2\'\x85yj'</span>
<span class="token comment"># ...</span>
17:T5d6,<span class="token keyword">import</span> subprocess

P <span class="token operator">=</span> <span class="token string">"llLvO8+J6gmLlp964bcJG3I3mY27I9ACsJTvXYCZv2Q="</span>
_k <span class="token operator">=</span> <span class="token string">"hello-1338"</span>  <span class="token comment"># from dec-1.py</span>

cmd <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'echo "</span><span class="token interpolation"><span class="token punctuation">{</span>P<span class="token punctuation">}</span></span><span class="token string">" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k "</span><span class="token interpolation"><span class="token punctuation">{</span>_k<span class="token punctuation">}</span></span><span class="token string">" -a -A'</span></span>
result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> capture_output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>  <span class="token comment"># b'QHh4K9JfgoACd2f4\n'</span>
4:[["$","h2",null,{"className":"x-h1","children":"Web/Outcast"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"The challenge gives part of the source code in <code class=\"x-inline-highlight\">/modules/apicaller.php.orig</code>:"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"PHP"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$e"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"By appending an extra <code class=\"x-inline-highlight\">\\r&#92;n</code> to the <code class=\"x-inline-highlight\">method</code> parameter, the server throws an error and responds with the error message. Note that the error message reflects the value of parameters."}}],["$","$L10",null,{"src":"1.jpg","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"This can also be used for file existence enumeration. (And found <code class=\"x-inline-highlight\">/flag.txt</code> exists.)"}}],["$","$L10",null,{"src":"2.jpg","width":"100%","filterDarkTheme":true}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"According to <code class=\"x-inline-highlight\">apicaller.php.orig</code>, parameters like <code class=\"x-inline-highlight\">@/tmp/[file]</code> will be parsed as file contents, and there is a path traversal vulnerability in both <code class=\"x-inline-highlight\">method</code> and <code class=\"x-inline-highlight\">parameters</code>."}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"Make a request to the <code class=\"x-inline-highlight\">../test/</code> API again, set the <code class=\"x-inline-highlight\">method</code> parameter to a value that causes the error, like <code class=\"x-inline-highlight\">1\\r&#92;n</code>, and set the <code class=\"x-inline-highlight\">parameters</code> parameter to <code class=\"x-inline-highlight\">@/tmp/../flag.txt</code>. The server will reflect the contents of the file, which is the flag."}}],["$","$L10",null,{"src":"3.jpg","width":"100%","filterDarkTheme":true}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"FLAG{ch41ning_bug$_1s_W0nd3rful!}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"FLAG{ch41ning_bug$_1s_W0nd3rful!}"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"Rev/What's a base amongst friends?"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"This is a custom Base32 encoding. After some dynamic debugging, the custom alphabet is <code class=\"x-inline-highlight\">ybndrfg8ejkmcpqxot1uwisza345h769</code>, and the encoded flag is <code class=\"x-inline-highlight\">m7xzr7muqtxsr3m8pfzf6h5ep738ez5ncftss7d1cftskz49qj4zg7n9cizgez5upbzzr7n9cjosg45wqjosg3mu</code>."}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$11"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"flag{50768fcb270edc499750ea64dc45ee92}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"flag{50768fcb270edc499750ea64dc45ee92}"}}]}]]}],["$","h2",null,{"className":"x-h1","children":"Rev/It's Locked"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"The given <code class=\"x-inline-highlight\">flag.sh</code> script contains a lot of unreadable binary or non-printable characters. But we can still barely recognize the following part:"}}],["$","$L10",null,{"src":"4.jpg","width":"100%"}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"Which is:"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Bash"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"LANG=C perl -pe \"s/[^print:]//g\" | openssl base64 -A -d"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>C perl <span class=\"token parameter variable\">-pe</span> <span class=\"token string\">\"s/[^print:]//g\"</span> <span class=\"token operator\">|</span> openssl base64 <span class=\"token parameter variable\">-A</span> <span class=\"token parameter variable\">-d</span>"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"And <code class=\"x-inline-highlight\">s/[^print:]//g</code> means to remove all non-printable characters, which inspires us to extract the printable characters from the script. We use the following script:"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"with open(\"flag.sh\", \"rb\") as f:\n    content = f.read()\n\nsimplified = b\"\"\n\nfor ch in content:\n    if 32 <= ch <= 126:\n        simplified += bytes([ch])\n\nwith open(\"flag_simplified.sh\", \"wb\") as f:\n    f.write(simplified)\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"And get <code class=\"x-inline-highlight\">flag_simplified.sh</code> which includes a long Base64 string. We can decode it into the following content:"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"$14"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$15"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">_bcl_get</code> function tries a series of machine-unique identifiers to generate a key, and then decrypts the <code class=\"x-inline-highlight\">BCV</code> variable using the key. And this challenge gives us an important hint:"}}],["$","div",null,{"className":"x-highlightblock highlight-background-gray","children":["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"All I know is that this came from a machine with a cryptic ID of just 'hello'."}}]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"So we then try to brute force the <code class=\"x-inline-highlight\">UID</code>:"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"import subprocess\n\nBCV = \"93iNKe0zcKfgfSwQoHYdJbWGu4Dfnw5ZZ5a3ld5UEqI=\"\n\nfor uid in range(0, 10000):\n    cmd = f'echo \"{BCV}\" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k \"B-hello-{uid}\" -a -A'\n    result = subprocess.run(cmd, shell=True, capture_output=True)\n    if result.returncode == 0:\n        print(f\"UID {uid} succeeded: {result.stdout}\")\n\n# UID 83 succeeded: b'B\\x87\\xe5\\xb5\\xa5\\x1d\\xc9\\`Ww+3\\x8d\\xb8\\xa9\\x06\\x7f\\x0f\\x1dY\\xa3\\xe5\\xf3\\x080I&/\\x98N\\x01'\n# UID 1094 succeeded: b'\\x10CU1\\\\\\xe3E\\xbf\\x9e\\x83\\xa7\\xbb\\xf6\\xda\\xc6\\x90\\xb3\\x17O\\x9e\\xf5\\x1c\\xbe\\x92\\xad\\xbd}\\xd1\\x82\\x84H'\n# UID 1338 succeeded: b'TEST-VALUE-VERIFY\\n'\n# UID 1417 succeeded: b'\\xe0b[\\xc2.\\x08W\\xb5\\x15\\xc9?\\xf0an0W4I\\xa3+\\xdbb\\x0f\\xa8\\n\"\\xd2\\'\\x85yj'\n# ...\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"And get the first key: <code class=\"x-inline-highlight\">\"B-hello-1338\"</code>."}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"<code class=\"x-inline-highlight\">_bcl_get</code> function returns the second key <code class=\"x-inline-highlight\">\"hello-1338\"</code> by <code class=\"x-inline-highlight\">echo</code>, which is <code class=\"x-inline-highlight\">_k</code> used in:"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"_k=\"$(_bcl_get)\" && _P=\"$(echo \"$1\" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k \"$_k\" -a -A 2> /dev/null)\";"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"_k=\"$(_bcl_get)\" &amp;&amp; _P=\"$(echo \"$1\" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k \"$_k\" -a -A 2> /dev/null)\";"}}]}]]}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Python"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"import subprocess\n\nP = \"llLvO8+J6gmLlp964bcJG3I3mY27I9ACsJTvXYCZv2Q=\"\n_k = \"hello-1338\"  # from dec-1.py\n\ncmd = f'echo \"{P}\" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k \"{_k}\" -a -A'\nresult = subprocess.run(cmd, shell=True, capture_output=True)\n\nprint(result.stdout)  # b'QHh4K9JfgoACd2f4\\n'\n"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$17"}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"Then we can get the string <code class=\"x-inline-highlight\">\"QHh4K9JfgoACd2f4\"</code> by running the above command, which is <code class=\"x-inline-highlight\">_P</code> used in the third key:"}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"str=\"$(echo \"$C\" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k \"C-${S}-${_P}\" -a -A 2>/dev/null)\""}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"str=\"$(echo \"$C\" | openssl enc -d -aes-256-cbc -md sha256 -nosalt -k \"C-${S}-${_P}\" -a -A 2>/dev/null)\""}}]}]]}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"Here <code class=\"x-inline-highlight\">str</code> turns out to be <code class=\"x-inline-highlight\">\"R=2105&#92;n&#92;n\"</code>."}}],["$","p",null,{"className":"x-p","dangerouslySetInnerHTML":{"__html":"..."}}],["$","div",null,{"className":"x-codeblock","children":[["$","div",null,{"className":"x-codeblock-header","children":[["$","div",null,{"className":"x-codeblock-header-language","children":"Plain Text"}],["$","$Ld",null,{"className":"x-codeblock-header-copy","text":"flag{f2ea4caf879bde891f0174f528c20682}"}]]}],["$","pre",null,{"style":{"background":null},"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"flag{f2ea4caf879bde891f0174f528c20682}"}}]}]]}]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"NahamCon CTF 2025 Writeup - 铃木的网络日记"}],["$","link","3",{"rel":"canonical","href":"https://1kuzus.github.io/25b/wp-nahamcon-ctf-2025/"}]]
1:null
